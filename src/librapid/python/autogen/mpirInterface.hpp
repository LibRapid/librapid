py::class_<librapid::mpz>(module, "mpz")
	.def(py::init<>())
	.def(py::init<int64_t>())
	.def(py::init<double>())
	.def(py::init<const std::string &>())
	.def(py::init<const lrc::mpz>())
	.def(py::init<const lrc::mpf>())
	.def(py::init<const lrc::mpq>())
	.def("__add__", [](const librapid::mpz & this_, int64_t other) { return librapid::mpz(this_ + other); }, py::arg("other"))
	.def("__add__", [](const librapid::mpz & this_, double other) { return librapid::mpz(this_ + other); }, py::arg("other"))
	.def("__add__", [](const librapid::mpz & this_, const librapid::mpz & other) { return librapid::mpz(this_ + other); }, py::arg("other"))
	.def("__add__", [](const librapid::mpz & this_, const librapid::mpf & other) { return librapid::mpz(this_ + other); }, py::arg("other"))
	.def("__add__", [](const librapid::mpz & this_, const librapid::mpq & other) { return librapid::mpz(this_ + other); }, py::arg("other"))
	.def("__sub__", [](const librapid::mpz & this_, int64_t other) { return librapid::mpz(this_ - other); }, py::arg("other"))
	.def("__sub__", [](const librapid::mpz & this_, double other) { return librapid::mpz(this_ - other); }, py::arg("other"))
	.def("__sub__", [](const librapid::mpz & this_, const librapid::mpz & other) { return librapid::mpz(this_ - other); }, py::arg("other"))
	.def("__sub__", [](const librapid::mpz & this_, const librapid::mpf & other) { return librapid::mpz(this_ - other); }, py::arg("other"))
	.def("__sub__", [](const librapid::mpz & this_, const librapid::mpq & other) { return librapid::mpz(this_ - other); }, py::arg("other"))
	.def("__mul__", [](const librapid::mpz & this_, int64_t other) { return librapid::mpz(this_ * other); }, py::arg("other"))
	.def("__mul__", [](const librapid::mpz & this_, double other) { return librapid::mpz(this_ * other); }, py::arg("other"))
	.def("__mul__", [](const librapid::mpz & this_, const librapid::mpz & other) { return librapid::mpz(this_ * other); }, py::arg("other"))
	.def("__mul__", [](const librapid::mpz & this_, const librapid::mpf & other) { return librapid::mpz(this_ * other); }, py::arg("other"))
	.def("__mul__", [](const librapid::mpz & this_, const librapid::mpq & other) { return librapid::mpz(this_ * other); }, py::arg("other"))
	.def("__div__", [](const librapid::mpz & this_, int64_t other) { return librapid::mpz(this_ / other); }, py::arg("other"))
	.def("__div__", [](const librapid::mpz & this_, double other) { return librapid::mpz(this_ / other); }, py::arg("other"))
	.def("__div__", [](const librapid::mpz & this_, const librapid::mpz & other) { return librapid::mpz(this_ / other); }, py::arg("other"))
	.def("__div__", [](const librapid::mpz & this_, const librapid::mpf & other) { return librapid::mpz(this_ / other); }, py::arg("other"))
	.def("__div__", [](const librapid::mpz & this_, const librapid::mpq & other) { return librapid::mpz(this_ / other); }, py::arg("other"))
	.def("__radd__", [](const librapid::mpz & this_, int64_t other) { return librapid::mpz(other + this_); }, py::arg("other"))
	.def("__radd__", [](const librapid::mpz & this_, double other) { return librapid::mpz(other + this_); }, py::arg("other"))
	.def("__radd__", [](const librapid::mpz & this_, const librapid::mpz & other) { return librapid::mpz(other + this_); }, py::arg("other"))
	.def("__radd__", [](const librapid::mpz & this_, const librapid::mpf & other) { return librapid::mpz(other + this_); }, py::arg("other"))
	.def("__radd__", [](const librapid::mpz & this_, const librapid::mpq & other) { return librapid::mpz(other + this_); }, py::arg("other"))
	.def("__rsub__", [](const librapid::mpz & this_, int64_t other) { return librapid::mpz(other - this_); }, py::arg("other"))
	.def("__rsub__", [](const librapid::mpz & this_, double other) { return librapid::mpz(other - this_); }, py::arg("other"))
	.def("__rsub__", [](const librapid::mpz & this_, const librapid::mpz & other) { return librapid::mpz(other - this_); }, py::arg("other"))
	.def("__rsub__", [](const librapid::mpz & this_, const librapid::mpf & other) { return librapid::mpz(other - this_); }, py::arg("other"))
	.def("__rsub__", [](const librapid::mpz & this_, const librapid::mpq & other) { return librapid::mpz(other - this_); }, py::arg("other"))
	.def("__rmul__", [](const librapid::mpz & this_, int64_t other) { return librapid::mpz(other * this_); }, py::arg("other"))
	.def("__rmul__", [](const librapid::mpz & this_, double other) { return librapid::mpz(other * this_); }, py::arg("other"))
	.def("__rmul__", [](const librapid::mpz & this_, const librapid::mpz & other) { return librapid::mpz(other * this_); }, py::arg("other"))
	.def("__rmul__", [](const librapid::mpz & this_, const librapid::mpf & other) { return librapid::mpz(other * this_); }, py::arg("other"))
	.def("__rmul__", [](const librapid::mpz & this_, const librapid::mpq & other) { return librapid::mpz(other * this_); }, py::arg("other"))
	.def("__rdiv__", [](const librapid::mpz & this_, int64_t other) { return librapid::mpz(other / this_); }, py::arg("other"))
	.def("__rdiv__", [](const librapid::mpz & this_, double other) { return librapid::mpz(other / this_); }, py::arg("other"))
	.def("__rdiv__", [](const librapid::mpz & this_, const librapid::mpz & other) { return librapid::mpz(other / this_); }, py::arg("other"))
	.def("__rdiv__", [](const librapid::mpz & this_, const librapid::mpf & other) { return librapid::mpz(other / this_); }, py::arg("other"))
	.def("__rdiv__", [](const librapid::mpz & this_, const librapid::mpq & other) { return librapid::mpz(other / this_); }, py::arg("other"))
	.def("__iadd__", [](librapid::mpz & this_, int64_t other) { this_ += other; return this_; }, py::arg("other"))
	.def("__iadd__", [](librapid::mpz & this_, double other) { this_ += other; return this_; }, py::arg("other"))
	.def("__iadd__", [](librapid::mpz & this_, const librapid::mpz & other) { this_ += other; return this_; }, py::arg("other"))
	.def("__iadd__", [](librapid::mpz & this_, const librapid::mpf & other) { this_ += other; return this_; }, py::arg("other"))
	.def("__iadd__", [](librapid::mpz & this_, const librapid::mpq & other) { this_ += other; return this_; }, py::arg("other"))
	.def("__isub__", [](librapid::mpz & this_, int64_t other) { this_ -= other; return this_; }, py::arg("other"))
	.def("__isub__", [](librapid::mpz & this_, double other) { this_ -= other; return this_; }, py::arg("other"))
	.def("__isub__", [](librapid::mpz & this_, const librapid::mpz & other) { this_ -= other; return this_; }, py::arg("other"))
	.def("__isub__", [](librapid::mpz & this_, const librapid::mpf & other) { this_ -= other; return this_; }, py::arg("other"))
	.def("__isub__", [](librapid::mpz & this_, const librapid::mpq & other) { this_ -= other; return this_; }, py::arg("other"))
	.def("__imul__", [](librapid::mpz & this_, int64_t other) { this_ *= other; return this_; }, py::arg("other"))
	.def("__imul__", [](librapid::mpz & this_, double other) { this_ *= other; return this_; }, py::arg("other"))
	.def("__imul__", [](librapid::mpz & this_, const librapid::mpz & other) { this_ *= other; return this_; }, py::arg("other"))
	.def("__imul__", [](librapid::mpz & this_, const librapid::mpf & other) { this_ *= other; return this_; }, py::arg("other"))
	.def("__imul__", [](librapid::mpz & this_, const librapid::mpq & other) { this_ *= other; return this_; }, py::arg("other"))
	.def("__idiv__", [](librapid::mpz & this_, int64_t other) { this_ /= other; return this_; }, py::arg("other"))
	.def("__idiv__", [](librapid::mpz & this_, double other) { this_ /= other; return this_; }, py::arg("other"))
	.def("__idiv__", [](librapid::mpz & this_, const librapid::mpz & other) { this_ /= other; return this_; }, py::arg("other"))
	.def("__idiv__", [](librapid::mpz & this_, const librapid::mpf & other) { this_ /= other; return this_; }, py::arg("other"))
	.def("__idiv__", [](librapid::mpz & this_, const librapid::mpq & other) { this_ /= other; return this_; }, py::arg("other"))
	.def("__lshift__", [](const librapid::mpz & this_, int64_t other) { return librapid::mpz(this_ << other); }, py::arg("other"))
	.def("__rshift__", [](const librapid::mpz & this_, int64_t other) { return librapid::mpz(this_ >> other); }, py::arg("other"))
	.def("__ilshift__", [](librapid::mpz & this_, int64_t other) { this_ <<= other; return this_; }, py::arg("other"))
	.def("__irshift__", [](librapid::mpz & this_, int64_t other) { this_ >>= other; return this_; }, py::arg("other"))
	.def("str", [](const librapid::mpz & this_, int64_t base) { return lrc::str(this_, {-1, base, false}); }, py::arg("base") = int64_t(10))
	.def("__str__", [](const librapid::mpz & this_) { return lrc::str(this_, {-1, 10, false}); })
	.def("__repr__", [](const librapid::mpz & this_) { return "librapid::mpz(\"" + lrc::str(this_, {-1, 10, false}) + "\")"; });

py::class_<librapid::mpf>(module, "mpf")
	.def(py::init<>())
	.def(py::init<int64_t>())
	.def(py::init<double>())
	.def(py::init<const std::string &>())
	.def(py::init<const lrc::mpz>())
	.def(py::init<const lrc::mpf>())
	.def(py::init<const lrc::mpq>())
	.def("__add__", [](const librapid::mpf & this_, int64_t other) { return librapid::mpf(this_ + other); }, py::arg("other"))
	.def("__add__", [](const librapid::mpf & this_, double other) { return librapid::mpf(this_ + other); }, py::arg("other"))
	.def("__add__", [](const librapid::mpf & this_, const librapid::mpz & other) { return librapid::mpf(this_ + other); }, py::arg("other"))
	.def("__add__", [](const librapid::mpf & this_, const librapid::mpf & other) { return librapid::mpf(this_ + other); }, py::arg("other"))
	.def("__add__", [](const librapid::mpf & this_, const librapid::mpq & other) { return librapid::mpf(this_ + other); }, py::arg("other"))
	.def("__sub__", [](const librapid::mpf & this_, int64_t other) { return librapid::mpf(this_ - other); }, py::arg("other"))
	.def("__sub__", [](const librapid::mpf & this_, double other) { return librapid::mpf(this_ - other); }, py::arg("other"))
	.def("__sub__", [](const librapid::mpf & this_, const librapid::mpz & other) { return librapid::mpf(this_ - other); }, py::arg("other"))
	.def("__sub__", [](const librapid::mpf & this_, const librapid::mpf & other) { return librapid::mpf(this_ - other); }, py::arg("other"))
	.def("__sub__", [](const librapid::mpf & this_, const librapid::mpq & other) { return librapid::mpf(this_ - other); }, py::arg("other"))
	.def("__mul__", [](const librapid::mpf & this_, int64_t other) { return librapid::mpf(this_ * other); }, py::arg("other"))
	.def("__mul__", [](const librapid::mpf & this_, double other) { return librapid::mpf(this_ * other); }, py::arg("other"))
	.def("__mul__", [](const librapid::mpf & this_, const librapid::mpz & other) { return librapid::mpf(this_ * other); }, py::arg("other"))
	.def("__mul__", [](const librapid::mpf & this_, const librapid::mpf & other) { return librapid::mpf(this_ * other); }, py::arg("other"))
	.def("__mul__", [](const librapid::mpf & this_, const librapid::mpq & other) { return librapid::mpf(this_ * other); }, py::arg("other"))
	.def("__div__", [](const librapid::mpf & this_, int64_t other) { return librapid::mpf(this_ / other); }, py::arg("other"))
	.def("__div__", [](const librapid::mpf & this_, double other) { return librapid::mpf(this_ / other); }, py::arg("other"))
	.def("__div__", [](const librapid::mpf & this_, const librapid::mpz & other) { return librapid::mpf(this_ / other); }, py::arg("other"))
	.def("__div__", [](const librapid::mpf & this_, const librapid::mpf & other) { return librapid::mpf(this_ / other); }, py::arg("other"))
	.def("__div__", [](const librapid::mpf & this_, const librapid::mpq & other) { return librapid::mpf(this_ / other); }, py::arg("other"))
	.def("__radd__", [](const librapid::mpf & this_, int64_t other) { return librapid::mpf(other + this_); }, py::arg("other"))
	.def("__radd__", [](const librapid::mpf & this_, double other) { return librapid::mpf(other + this_); }, py::arg("other"))
	.def("__radd__", [](const librapid::mpf & this_, const librapid::mpz & other) { return librapid::mpf(other + this_); }, py::arg("other"))
	.def("__radd__", [](const librapid::mpf & this_, const librapid::mpf & other) { return librapid::mpf(other + this_); }, py::arg("other"))
	.def("__radd__", [](const librapid::mpf & this_, const librapid::mpq & other) { return librapid::mpf(other + this_); }, py::arg("other"))
	.def("__rsub__", [](const librapid::mpf & this_, int64_t other) { return librapid::mpf(other - this_); }, py::arg("other"))
	.def("__rsub__", [](const librapid::mpf & this_, double other) { return librapid::mpf(other - this_); }, py::arg("other"))
	.def("__rsub__", [](const librapid::mpf & this_, const librapid::mpz & other) { return librapid::mpf(other - this_); }, py::arg("other"))
	.def("__rsub__", [](const librapid::mpf & this_, const librapid::mpf & other) { return librapid::mpf(other - this_); }, py::arg("other"))
	.def("__rsub__", [](const librapid::mpf & this_, const librapid::mpq & other) { return librapid::mpf(other - this_); }, py::arg("other"))
	.def("__rmul__", [](const librapid::mpf & this_, int64_t other) { return librapid::mpf(other * this_); }, py::arg("other"))
	.def("__rmul__", [](const librapid::mpf & this_, double other) { return librapid::mpf(other * this_); }, py::arg("other"))
	.def("__rmul__", [](const librapid::mpf & this_, const librapid::mpz & other) { return librapid::mpf(other * this_); }, py::arg("other"))
	.def("__rmul__", [](const librapid::mpf & this_, const librapid::mpf & other) { return librapid::mpf(other * this_); }, py::arg("other"))
	.def("__rmul__", [](const librapid::mpf & this_, const librapid::mpq & other) { return librapid::mpf(other * this_); }, py::arg("other"))
	.def("__rdiv__", [](const librapid::mpf & this_, int64_t other) { return librapid::mpf(other / this_); }, py::arg("other"))
	.def("__rdiv__", [](const librapid::mpf & this_, double other) { return librapid::mpf(other / this_); }, py::arg("other"))
	.def("__rdiv__", [](const librapid::mpf & this_, const librapid::mpz & other) { return librapid::mpf(other / this_); }, py::arg("other"))
	.def("__rdiv__", [](const librapid::mpf & this_, const librapid::mpf & other) { return librapid::mpf(other / this_); }, py::arg("other"))
	.def("__rdiv__", [](const librapid::mpf & this_, const librapid::mpq & other) { return librapid::mpf(other / this_); }, py::arg("other"))
	.def("__iadd__", [](librapid::mpf & this_, int64_t other) { this_ += other; return this_; }, py::arg("other"))
	.def("__iadd__", [](librapid::mpf & this_, double other) { this_ += other; return this_; }, py::arg("other"))
	.def("__iadd__", [](librapid::mpf & this_, const librapid::mpz & other) { this_ += other; return this_; }, py::arg("other"))
	.def("__iadd__", [](librapid::mpf & this_, const librapid::mpf & other) { this_ += other; return this_; }, py::arg("other"))
	.def("__iadd__", [](librapid::mpf & this_, const librapid::mpq & other) { this_ += other; return this_; }, py::arg("other"))
	.def("__isub__", [](librapid::mpf & this_, int64_t other) { this_ -= other; return this_; }, py::arg("other"))
	.def("__isub__", [](librapid::mpf & this_, double other) { this_ -= other; return this_; }, py::arg("other"))
	.def("__isub__", [](librapid::mpf & this_, const librapid::mpz & other) { this_ -= other; return this_; }, py::arg("other"))
	.def("__isub__", [](librapid::mpf & this_, const librapid::mpf & other) { this_ -= other; return this_; }, py::arg("other"))
	.def("__isub__", [](librapid::mpf & this_, const librapid::mpq & other) { this_ -= other; return this_; }, py::arg("other"))
	.def("__imul__", [](librapid::mpf & this_, int64_t other) { this_ *= other; return this_; }, py::arg("other"))
	.def("__imul__", [](librapid::mpf & this_, double other) { this_ *= other; return this_; }, py::arg("other"))
	.def("__imul__", [](librapid::mpf & this_, const librapid::mpz & other) { this_ *= other; return this_; }, py::arg("other"))
	.def("__imul__", [](librapid::mpf & this_, const librapid::mpf & other) { this_ *= other; return this_; }, py::arg("other"))
	.def("__imul__", [](librapid::mpf & this_, const librapid::mpq & other) { this_ *= other; return this_; }, py::arg("other"))
	.def("__idiv__", [](librapid::mpf & this_, int64_t other) { this_ /= other; return this_; }, py::arg("other"))
	.def("__idiv__", [](librapid::mpf & this_, double other) { this_ /= other; return this_; }, py::arg("other"))
	.def("__idiv__", [](librapid::mpf & this_, const librapid::mpz & other) { this_ /= other; return this_; }, py::arg("other"))
	.def("__idiv__", [](librapid::mpf & this_, const librapid::mpf & other) { this_ /= other; return this_; }, py::arg("other"))
	.def("__idiv__", [](librapid::mpf & this_, const librapid::mpq & other) { this_ /= other; return this_; }, py::arg("other"))
	.def("__lshift__", [](const librapid::mpf & this_, int64_t other) { return librapid::mpf(this_ << other); }, py::arg("other"))
	.def("__rshift__", [](const librapid::mpf & this_, int64_t other) { return librapid::mpf(this_ >> other); }, py::arg("other"))
	.def("__ilshift__", [](librapid::mpf & this_, int64_t other) { this_ <<= other; return this_; }, py::arg("other"))
	.def("__irshift__", [](librapid::mpf & this_, int64_t other) { this_ >>= other; return this_; }, py::arg("other"))
	.def("str", [](const librapid::mpf & this_, int64_t base) { return lrc::str(this_, {-1, base, false}); }, py::arg("base") = int64_t(10))
	.def("__str__", [](const librapid::mpf & this_) { return lrc::str(this_, {-1, 10, false}); })
	.def("__repr__", [](const librapid::mpf & this_) { return "librapid::mpf(\"" + lrc::str(this_, {-1, 10, false}) + "\")"; });

py::class_<librapid::mpq>(module, "mpq")
	.def(py::init<>())
	.def(py::init<int64_t>())
	.def(py::init<double>())
	.def(py::init<const std::string &>())
	.def(py::init<const lrc::mpz>())
	.def(py::init<const lrc::mpf>())
	.def(py::init<const lrc::mpq>())
	.def("__add__", [](const librapid::mpq & this_, int64_t other) { return librapid::mpq(this_ + other); }, py::arg("other"))
	.def("__add__", [](const librapid::mpq & this_, double other) { return librapid::mpq(this_ + other); }, py::arg("other"))
	.def("__add__", [](const librapid::mpq & this_, const librapid::mpz & other) { return librapid::mpq(this_ + other); }, py::arg("other"))
	.def("__add__", [](const librapid::mpq & this_, const librapid::mpf & other) { return librapid::mpq(this_ + other); }, py::arg("other"))
	.def("__add__", [](const librapid::mpq & this_, const librapid::mpq & other) { return librapid::mpq(this_ + other); }, py::arg("other"))
	.def("__sub__", [](const librapid::mpq & this_, int64_t other) { return librapid::mpq(this_ - other); }, py::arg("other"))
	.def("__sub__", [](const librapid::mpq & this_, double other) { return librapid::mpq(this_ - other); }, py::arg("other"))
	.def("__sub__", [](const librapid::mpq & this_, const librapid::mpz & other) { return librapid::mpq(this_ - other); }, py::arg("other"))
	.def("__sub__", [](const librapid::mpq & this_, const librapid::mpf & other) { return librapid::mpq(this_ - other); }, py::arg("other"))
	.def("__sub__", [](const librapid::mpq & this_, const librapid::mpq & other) { return librapid::mpq(this_ - other); }, py::arg("other"))
	.def("__mul__", [](const librapid::mpq & this_, int64_t other) { return librapid::mpq(this_ * other); }, py::arg("other"))
	.def("__mul__", [](const librapid::mpq & this_, double other) { return librapid::mpq(this_ * other); }, py::arg("other"))
	.def("__mul__", [](const librapid::mpq & this_, const librapid::mpz & other) { return librapid::mpq(this_ * other); }, py::arg("other"))
	.def("__mul__", [](const librapid::mpq & this_, const librapid::mpf & other) { return librapid::mpq(this_ * other); }, py::arg("other"))
	.def("__mul__", [](const librapid::mpq & this_, const librapid::mpq & other) { return librapid::mpq(this_ * other); }, py::arg("other"))
	.def("__div__", [](const librapid::mpq & this_, int64_t other) { return librapid::mpq(this_ / other); }, py::arg("other"))
	.def("__div__", [](const librapid::mpq & this_, double other) { return librapid::mpq(this_ / other); }, py::arg("other"))
	.def("__div__", [](const librapid::mpq & this_, const librapid::mpz & other) { return librapid::mpq(this_ / other); }, py::arg("other"))
	.def("__div__", [](const librapid::mpq & this_, const librapid::mpf & other) { return librapid::mpq(this_ / other); }, py::arg("other"))
	.def("__div__", [](const librapid::mpq & this_, const librapid::mpq & other) { return librapid::mpq(this_ / other); }, py::arg("other"))
	.def("__radd__", [](const librapid::mpq & this_, int64_t other) { return librapid::mpq(other + this_); }, py::arg("other"))
	.def("__radd__", [](const librapid::mpq & this_, double other) { return librapid::mpq(other + this_); }, py::arg("other"))
	.def("__radd__", [](const librapid::mpq & this_, const librapid::mpz & other) { return librapid::mpq(other + this_); }, py::arg("other"))
	.def("__radd__", [](const librapid::mpq & this_, const librapid::mpf & other) { return librapid::mpq(other + this_); }, py::arg("other"))
	.def("__radd__", [](const librapid::mpq & this_, const librapid::mpq & other) { return librapid::mpq(other + this_); }, py::arg("other"))
	.def("__rsub__", [](const librapid::mpq & this_, int64_t other) { return librapid::mpq(other - this_); }, py::arg("other"))
	.def("__rsub__", [](const librapid::mpq & this_, double other) { return librapid::mpq(other - this_); }, py::arg("other"))
	.def("__rsub__", [](const librapid::mpq & this_, const librapid::mpz & other) { return librapid::mpq(other - this_); }, py::arg("other"))
	.def("__rsub__", [](const librapid::mpq & this_, const librapid::mpf & other) { return librapid::mpq(other - this_); }, py::arg("other"))
	.def("__rsub__", [](const librapid::mpq & this_, const librapid::mpq & other) { return librapid::mpq(other - this_); }, py::arg("other"))
	.def("__rmul__", [](const librapid::mpq & this_, int64_t other) { return librapid::mpq(other * this_); }, py::arg("other"))
	.def("__rmul__", [](const librapid::mpq & this_, double other) { return librapid::mpq(other * this_); }, py::arg("other"))
	.def("__rmul__", [](const librapid::mpq & this_, const librapid::mpz & other) { return librapid::mpq(other * this_); }, py::arg("other"))
	.def("__rmul__", [](const librapid::mpq & this_, const librapid::mpf & other) { return librapid::mpq(other * this_); }, py::arg("other"))
	.def("__rmul__", [](const librapid::mpq & this_, const librapid::mpq & other) { return librapid::mpq(other * this_); }, py::arg("other"))
	.def("__rdiv__", [](const librapid::mpq & this_, int64_t other) { return librapid::mpq(other / this_); }, py::arg("other"))
	.def("__rdiv__", [](const librapid::mpq & this_, double other) { return librapid::mpq(other / this_); }, py::arg("other"))
	.def("__rdiv__", [](const librapid::mpq & this_, const librapid::mpz & other) { return librapid::mpq(other / this_); }, py::arg("other"))
	.def("__rdiv__", [](const librapid::mpq & this_, const librapid::mpf & other) { return librapid::mpq(other / this_); }, py::arg("other"))
	.def("__rdiv__", [](const librapid::mpq & this_, const librapid::mpq & other) { return librapid::mpq(other / this_); }, py::arg("other"))
	.def("__iadd__", [](librapid::mpq & this_, int64_t other) { this_ += other; return this_; }, py::arg("other"))
	.def("__iadd__", [](librapid::mpq & this_, double other) { this_ += other; return this_; }, py::arg("other"))
	.def("__iadd__", [](librapid::mpq & this_, const librapid::mpz & other) { this_ += other; return this_; }, py::arg("other"))
	.def("__iadd__", [](librapid::mpq & this_, const librapid::mpf & other) { this_ += other; return this_; }, py::arg("other"))
	.def("__iadd__", [](librapid::mpq & this_, const librapid::mpq & other) { this_ += other; return this_; }, py::arg("other"))
	.def("__isub__", [](librapid::mpq & this_, int64_t other) { this_ -= other; return this_; }, py::arg("other"))
	.def("__isub__", [](librapid::mpq & this_, double other) { this_ -= other; return this_; }, py::arg("other"))
	.def("__isub__", [](librapid::mpq & this_, const librapid::mpz & other) { this_ -= other; return this_; }, py::arg("other"))
	.def("__isub__", [](librapid::mpq & this_, const librapid::mpf & other) { this_ -= other; return this_; }, py::arg("other"))
	.def("__isub__", [](librapid::mpq & this_, const librapid::mpq & other) { this_ -= other; return this_; }, py::arg("other"))
	.def("__imul__", [](librapid::mpq & this_, int64_t other) { this_ *= other; return this_; }, py::arg("other"))
	.def("__imul__", [](librapid::mpq & this_, double other) { this_ *= other; return this_; }, py::arg("other"))
	.def("__imul__", [](librapid::mpq & this_, const librapid::mpz & other) { this_ *= other; return this_; }, py::arg("other"))
	.def("__imul__", [](librapid::mpq & this_, const librapid::mpf & other) { this_ *= other; return this_; }, py::arg("other"))
	.def("__imul__", [](librapid::mpq & this_, const librapid::mpq & other) { this_ *= other; return this_; }, py::arg("other"))
	.def("__idiv__", [](librapid::mpq & this_, int64_t other) { this_ /= other; return this_; }, py::arg("other"))
	.def("__idiv__", [](librapid::mpq & this_, double other) { this_ /= other; return this_; }, py::arg("other"))
	.def("__idiv__", [](librapid::mpq & this_, const librapid::mpz & other) { this_ /= other; return this_; }, py::arg("other"))
	.def("__idiv__", [](librapid::mpq & this_, const librapid::mpf & other) { this_ /= other; return this_; }, py::arg("other"))
	.def("__idiv__", [](librapid::mpq & this_, const librapid::mpq & other) { this_ /= other; return this_; }, py::arg("other"))
	.def("__lshift__", [](const librapid::mpq & this_, int64_t other) { return librapid::mpq(this_ << other); }, py::arg("other"))
	.def("__rshift__", [](const librapid::mpq & this_, int64_t other) { return librapid::mpq(this_ >> other); }, py::arg("other"))
	.def("__ilshift__", [](librapid::mpq & this_, int64_t other) { this_ <<= other; return this_; }, py::arg("other"))
	.def("__irshift__", [](librapid::mpq & this_, int64_t other) { this_ >>= other; return this_; }, py::arg("other"))
	.def("str", [](const librapid::mpq & this_, int64_t base) { return lrc::str(this_, {-1, base, false}); }, py::arg("base") = int64_t(10))
	.def("__str__", [](const librapid::mpq & this_) { return lrc::str(this_, {-1, 10, false}); })
	.def("__repr__", [](const librapid::mpq & this_) { return "librapid::mpq(\"" + lrc::str(this_, {-1, 10, false}) + "\")"; });

