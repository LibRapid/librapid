name: Wheels (master)

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    - cron: "0 12 1-31 * *"
  workflow_dispatch:

jobs:
  sdist:
    name: Source Distribution
    runs-on: ubuntu-latest

    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ref: ${{ steps.extract_branch.outputs.branch }}
      
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@latest

      - name: Install Requirements
        run: |
          pip install --user check-manifest twine==3.4.1
          pip install --user check-manifest pybind11==2.6.2
          pip install --user check-manifest cpufeature==0.2.0
          pip install --user check-manifest -r requirements.txt

      - name: Clone OpenBLAS
        run: |
          git clone https://github.com/xianyi/OpenBLAS.git

          cd OpenBLAS
          git reset --hard d909f9f3d4fc4ccff36d69f178558df154ba1002
        shell: bash

      - name: Build OpenBLAS
        run: |
          cd OpenBLAS
          make NUM_THREADS=128 DYNAMIC_ARCH=ON DYNAMIC_LIST='CORE2;NEHALEM;SANDYBRIDGE;BULLDOZER;HASWELL'
          
      - name: Install OpenBLAS
        run: |
          cd OpenBLAS
          make install PREFIX=../src/librapid/openblas_install

      - name: Build Source Distribution
        run: |
          python -m build --sdist --outdir wheelhouse
      
      - name: Install from Source Distribution
        run: |
          pip install --user wheelhouse/*.tar.gz -vvvv

      - name: Run Python Tests
        run: |
          python -m pytest unit_tests

      - name: Check Source Distribution
        run: |
          python -m twine check wheelhouse/*

      - name: Upload Source Distribution
        run: |
          python setup.py sdist
          ls dist
          twine upload --skip-existing dist/* -u ${{ secrets.PYPI_USER }} -p ${{ secrets.PYPI_PASSWORD }}

  unix_build:
    name: Python Wheels | Running on ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest]
        targetplatform: [x64]
    env:
      CIBW_BUILD: "cp36-* cp37-* cp38-* cp39-*"
      CIBW_SKIP: "*-win32 *-manylinux_i686"
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
      CIBW_MANYLINUX_PYPY_X86_64_IMAGE: manylinux2014

    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ref: ${{ steps.extract_branch.outputs.branch }}

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@latest

      - name: Install Requirements
        run: |
          python -m pip install -r requirements.txt

      - name: Clone OpenBLAS
        run: |
          git clone https://github.com/xianyi/OpenBLAS.git

          cd OpenBLAS
          git reset --hard d909f9f3d4fc4ccff36d69f178558df154ba1002
        shell: bash

      - name: Build OpenBLAS
        run: |
          cd OpenBLAS
          make NUM_THREADS=128 DYNAMIC_ARCH=ON DYNAMIC_LIST='CORE2;NEHALEM;SANDYBRIDGE;BULLDOZER;HASWELL'

      - name: Install OpenBLAS
        run: |
          cd OpenBLAS
          make install PREFIX=../src/librapid/openblas_install

      - name: Archive OpenBLAS Build
        uses: actions/upload-artifact@v2
        with:
          name: OpenBLAS on ${{ matrix.platform }}
          path: src/librapid/openblas_install

      - name: Run cibuildwheel
        run: |
          cibuildwheel --output-dir wheelhouse

      - name: Install Library
        run: |
          python -m pip install . -vvvv

      - name: Show all files in librapid install
        run: |
          python -m pip show -f librapid

      # - name: Run Python Tests
      #   run: |
      #     pytest unit_tests

      - name: Check Built Wheels
        run: |
          twine check wheelhouse/*

      - name: Upload Built Wheels
        run: |
          python setup.py sdist
          ls wheelhouse
          twine upload --skip-existing wheelhouse/* -u ${{ secrets.PYPI_USER }} -p ${{ secrets.PYPI_PASSWORD }}
      
      - name: Archive LibRapid Wheels
        uses: actions/upload-artifact@v2
        with:
          name: LibRapid Wheels on ${{ matrix.platform }}
          path: wheelhouse

  windows_build:
    name: Python Wheels | Running on windows-latest
    runs-on: windows-latest

    env:
      CIBW_BUILD: "cp36-* cp37-* cp38-* cp39-*"
      CIBW_SKIP: "*-win32"

    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ref: ${{ steps.extract_branch.outputs.branch }}

      - name: Setup WSL
        uses: Vampire/setup-wsl@v1.1.0

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2.1.1
      
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Setup Visual Studio shell
        uses: egor-tensin/vs-shell@v2

      - name: Install Requirements
        run: |
          python -m pip install -r requirements.txt

      - name: Install Conda things
        run: |
          conda config --add channels conda-forge --force
          conda config --set auto_update_conda false
          conda install --yes --quiet clangdev cmake ninja flang=11.0.1

      - name: Clone OpenBLAS
        run: |
          git clone https://github.com/xianyi/OpenBLAS.git

          cd OpenBLAS
          git reset --hard d909f9f3d4fc4ccff36d69f178558df154ba1002
        shell: bash

      - name: Configure CMake
        run: |
          cd OpenBLAS

          set "LIB=%CONDA_PREFIX%\Library\lib;%LIB%"
          set "CPATH=%CONDA_PREFIX%\Library\include;%CPATH%"
          mkdir build
          cd build
          
          cmake .. -G "Ninja" -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_C_COMPILER=clang-cl -DCMAKE_Fortran_COMPILER=flang -DCMAKE_MT=mt -DBUILD_SHARED_LIBS=ON -DBUILD_WITHOUT_LAPACK=no -DNOFORTRAN=0 -DNUM_THREADS=128 -DDYNAMIC_ARCH=ON -DDYNAMIC_LIST='CORE2;NEHALEM;SANDYBRIDGE;BULLDOZER;HASWELL' -DCMAKE_BUILD_TYPE=Release
        shell: pwsh

      - name: Build OpenBLAS
        run: |
          cd OpenBLAS
          cd build
          cmake --build . --config Release
        shell: pwsh

      - name: Install OpenBLAS
        run: |
          cd OpenBLAS
          cd build
          cmake --install . --prefix ../../src/librapid/openblas_install

      - name: List Root Directories and files
        run: |
          dir
          dir src
          dir src/librapid
          dir src/librapid/openblas_install
          dir src/librapid/openblas_install/bin

      - name: Archive OpenBLAS Build
        uses: actions/upload-artifact@v2
        with:
          name: OpenBLAS on windows-latest
          path: src/librapid/openblas_install

      - name: Run cibuildwheel
        run: |
          cibuildwheel --output-dir wheelhouse

      - name: Archive LibRapid Wheels
        uses: actions/upload-artifact@v2
        with:
          name: LibRapid Wheels on windows-latest
          path: wheelhouse

      - name: Install win32api
        run: |
          python -m pip install pypiwin32

      - name: Install Library
        run: |
          python -m pip install . -vvvv

      - name: Show all files in librapid install
        run: |
          python -m pip show -f librapid

      # - name: Run Python Tests
      #   run: |
      #     pytest unit_tests

      - name: Check Built Wheels
        run: |
          twine check wheelhouse/*

      - name: Upload Built Wheels
        run: |
          python setup.py sdist
          ls wheelhouse
          twine upload --skip-existing wheelhouse/* -u ${{ secrets.PYPI_USER }} -p ${{ secrets.PYPI_PASSWORD }}
