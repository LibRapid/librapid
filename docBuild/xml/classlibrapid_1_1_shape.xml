<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classlibrapid_1_1_shape" kind="class" language="C++" prot="public">
    <compoundname>librapid::Shape</compoundname>
    <includes refid="sizetype_8hpp" local="no">sizetype.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
        <defval>size_t</defval>
      </param>
      <param>
        <type>size_t</type>
        <declname>N</declname>
        <defname>N</defname>
        <defval>32</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classlibrapid_1_1_shape_1a6778051d7d75730417c85a945337af14" prot="public" static="no">
        <type>T</type>
        <definition>using librapid::Shape&lt; T, N &gt;::SizeType =  T</definition>
        <argsstring></argsstring>
        <name>SizeType</name>
        <qualifiedname>librapid::Shape::SizeType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="13" column="1" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classlibrapid_1_1_shape_1abed6e0d3861a5258c0c78cf7ea22eb72" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t librapid::Shape&lt; T, N &gt;::MaxDimensions</definition>
        <argsstring></argsstring>
        <name>MaxDimensions</name>
        <qualifiedname>librapid::Shape::MaxDimensions</qualifiedname>
        <initializer>= N</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="14" column="25" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlibrapid_1_1_shape_1ac29a39ec3113acefef839c1579c05603" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T librapid::Shape&lt; T, N &gt;::m_dims</definition>
        <argsstring></argsstring>
        <name>m_dims</name>
        <qualifiedname>librapid::Shape::m_dims</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="120" column="3" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlibrapid_1_1_shape_1a3de2ef5c2e3399ede89feaa7a4f9a6c6" prot="private" static="no" mutable="no">
        <type>std::array&lt; T, N &gt;</type>
        <definition>std::array&lt;T, N&gt; librapid::Shape&lt; T, N &gt;::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <qualifiedname>librapid::Shape::m_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="121" column="12" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlibrapid_1_1_shape_1a17f66d1a98e86b13d765b2f48f23c4c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>librapid::Shape&lt; T, N &gt;::Shape</definition>
        <argsstring>()=default</argsstring>
        <name>Shape</name>
        <qualifiedname>librapid::Shape::Shape</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="17" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1a62319e87033fd3989e54588bf2356cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename <ref refid="namespacelibrapid_1_1typetraits_1ab40d2f867f8f2c70d62af985f0c002d9" kindref="member">typetraits::EnableIf</ref>&lt; <ref refid="structlibrapid_1_1typetraits_1_1_can_cast" kindref="compound">typetraits::CanCast</ref>&lt; V, T &gt;::value &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>librapid::Shape&lt; T, N &gt;::Shape</definition>
        <argsstring>(const std::initializer_list&lt; V &gt; &amp;vals)</argsstring>
        <name>Shape</name>
        <qualifiedname>librapid::Shape::Shape</qualifiedname>
        <param>
          <type>const std::initializer_list&lt; V &gt; &amp;</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object from a list of values <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type of the values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vals</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions for the object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="23" column="1" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="126" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1aceac931d256c40598e2de23aa976ba36" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename <ref refid="namespacelibrapid_1_1typetraits_1ab40d2f867f8f2c70d62af985f0c002d9" kindref="member">typetraits::EnableIf</ref>&lt; <ref refid="structlibrapid_1_1typetraits_1_1_can_cast" kindref="compound">typetraits::CanCast</ref>&lt; V, T &gt;::value &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>librapid::Shape&lt; T, N &gt;::Shape</definition>
        <argsstring>(const std::vector&lt; V &gt; &amp;vals)</argsstring>
        <name>Shape</name>
        <qualifiedname>librapid::Shape::Shape</qualifiedname>
        <param>
          <type>const std::vector&lt; V &gt; &amp;</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object from a vector of values <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type of the values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vals</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions for the object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="29" column="10" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="136" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1a795789743e7fdf35c3d2e40a9d57a387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>librapid::Shape&lt; T, N &gt;::Shape</definition>
        <argsstring>(const Shape &amp;other)=default</argsstring>
        <name>Shape</name>
        <qualifiedname>librapid::Shape::Shape</qualifiedname>
        <param>
          <type>const <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a copy of a <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1a6b5f814b0da20d3e39ab7da4ed5f3d39" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>librapid::Shape&lt; T, N &gt;::Shape</definition>
        <argsstring>(Shape &amp;&amp;other) noexcept=default</argsstring>
        <name>Shape</name>
        <qualifiedname>librapid::Shape::Shape</qualifiedname>
        <param>
          <type><ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> from an RValue <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Temporary <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1a9e59b3e603930f8c27acc8b3dd41b489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>Dim</declname>
            <defname>Dim</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>librapid::Shape&lt; T, N &gt;::Shape</definition>
        <argsstring>(const Shape&lt; V, Dim &gt; &amp;other)</argsstring>
        <name>Shape</name>
        <qualifiedname>librapid::Shape::Shape</qualifiedname>
        <param>
          <type>const <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref>&lt; V, Dim &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object from one with a different type and number of dimensions. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type of the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="44" column="1" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="146" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1a37740810da08c607414ac8df75e9468a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>Dim</declname>
            <defname>Dim</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>librapid::Shape&lt; T, N &gt;::Shape</definition>
        <argsstring>(Shape&lt; V, Dim &gt; &amp;&amp;other) noexcept</argsstring>
        <name>Shape</name>
        <qualifiedname>librapid::Shape::Shape</qualifiedname>
        <param>
          <type><ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref>&lt; V, Dim &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object from one with a different type and number of dimensions, moving it instead of copying it. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type of the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Temporary <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object to move </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="52" column="1" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="156" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1a132608c1705432153d0f5275c6275567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename <ref refid="namespacelibrapid_1_1typetraits_1ab40d2f867f8f2c70d62af985f0c002d9" kindref="member">typetraits::EnableIf</ref>&lt; <ref refid="structlibrapid_1_1typetraits_1_1_can_cast" kindref="compound">typetraits::CanCast</ref>&lt; V, T &gt;::value &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
        <definition>Shape &amp; librapid::Shape&lt; T, N &gt;::operator=</definition>
        <argsstring>(const std::initializer_list&lt; V &gt; &amp;vals)</argsstring>
        <name>operator=</name>
        <qualifiedname>librapid::Shape::operator=</qualifiedname>
        <param>
          <type>const std::initializer_list&lt; V &gt; &amp;</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assign a <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object to this object <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type of the <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vals</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensions of the <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>*this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="59" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1aeeba65680903f473abb6ea4b0720539b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename <ref refid="namespacelibrapid_1_1typetraits_1ab40d2f867f8f2c70d62af985f0c002d9" kindref="member">typetraits::EnableIf</ref>&lt; <ref refid="structlibrapid_1_1typetraits_1_1_can_cast" kindref="compound">typetraits::CanCast</ref>&lt; V, T &gt;::value &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
        <definition>Shape &amp; librapid::Shape&lt; T, N &gt;::operator=</definition>
        <argsstring>(const std::vector&lt; V &gt; &amp;vals)</argsstring>
        <name>operator=</name>
        <qualifiedname>librapid::Shape::operator=</qualifiedname>
        <param>
          <type>const std::vector&lt; V &gt; &amp;</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assign a <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object to this object <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type of the <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vals</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensions of the <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>*this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="66" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1aaf9205371c0b2dc0e12ffd52add08c86" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
        <definition>Shape &amp; librapid::Shape&lt; T, N &gt;::operator=</definition>
        <argsstring>(Shape &amp;&amp;other) noexcept=default</argsstring>
        <name>operator=</name>
        <qualifiedname>librapid::Shape::operator=</qualifiedname>
        <param>
          <type><ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assign an RValue <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> to this object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>RValue to move </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="71" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1a2fead305af4ab538bcde7e83dd522ddc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Index</type>
          </param>
        </templateparamlist>
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> const T &amp;</type>
        <definition>LIBRAPID_NODISCARD LIBRAPID_ALWAYS_INLINE const T &amp; librapid::Shape&lt; T, N &gt;::operator[]</definition>
        <argsstring>(Index index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>librapid::Shape::operator[]</qualifiedname>
        <param>
          <type>Index</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access an element of the <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>Typename of the index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value at the index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="88" column="51" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="206" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1a10aa7713d0c7f914cc23ceeb703392d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Index</type>
          </param>
        </templateparamlist>
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> T &amp;</type>
        <definition>LIBRAPID_NODISCARD LIBRAPID_ALWAYS_INLINE T &amp; librapid::Shape&lt; T, N &gt;::operator[]</definition>
        <argsstring>(Index index)</argsstring>
        <name>operator[]</name>
        <qualifiedname>librapid::Shape::operator[]</qualifiedname>
        <param>
          <type>Index</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access an element of the <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>Typename of the index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the value at the index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="95" column="45" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="212" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1a6c0dd7521d282b8b3679f3badbe535da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> bool</type>
        <definition>LIBRAPID_ALWAYS_INLINE bool librapid::Shape&lt; T, N &gt;::operator==</definition>
        <argsstring>(const Shape &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>librapid::Shape::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> objects, returning true if and only if they are identical <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the objects are identical </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="100" column="29" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="217" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1ae4856ffa1441d77aaf2e6e10d485a762" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> bool</type>
        <definition>LIBRAPID_ALWAYS_INLINE bool librapid::Shape&lt; T, N &gt;::operator!=</definition>
        <argsstring>(const Shape &amp;other) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>librapid::Shape::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> objects, returning true if and only if they are not identical <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the objects are not identical </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="105" column="29" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="226" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1ab5d977f7d716aaeb122ec2b0fe681b4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> T</type>
        <definition>LIBRAPID_NODISCARD T librapid::Shape&lt; T, N &gt;::ndim</definition>
        <argsstring>() const</argsstring>
        <name>ndim</name>
        <qualifiedname>librapid::Shape::ndim</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of dimensions in the <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object <simplesect kind="return"><para>Number of dimensions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="109" column="22" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="231" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1a8de69ce9f6e9d4625b99a82f652301a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> T</type>
        <definition>LIBRAPID_NODISCARD LIBRAPID_ALWAYS_INLINE T librapid::Shape&lt; T, N &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>librapid::Shape::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of elements the <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object represents <simplesect kind="return"><para>Number of elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="113" column="45" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="236" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1a17feb24542bb561a8a53711b68f8e0c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> std::string</type>
        <definition>std::string librapid::Shape&lt; T, N &gt;::str</definition>
        <argsstring>() const</argsstring>
        <name>str</name>
        <qualifiedname>librapid::Shape::str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object into a string representation <simplesect kind="return"><para>A string representation of the <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="117" column="32" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="243" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1a0266f42361b7c13ff6cae58184bf669e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename <ref refid="namespacelibrapid_1_1typetraits_1ab40d2f867f8f2c70d62af985f0c002d9" kindref="member">typetraits::EnableIf</ref>&lt; <ref refid="structlibrapid_1_1typetraits_1_1_can_cast" kindref="compound">typetraits::CanCast</ref>&lt; V, T &gt;::value &gt;</type>
          </param>
        </templateparamlist>
        <type><ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref>&lt; T, N &gt; &amp;</type>
        <definition>Shape&lt; T, N &gt; &amp; librapid::Shape&lt; T, N &gt;::operator=</definition>
        <argsstring>(const std::initializer_list&lt; V &gt; &amp;vals)</argsstring>
        <name>operator=</name>
        <qualifiedname>librapid::Shape::operator=</qualifiedname>
        <param>
          <type>const std::initializer_list&lt; V &gt; &amp;</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="166" column="13" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="166" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1aa6ee48720d8ef2077fc75306581e1af0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename <ref refid="namespacelibrapid_1_1typetraits_1ab40d2f867f8f2c70d62af985f0c002d9" kindref="member">typetraits::EnableIf</ref>&lt; <ref refid="structlibrapid_1_1typetraits_1_1_can_cast" kindref="compound">typetraits::CanCast</ref>&lt; V, T &gt;::value &gt;</type>
          </param>
        </templateparamlist>
        <type><ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref>&lt; T, N &gt; &amp;</type>
        <definition>Shape&lt; T, N &gt; &amp; librapid::Shape&lt; T, N &gt;::operator=</definition>
        <argsstring>(const std::vector&lt; V &gt; &amp;vals)</argsstring>
        <name>operator=</name>
        <qualifiedname>librapid::Shape::operator=</qualifiedname>
        <param>
          <type>const std::vector&lt; V &gt; &amp;</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="178" column="13" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="178" bodyend="186"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classlibrapid_1_1_shape_1a407b80d75b21d23c9f4a8b7f69adfd93" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref></type>
        <definition>Shape&lt; T, N &gt; librapid::Shape&lt; T, N &gt;::zeros</definition>
        <argsstring>(size_t dims)</argsstring>
        <name>zeros</name>
        <qualifiedname>librapid::Shape::zeros</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object with <computeroutput>dims</computeroutput> dimensions, all initialized to zero. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dims</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="76" column="14" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="189" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_shape_1a556872fe85e1b79a7472652449de4c24" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref></type>
        <definition>Shape&lt; T, N &gt; librapid::Shape&lt; T, N &gt;::ones</definition>
        <argsstring>(size_t dims)</argsstring>
        <name>ones</name>
        <qualifiedname>librapid::Shape::ones</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object with <computeroutput>dims</computeroutput> dimensions, all initialized to one. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dims</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref> object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="81" column="14" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="197" bodyend="202"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="librapid/include/librapid/array/sizetype.hpp" line="11" column="1" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="11" bodyend="122"/>
    <listofallmembers>
      <member refid="classlibrapid_1_1_shape_1a3de2ef5c2e3399ede89feaa7a4f9a6c6" prot="private" virt="non-virtual"><scope>librapid::Shape</scope><name>m_data</name></member>
      <member refid="classlibrapid_1_1_shape_1ac29a39ec3113acefef839c1579c05603" prot="private" virt="non-virtual"><scope>librapid::Shape</scope><name>m_dims</name></member>
      <member refid="classlibrapid_1_1_shape_1abed6e0d3861a5258c0c78cf7ea22eb72" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>MaxDimensions</name></member>
      <member refid="classlibrapid_1_1_shape_1ab5d977f7d716aaeb122ec2b0fe681b4d" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>ndim</name></member>
      <member refid="classlibrapid_1_1_shape_1a556872fe85e1b79a7472652449de4c24" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>ones</name></member>
      <member refid="classlibrapid_1_1_shape_1ae4856ffa1441d77aaf2e6e10d485a762" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>operator!=</name></member>
      <member refid="classlibrapid_1_1_shape_1a132608c1705432153d0f5275c6275567" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>operator=</name></member>
      <member refid="classlibrapid_1_1_shape_1aeeba65680903f473abb6ea4b0720539b" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>operator=</name></member>
      <member refid="classlibrapid_1_1_shape_1aaf9205371c0b2dc0e12ffd52add08c86" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>operator=</name></member>
      <member refid="classlibrapid_1_1_shape_1a0266f42361b7c13ff6cae58184bf669e" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>operator=</name></member>
      <member refid="classlibrapid_1_1_shape_1aa6ee48720d8ef2077fc75306581e1af0" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>operator=</name></member>
      <member refid="classlibrapid_1_1_shape_1a6c0dd7521d282b8b3679f3badbe535da" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>operator==</name></member>
      <member refid="classlibrapid_1_1_shape_1a2fead305af4ab538bcde7e83dd522ddc" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>operator[]</name></member>
      <member refid="classlibrapid_1_1_shape_1a10aa7713d0c7f914cc23ceeb703392d3" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>operator[]</name></member>
      <member refid="classlibrapid_1_1_shape_1a17f66d1a98e86b13d765b2f48f23c4c5" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>Shape</name></member>
      <member refid="classlibrapid_1_1_shape_1a62319e87033fd3989e54588bf2356cfc" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>Shape</name></member>
      <member refid="classlibrapid_1_1_shape_1aceac931d256c40598e2de23aa976ba36" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>Shape</name></member>
      <member refid="classlibrapid_1_1_shape_1a795789743e7fdf35c3d2e40a9d57a387" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>Shape</name></member>
      <member refid="classlibrapid_1_1_shape_1a6b5f814b0da20d3e39ab7da4ed5f3d39" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>Shape</name></member>
      <member refid="classlibrapid_1_1_shape_1a9e59b3e603930f8c27acc8b3dd41b489" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>Shape</name></member>
      <member refid="classlibrapid_1_1_shape_1a37740810da08c607414ac8df75e9468a" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>Shape</name></member>
      <member refid="classlibrapid_1_1_shape_1a8de69ce9f6e9d4625b99a82f652301a8" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>size</name></member>
      <member refid="classlibrapid_1_1_shape_1a6778051d7d75730417c85a945337af14" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>SizeType</name></member>
      <member refid="classlibrapid_1_1_shape_1a17feb24542bb561a8a53711b68f8e0c1" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>str</name></member>
      <member refid="classlibrapid_1_1_shape_1a407b80d75b21d23c9f4a8b7f69adfd93" prot="public" virt="non-virtual"><scope>librapid::Shape</scope><name>zeros</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
