<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structlibrapid_1_1typetraits_1_1_type_info" kind="struct" language="C++" prot="public">
    <compoundname>librapid::typetraits::TypeInfo</compoundname>
    <includes refid="traits_8hpp" local="no">traits.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structlibrapid_1_1typetraits_1_1_type_info_1a3cd5cd03b89fb1c44c7f67da4345844f" prot="public" static="no">
        <type>T</type>
        <definition>using librapid::typetraits::TypeInfo&lt; T &gt;::Scalar =  T</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <qualifiedname>librapid::typetraits::TypeInfo::Scalar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="75" column="1" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlibrapid_1_1typetraits_1_1_type_info_1a8d2a41c467170d21c7fe10f8eff48efa" prot="public" static="no">
        <type>std::false_type</type>
        <definition>using librapid::typetraits::TypeInfo&lt; T &gt;::Packet =  std::false_type</definition>
        <argsstring></argsstring>
        <name>Packet</name>
        <qualifiedname>librapid::typetraits::TypeInfo::Packet</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="76" column="1" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structlibrapid_1_1typetraits_1_1_type_info_1a93c780cb9fe609cc8d60600ade8be78e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool librapid::typetraits::TypeInfo&lt; T &gt;::isLibRapidType</definition>
        <argsstring></argsstring>
        <name>isLibRapidType</name>
        <qualifiedname>librapid::typetraits::TypeInfo::isLibRapidType</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="74" column="23" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibrapid_1_1typetraits_1_1_type_info_1a429f66a5e32b443be142d1cb40aeaf85" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t librapid::typetraits::TypeInfo&lt; T &gt;::packetWidth</definition>
        <argsstring></argsstring>
        <name>packetWidth</name>
        <qualifiedname>librapid::typetraits::TypeInfo::packetWidth</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="77" column="26" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibrapid_1_1typetraits_1_1_type_info_1a984c5984353747c8c2028c3e9704c160" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char librapid::typetraits::TypeInfo&lt; T &gt;::name[]</definition>
        <argsstring>[]</argsstring>
        <name>name</name>
        <qualifiedname>librapid::typetraits::TypeInfo::name</qualifiedname>
        <initializer>= &quot;[NO DEFINED TYPE]&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="78" column="23" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibrapid_1_1typetraits_1_1_type_info_1a89e7b8c75f13125a03933e69c080bcb1" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool librapid::typetraits::TypeInfo&lt; T &gt;::supportsArithmetic</definition>
        <argsstring></argsstring>
        <name>supportsArithmetic</name>
        <qualifiedname>librapid::typetraits::TypeInfo::supportsArithmetic</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="79" column="23" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibrapid_1_1typetraits_1_1_type_info_1a97330ae96c648abfa696245de2530bd9" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool librapid::typetraits::TypeInfo&lt; T &gt;::supportsLogical</definition>
        <argsstring></argsstring>
        <name>supportsLogical</name>
        <qualifiedname>librapid::typetraits::TypeInfo::supportsLogical</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="80" column="23" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibrapid_1_1typetraits_1_1_type_info_1adda9fc0b73c1c1faa4d0758f022857be" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool librapid::typetraits::TypeInfo&lt; T &gt;::supportsBinary</definition>
        <argsstring></argsstring>
        <name>supportsBinary</name>
        <qualifiedname>librapid::typetraits::TypeInfo::supportsBinary</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="81" column="23" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibrapid_1_1typetraits_1_1_type_info_1a650a73217e513bed81dc28b95e96bdb7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool librapid::typetraits::TypeInfo&lt; T &gt;::canAlign</definition>
        <argsstring></argsstring>
        <name>canAlign</name>
        <qualifiedname>librapid::typetraits::TypeInfo::canAlign</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="86" column="23" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibrapid_1_1typetraits_1_1_type_info_1a35c64be8dd09d991bdc7e8406ed39235" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool librapid::typetraits::TypeInfo&lt; T &gt;::canMemcpy</definition>
        <argsstring></argsstring>
        <name>canMemcpy</name>
        <qualifiedname>librapid::typetraits::TypeInfo::canMemcpy</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="87" column="23" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Provides compile-time information about a data type, allowing for easier function switching and compile-time evaluation <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to get information about </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="librapid/include/librapid/core/traits.hpp" line="73" column="1" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="73" bodyend="88"/>
    <listofallmembers>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_1a650a73217e513bed81dc28b95e96bdb7" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo</scope><name>canAlign</name></member>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_1a35c64be8dd09d991bdc7e8406ed39235" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo</scope><name>canMemcpy</name></member>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_1a93c780cb9fe609cc8d60600ade8be78e" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo</scope><name>isLibRapidType</name></member>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_1a984c5984353747c8c2028c3e9704c160" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo</scope><name>name</name></member>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_1a8d2a41c467170d21c7fe10f8eff48efa" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo</scope><name>Packet</name></member>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_1a429f66a5e32b443be142d1cb40aeaf85" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo</scope><name>packetWidth</name></member>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_1a3cd5cd03b89fb1c44c7f67da4345844f" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo</scope><name>Scalar</name></member>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_1a89e7b8c75f13125a03933e69c080bcb1" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo</scope><name>supportsArithmetic</name></member>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_1adda9fc0b73c1c1faa4d0758f022857be" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo</scope><name>supportsBinary</name></member>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_1a97330ae96c648abfa696245de2530bd9" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo</scope><name>supportsLogical</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
