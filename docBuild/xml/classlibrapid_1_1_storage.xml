<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classlibrapid_1_1_storage" kind="class" language="C++" prot="public">
    <compoundname>librapid::Storage</compoundname>
    <includes refid="storage_8hpp" local="no">storage.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Scalar_</type>
      </param>
      <param>
        <type>typename Allocator_</type>
        <defval>std::allocator&lt;Scalar_&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" prot="public" static="no">
        <type>Allocator_</type>
        <definition>using librapid::Storage&lt; Scalar_, Allocator_ &gt;::Allocator =  Allocator_</definition>
        <argsstring></argsstring>
        <name>Allocator</name>
        <qualifiedname>librapid::Storage::Allocator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="21" column="1" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlibrapid_1_1_storage_1a9d5007a5ffa2a949fad13b40d854fb05" prot="public" static="no">
        <type>Scalar_</type>
        <definition>using librapid::Storage&lt; Scalar_, Allocator_ &gt;::Scalar =  Scalar_</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <qualifiedname>librapid::Storage::Scalar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="22" column="1" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlibrapid_1_1_storage_1a51802f024ed62b540bdf378451f00345" prot="public" static="no">
        <type>typename std::allocator_traits&lt; <ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref> &gt;::pointer</type>
        <definition>using librapid::Storage&lt; Scalar_, Allocator_ &gt;::Pointer =  typename std::allocator_traits&lt;Allocator&gt;::pointer</definition>
        <argsstring></argsstring>
        <name>Pointer</name>
        <qualifiedname>librapid::Storage::Pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="23" column="1" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlibrapid_1_1_storage_1aed4d97613bb5fbc0e1c2cecabdbccc45" prot="public" static="no">
        <type>typename std::allocator_traits&lt; <ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref> &gt;::const_pointer</type>
        <definition>using librapid::Storage&lt; Scalar_, Allocator_ &gt;::ConstPointer =  typename std::allocator_traits&lt;Allocator&gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>ConstPointer</name>
        <qualifiedname>librapid::Storage::ConstPointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="24" column="1" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlibrapid_1_1_storage_1aaa1c2d774c3b67e2ad1fbb48c3779fe3" prot="public" static="no">
        <type><ref refid="classlibrapid_1_1_storage_1a9d5007a5ffa2a949fad13b40d854fb05" kindref="member">Scalar</ref> &amp;</type>
        <definition>using librapid::Storage&lt; Scalar_, Allocator_ &gt;::Reference =  Scalar &amp;</definition>
        <argsstring></argsstring>
        <name>Reference</name>
        <qualifiedname>librapid::Storage::Reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="25" column="1" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlibrapid_1_1_storage_1aa0592fffa9c2941a0ad0271b6ef32dba" prot="public" static="no">
        <type>const <ref refid="classlibrapid_1_1_storage_1a9d5007a5ffa2a949fad13b40d854fb05" kindref="member">Scalar</ref> &amp;</type>
        <definition>using librapid::Storage&lt; Scalar_, Allocator_ &gt;::ConstReference =  const Scalar &amp;</definition>
        <argsstring></argsstring>
        <name>ConstReference</name>
        <qualifiedname>librapid::Storage::ConstReference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="26" column="1" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" prot="public" static="no">
        <type>typename std::allocator_traits&lt; <ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref> &gt;::size_type</type>
        <definition>using librapid::Storage&lt; Scalar_, Allocator_ &gt;::SizeType =  typename std::allocator_traits&lt;Allocator&gt;::size_type</definition>
        <argsstring></argsstring>
        <name>SizeType</name>
        <qualifiedname>librapid::Storage::SizeType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="27" column="1" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlibrapid_1_1_storage_1afa2af71066e7b96ca42b07c3c8c18c3a" prot="public" static="no">
        <type>typename std::allocator_traits&lt; <ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref> &gt;::difference_type</type>
        <definition>using librapid::Storage&lt; Scalar_, Allocator_ &gt;::DifferenceType =  typename std::allocator_traits&lt;Allocator&gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>DifferenceType</name>
        <qualifiedname>librapid::Storage::DifferenceType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="28" column="1" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlibrapid_1_1_storage_1ae2054f1605894dd4397dc92ea3bc32d5" prot="public" static="no">
        <type><ref refid="classlibrapid_1_1_storage_1a51802f024ed62b540bdf378451f00345" kindref="member">Pointer</ref></type>
        <definition>using librapid::Storage&lt; Scalar_, Allocator_ &gt;::Iterator =  Pointer</definition>
        <argsstring></argsstring>
        <name>Iterator</name>
        <qualifiedname>librapid::Storage::Iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="29" column="1" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlibrapid_1_1_storage_1aedd5efa91d2b0312ba095a046d4dba08" prot="public" static="no">
        <type><ref refid="classlibrapid_1_1_storage_1aed4d97613bb5fbc0e1c2cecabdbccc45" kindref="member">ConstPointer</ref></type>
        <definition>using librapid::Storage&lt; Scalar_, Allocator_ &gt;::ConstIterator =  ConstPointer</definition>
        <argsstring></argsstring>
        <name>ConstIterator</name>
        <qualifiedname>librapid::Storage::ConstIterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="30" column="1" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlibrapid_1_1_storage_1af637e0f4c6a7f298436e9a7aeeac8bf1" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classlibrapid_1_1_storage_1ae2054f1605894dd4397dc92ea3bc32d5" kindref="member">Iterator</ref> &gt;</type>
        <definition>using librapid::Storage&lt; Scalar_, Allocator_ &gt;::ReverseIterator =  std::reverse_iterator&lt;Iterator&gt;</definition>
        <argsstring></argsstring>
        <name>ReverseIterator</name>
        <qualifiedname>librapid::Storage::ReverseIterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="31" column="1" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlibrapid_1_1_storage_1a1f7674f95d175f258ab8de4bc3773dab" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classlibrapid_1_1_storage_1aedd5efa91d2b0312ba095a046d4dba08" kindref="member">ConstIterator</ref> &gt;</type>
        <definition>using librapid::Storage&lt; Scalar_, Allocator_ &gt;::ConstReverseIterator =  std::reverse_iterator&lt;ConstIterator&gt;</definition>
        <argsstring></argsstring>
        <name>ConstReverseIterator</name>
        <qualifiedname>librapid::Storage::ConstReverseIterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="32" column="1" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlibrapid_1_1_storage_1a9577b6fb6ec67543dde646af00cdbd65" prot="private" static="no" mutable="no">
        <type><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref></type>
        <definition>Allocator librapid::Storage&lt; Scalar_, Allocator_ &gt;::m_allocator</definition>
        <argsstring></argsstring>
        <name>m_allocator</name>
        <qualifiedname>librapid::Storage::m_allocator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="142" column="11" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlibrapid_1_1_storage_1aa0f73fc705805e7f1dffcd84e92ed64e" prot="private" static="no" mutable="no">
        <type><ref refid="classlibrapid_1_1_storage_1a51802f024ed62b540bdf378451f00345" kindref="member">Pointer</ref></type>
        <definition>Pointer librapid::Storage&lt; Scalar_, Allocator_ &gt;::m_begin</definition>
        <argsstring></argsstring>
        <name>m_begin</name>
        <qualifiedname>librapid::Storage::m_begin</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="143" column="9" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlibrapid_1_1_storage_1a0b3782373c8380da31ea84e5c808bc93" prot="private" static="no" mutable="no">
        <type><ref refid="classlibrapid_1_1_storage_1a51802f024ed62b540bdf378451f00345" kindref="member">Pointer</ref></type>
        <definition>Pointer librapid::Storage&lt; Scalar_, Allocator_ &gt;::m_end</definition>
        <argsstring></argsstring>
        <name>m_end</name>
        <qualifiedname>librapid::Storage::m_end</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="144" column="9" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlibrapid_1_1_storage_1a2236763dda1d80beda26bce3bfbad5c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>librapid::Storage&lt; Scalar_, Allocator_ &gt;::Storage</definition>
        <argsstring>()=default</argsstring>
        <name>Storage</name>
        <qualifiedname>librapid::Storage::Storage</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1aa1dbdc875198f9c8a7f0bb5d3ff30c08" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref></type>
        <definition>librapid::Storage&lt; T, A &gt;::Storage</definition>
        <argsstring>(SizeType size, const Allocator &amp;alloc=Allocator())</argsstring>
        <name>Storage</name>
        <qualifiedname>librapid::Storage::Storage</qualifiedname>
        <param>
          <type><ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref> &amp;</type>
          <declname>alloc</declname>
          <defval><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object with <computeroutput>size</computeroutput> elements and, optionally, a custom allocator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to allocate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="41" column="33" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1a04a2785390c8a96fd6240bba73b77836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref></type>
        <definition>librapid::Storage&lt; T, A &gt;::Storage</definition>
        <argsstring>(SizeType size, ConstReference value, const Allocator &amp;alloc=Allocator())</argsstring>
        <name>Storage</name>
        <qualifiedname>librapid::Storage::Storage</qualifiedname>
        <param>
          <type><ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="classlibrapid_1_1_storage_1aa0592fffa9c2941a0ad0271b6ef32dba" kindref="member">ConstReference</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref> &amp;</type>
          <declname>alloc</declname>
          <defval><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object with <computeroutput>size</computeroutput> elements, each initialized to <computeroutput>value</computeroutput>. Optionally, a custom allocator can be used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to allocate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to initialize each element to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="49" column="24" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="190" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1a426199dc669ec91e47acc00e21283915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref></type>
        <definition>librapid::Storage&lt; T, A &gt;::Storage</definition>
        <argsstring>(const Storage &amp;other, const Allocator &amp;alloc=Allocator())</argsstring>
        <name>Storage</name>
        <qualifiedname>librapid::Storage::Storage</qualifiedname>
        <param>
          <type>const <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>const <ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref> &amp;</type>
          <declname>alloc</declname>
          <defval><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object from another <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object. Additionally a custom allocator can be used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object to copy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="56" column="24" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1a9c24f4eeb279febb3a8f41a170ce0cb5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref></type>
        <definition>librapid::Storage&lt; T, A &gt;::Storage</definition>
        <argsstring>(Storage &amp;&amp;other) noexcept</argsstring>
        <name>Storage</name>
        <qualifiedname>librapid::Storage::Storage</qualifiedname>
        <param>
          <type><ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move a <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object into this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object to move </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="60" column="24" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="204" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1ad71195bfc1241bd16be6cbf33b7d84bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref></type>
        <definition>LIBRAPID_ALWAYS_INLINE librapid::Storage&lt; Scalar_, Allocator_ &gt;::Storage</definition>
        <argsstring>(const std::initializer_list&lt; V &gt; &amp;list, const Allocator &amp;alloc=Allocator())</argsstring>
        <name>Storage</name>
        <qualifiedname>librapid::Storage::Storage</qualifiedname>
        <param>
          <type>const std::initializer_list&lt; V &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const <ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref> &amp;</type>
          <declname>alloc</declname>
          <defval><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object from an std::initializer_list <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the initializer list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Initializer list to copy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="67" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1a1be479e553cd8647347127790c61cb2c" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref></type>
        <definition>LIBRAPID_ALWAYS_INLINE librapid::Storage&lt; Scalar_, Allocator_ &gt;::Storage</definition>
        <argsstring>(const std::vector&lt; V &gt; &amp;vec, const Allocator &amp;alloc=Allocator())</argsstring>
        <name>Storage</name>
        <qualifiedname>librapid::Storage::Storage</qualifiedname>
        <param>
          <type>const std::vector&lt; V &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const <ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref> &amp;</type>
          <declname>alloc</declname>
          <defval><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object from a std::vector <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to copy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="75" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1a645549771b97c5a5fc50a425d9ca77d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> &amp;</type>
        <definition>Storage&lt; T, A &gt; &amp; librapid::Storage&lt; T, A &gt;::operator=</definition>
        <argsstring>(const Storage &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>librapid::Storage::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assignment operator for a <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>*this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="81" column="32" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="225" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1ab59bc5d7b4eea3bb9aaa4ded12ee80e9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> &amp;</type>
        <definition>Storage&lt; T, A &gt; &amp; librapid::Storage&lt; T, A &gt;::operator=</definition>
        <argsstring>(Storage &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>librapid::Storage::operator=</qualifiedname>
        <param>
          <type><ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move assignment operator for a <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object to move </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>*this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="86" column="32" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="242" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1a72b91a469fd786401a1346b9baefaf55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>librapid::Storage&lt; T, A &gt;::~Storage</definition>
        <argsstring>()</argsstring>
        <name>~Storage</name>
        <qualifiedname>librapid::Storage::~Storage</qualifiedname>
        <briefdescription>
<para>Free a <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="89" column="1" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="252" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1abe34d150799358f4c44af37da3189332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> void</type>
        <definition>void librapid::Storage&lt; T, A &gt;::resize</definition>
        <argsstring>(SizeType newSize)</argsstring>
        <name>resize</name>
        <qualifiedname>librapid::Storage::resize</qualifiedname>
        <param>
          <type><ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref></type>
          <declname>newSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize a <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object to <computeroutput>size</computeroutput> elements. Existing elements are preserved. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>New size of the <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="94" column="29" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="273" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1ae846419d12d88d87a23f57e8349e8013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> void</type>
        <definition>void librapid::Storage&lt; T, A &gt;::resize</definition>
        <argsstring>(SizeType newSize, int)</argsstring>
        <name>resize</name>
        <qualifiedname>librapid::Storage::resize</qualifiedname>
        <param>
          <type><ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref></type>
          <declname>newSize</declname>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize a <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object to <computeroutput>size</computeroutput> elements. Existing elements are not preserved <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>New size of the <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="99" column="29" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="278" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref></type>
        <definition>auto librapid::Storage&lt; T, A &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <qualifiedname>librapid::Storage::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="101" column="52" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="268" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1a34cdd32ed8b67418b1f5833cdd031d64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1_storage_1aa0592fffa9c2941a0ad0271b6ef32dba" kindref="member">ConstReference</ref></type>
        <definition>LIBRAPID_NODISCARD LIBRAPID_ALWAYS_INLINE ConstReference librapid::Storage&lt; Scalar_, Allocator_ &gt;::operator[]</definition>
        <argsstring>(SizeType index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>librapid::Storage::operator[]</qualifiedname>
        <param>
          <type><ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="103" column="58"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1a526f7807802f8b951855860f06780045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1_storage_1aaa1c2d774c3b67e2ad1fbb48c3779fe3" kindref="member">Reference</ref></type>
        <definition>LIBRAPID_NODISCARD LIBRAPID_ALWAYS_INLINE Reference librapid::Storage&lt; Scalar_, Allocator_ &gt;::operator[]</definition>
        <argsstring>(SizeType index)</argsstring>
        <name>operator[]</name>
        <qualifiedname>librapid::Storage::operator[]</qualifiedname>
        <param>
          <type><ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="104" column="53"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1aef7691919471d207ef78557d9a37f0c2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1_storage_1ae2054f1605894dd4397dc92ea3bc32d5" kindref="member">Iterator</ref></type>
        <definition>auto librapid::Storage&lt; T, A &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>librapid::Storage::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="106" column="52" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="328" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1af3a214fecd3ffa5d294b7b9889e9ef41" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1_storage_1ae2054f1605894dd4397dc92ea3bc32d5" kindref="member">Iterator</ref></type>
        <definition>auto librapid::Storage&lt; T, A &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <qualifiedname>librapid::Storage::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="107" column="52" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="333" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1a8e455e95349f32acf46b942148fd80c1" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1_storage_1aedd5efa91d2b0312ba095a046d4dba08" kindref="member">ConstIterator</ref></type>
        <definition>auto librapid::Storage&lt; T, A &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>librapid::Storage::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="109" column="57" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="338" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1adcfb992de759904c2584d84ed7355bb6" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1_storage_1aedd5efa91d2b0312ba095a046d4dba08" kindref="member">ConstIterator</ref></type>
        <definition>auto librapid::Storage&lt; T, A &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <qualifiedname>librapid::Storage::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="110" column="57" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="343" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1a8e2e56b1796868dd5adca39eccac83a6" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1_storage_1aedd5efa91d2b0312ba095a046d4dba08" kindref="member">ConstIterator</ref></type>
        <definition>auto librapid::Storage&lt; T, A &gt;::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <qualifiedname>librapid::Storage::cbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="112" column="57" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="348" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1ae980fea60c5e884582605a51ca1badbb" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1_storage_1aedd5efa91d2b0312ba095a046d4dba08" kindref="member">ConstIterator</ref></type>
        <definition>auto librapid::Storage&lt; T, A &gt;::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <qualifiedname>librapid::Storage::cend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="113" column="57" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="353" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1af0a1839336cfff8a77745f9a7237a7b7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1_storage_1af637e0f4c6a7f298436e9a7aeeac8bf1" kindref="member">ReverseIterator</ref></type>
        <definition>auto librapid::Storage&lt; T, A &gt;::rbegin</definition>
        <argsstring>() noexcept</argsstring>
        <name>rbegin</name>
        <qualifiedname>librapid::Storage::rbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="115" column="59" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="358" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1aaf2aa5cb83cfd58e10d61ff1c286af51" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1_storage_1af637e0f4c6a7f298436e9a7aeeac8bf1" kindref="member">ReverseIterator</ref></type>
        <definition>auto librapid::Storage&lt; T, A &gt;::rend</definition>
        <argsstring>() noexcept</argsstring>
        <name>rend</name>
        <qualifiedname>librapid::Storage::rend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="116" column="59" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="363" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1a62ea09193d0d0999cef59c0a078ae670" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1_storage_1a1f7674f95d175f258ab8de4bc3773dab" kindref="member">ConstReverseIterator</ref></type>
        <definition>auto librapid::Storage&lt; T, A &gt;::rbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rbegin</name>
        <qualifiedname>librapid::Storage::rbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="118" column="64" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="368" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1a33f9b69a2bd93a5e07de59891fabf084" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1_storage_1a1f7674f95d175f258ab8de4bc3773dab" kindref="member">ConstReverseIterator</ref></type>
        <definition>auto librapid::Storage&lt; T, A &gt;::rend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rend</name>
        <qualifiedname>librapid::Storage::rend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="119" column="64" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="373" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1a205da5497efe3755b06e34d362bcbd1f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1_storage_1a1f7674f95d175f258ab8de4bc3773dab" kindref="member">ConstReverseIterator</ref></type>
        <definition>auto librapid::Storage&lt; T, A &gt;::crbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crbegin</name>
        <qualifiedname>librapid::Storage::crbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="121" column="64" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="378" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1a7ec5320264326a2a8086f6a078e18f47" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1_storage_1a1f7674f95d175f258ab8de4bc3773dab" kindref="member">ConstReverseIterator</ref></type>
        <definition>auto librapid::Storage&lt; T, A &gt;::crend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crend</name>
        <qualifiedname>librapid::Storage::crend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="122" column="64" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="383" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1a018cd63a7e0789ce40e8cb144a49d98b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>librapid::Storage&lt; Scalar_, Allocator_ &gt;::Storage</definition>
        <argsstring>(const std::initializer_list&lt; V &gt; &amp;list, const Allocator &amp;alloc)</argsstring>
        <name>Storage</name>
        <qualifiedname>librapid::Storage::Storage</qualifiedname>
        <param>
          <type>const std::initializer_list&lt; V &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const <ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref> &amp;</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="212" column="9" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1a8bec87e9cb26ae0c06d827fcb932bdfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>librapid::Storage&lt; Scalar_, Allocator_ &gt;::Storage</definition>
        <argsstring>(const std::vector&lt; V &gt; &amp;vector, const Allocator &amp;alloc)</argsstring>
        <name>Storage</name>
        <qualifiedname>librapid::Storage::Storage</qualifiedname>
        <param>
          <type>const std::vector&lt; V &gt; &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const <ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref> &amp;</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="219" column="9" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1af61284cfa7fa3349b55acd94df9d9029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void librapid::Storage&lt; Scalar_, Allocator_ &gt;::initData</definition>
        <argsstring>(P begin, P end)</argsstring>
        <name>initData</name>
        <qualifiedname>librapid::Storage::initData</qualifiedname>
        <param>
          <type>P</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>P</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="260" column="14" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="260" bodyend="265"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classlibrapid_1_1_storage_1ab591b416bc976b4967c517bfc20d425c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> void</type>
        <definition>LIBRAPID_ALWAYS_INLINE void librapid::Storage&lt; Scalar_, Allocator_ &gt;::initData</definition>
        <argsstring>(P begin, P end)</argsstring>
        <name>initData</name>
        <qualifiedname>librapid::Storage::initData</qualifiedname>
        <param>
          <type>P</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>P</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy data from <computeroutput>begin</computeroutput> to <computeroutput>end</computeroutput> into this <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Beginning of data to copy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of data to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="130" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1ab567015cb76707399a957d5fde29b679" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> void</type>
        <definition>LIBRAPID_ALWAYS_INLINE void librapid::Storage&lt; T, A &gt;::resizeImpl</definition>
        <argsstring>(SizeType newSize, int)</argsstring>
        <name>resizeImpl</name>
        <qualifiedname>librapid::Storage::resizeImpl</qualifiedname>
        <param>
          <type><ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref></type>
          <declname>newSize</declname>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize the <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> Object to <computeroutput>newSize</computeroutput> elements, retaining existing data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newSize</parametername>
</parameternamelist>
<parameterdescription>
<para>New size of the <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="135" column="29" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="304" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1_storage_1a1964f9775fc9c02a73cefa66cfb009a9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> void</type>
        <definition>LIBRAPID_ALWAYS_INLINE void librapid::Storage&lt; T, A &gt;::resizeImpl</definition>
        <argsstring>(SizeType newSize)</argsstring>
        <name>resizeImpl</name>
        <qualifiedname>librapid::Storage::resizeImpl</qualifiedname>
        <param>
          <type><ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref></type>
          <declname>newSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize the <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object to <computeroutput>newSize</computeroutput> elements. Note this does not initialize the new elements or maintain existing data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newSize</parametername>
</parameternamelist>
<parameterdescription>
<para>New size of the <ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref> object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="140" column="29" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="283" bodyend="301"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="librapid/include/librapid/array/storage.hpp" line="19" column="1" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="19" bodyend="145"/>
    <listofallmembers>
      <member refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>Allocator</name></member>
      <member refid="classlibrapid_1_1_storage_1aef7691919471d207ef78557d9a37f0c2" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>begin</name></member>
      <member refid="classlibrapid_1_1_storage_1a8e455e95349f32acf46b942148fd80c1" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>begin</name></member>
      <member refid="classlibrapid_1_1_storage_1a8e2e56b1796868dd5adca39eccac83a6" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>cbegin</name></member>
      <member refid="classlibrapid_1_1_storage_1ae980fea60c5e884582605a51ca1badbb" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>cend</name></member>
      <member refid="classlibrapid_1_1_storage_1aedd5efa91d2b0312ba095a046d4dba08" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>ConstIterator</name></member>
      <member refid="classlibrapid_1_1_storage_1aed4d97613bb5fbc0e1c2cecabdbccc45" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>ConstPointer</name></member>
      <member refid="classlibrapid_1_1_storage_1aa0592fffa9c2941a0ad0271b6ef32dba" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>ConstReference</name></member>
      <member refid="classlibrapid_1_1_storage_1a1f7674f95d175f258ab8de4bc3773dab" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>ConstReverseIterator</name></member>
      <member refid="classlibrapid_1_1_storage_1a205da5497efe3755b06e34d362bcbd1f" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>crbegin</name></member>
      <member refid="classlibrapid_1_1_storage_1a7ec5320264326a2a8086f6a078e18f47" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>crend</name></member>
      <member refid="classlibrapid_1_1_storage_1afa2af71066e7b96ca42b07c3c8c18c3a" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>DifferenceType</name></member>
      <member refid="classlibrapid_1_1_storage_1af3a214fecd3ffa5d294b7b9889e9ef41" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>end</name></member>
      <member refid="classlibrapid_1_1_storage_1adcfb992de759904c2584d84ed7355bb6" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>end</name></member>
      <member refid="classlibrapid_1_1_storage_1ab591b416bc976b4967c517bfc20d425c" prot="private" virt="non-virtual"><scope>librapid::Storage</scope><name>initData</name></member>
      <member refid="classlibrapid_1_1_storage_1af61284cfa7fa3349b55acd94df9d9029" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>initData</name></member>
      <member refid="classlibrapid_1_1_storage_1ae2054f1605894dd4397dc92ea3bc32d5" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>Iterator</name></member>
      <member refid="classlibrapid_1_1_storage_1a9577b6fb6ec67543dde646af00cdbd65" prot="private" virt="non-virtual"><scope>librapid::Storage</scope><name>m_allocator</name></member>
      <member refid="classlibrapid_1_1_storage_1aa0f73fc705805e7f1dffcd84e92ed64e" prot="private" virt="non-virtual"><scope>librapid::Storage</scope><name>m_begin</name></member>
      <member refid="classlibrapid_1_1_storage_1a0b3782373c8380da31ea84e5c808bc93" prot="private" virt="non-virtual"><scope>librapid::Storage</scope><name>m_end</name></member>
      <member refid="classlibrapid_1_1_storage_1a645549771b97c5a5fc50a425d9ca77d1" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>operator=</name></member>
      <member refid="classlibrapid_1_1_storage_1ab59bc5d7b4eea3bb9aaa4ded12ee80e9" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>operator=</name></member>
      <member refid="classlibrapid_1_1_storage_1a34cdd32ed8b67418b1f5833cdd031d64" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>operator[]</name></member>
      <member refid="classlibrapid_1_1_storage_1a526f7807802f8b951855860f06780045" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>operator[]</name></member>
      <member refid="classlibrapid_1_1_storage_1a51802f024ed62b540bdf378451f00345" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>Pointer</name></member>
      <member refid="classlibrapid_1_1_storage_1af0a1839336cfff8a77745f9a7237a7b7" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>rbegin</name></member>
      <member refid="classlibrapid_1_1_storage_1a62ea09193d0d0999cef59c0a078ae670" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>rbegin</name></member>
      <member refid="classlibrapid_1_1_storage_1aaa1c2d774c3b67e2ad1fbb48c3779fe3" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>Reference</name></member>
      <member refid="classlibrapid_1_1_storage_1aaf2aa5cb83cfd58e10d61ff1c286af51" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>rend</name></member>
      <member refid="classlibrapid_1_1_storage_1a33f9b69a2bd93a5e07de59891fabf084" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>rend</name></member>
      <member refid="classlibrapid_1_1_storage_1abe34d150799358f4c44af37da3189332" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>resize</name></member>
      <member refid="classlibrapid_1_1_storage_1ae846419d12d88d87a23f57e8349e8013" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>resize</name></member>
      <member refid="classlibrapid_1_1_storage_1ab567015cb76707399a957d5fde29b679" prot="private" virt="non-virtual"><scope>librapid::Storage</scope><name>resizeImpl</name></member>
      <member refid="classlibrapid_1_1_storage_1a1964f9775fc9c02a73cefa66cfb009a9" prot="private" virt="non-virtual"><scope>librapid::Storage</scope><name>resizeImpl</name></member>
      <member refid="classlibrapid_1_1_storage_1af637e0f4c6a7f298436e9a7aeeac8bf1" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>ReverseIterator</name></member>
      <member refid="classlibrapid_1_1_storage_1a9d5007a5ffa2a949fad13b40d854fb05" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>Scalar</name></member>
      <member refid="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>size</name></member>
      <member refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>SizeType</name></member>
      <member refid="classlibrapid_1_1_storage_1a2236763dda1d80beda26bce3bfbad5c7" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>Storage</name></member>
      <member refid="classlibrapid_1_1_storage_1aa1dbdc875198f9c8a7f0bb5d3ff30c08" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>Storage</name></member>
      <member refid="classlibrapid_1_1_storage_1a04a2785390c8a96fd6240bba73b77836" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>Storage</name></member>
      <member refid="classlibrapid_1_1_storage_1a426199dc669ec91e47acc00e21283915" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>Storage</name></member>
      <member refid="classlibrapid_1_1_storage_1a9c24f4eeb279febb3a8f41a170ce0cb5" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>Storage</name></member>
      <member refid="classlibrapid_1_1_storage_1ad71195bfc1241bd16be6cbf33b7d84bd" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>Storage</name></member>
      <member refid="classlibrapid_1_1_storage_1a1be479e553cd8647347127790c61cb2c" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>Storage</name></member>
      <member refid="classlibrapid_1_1_storage_1a018cd63a7e0789ce40e8cb144a49d98b" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>Storage</name></member>
      <member refid="classlibrapid_1_1_storage_1a8bec87e9cb26ae0c06d827fcb932bdfe" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>Storage</name></member>
      <member refid="classlibrapid_1_1_storage_1a72b91a469fd786401a1346b9baefaf55" prot="public" virt="non-virtual"><scope>librapid::Storage</scope><name>~Storage</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
