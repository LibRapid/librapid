<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classlibrapid_1_1detail_1_1_function" kind="class" language="C++" prot="public">
    <compoundname>librapid::detail::Function</compoundname>
    <includes refid="function_8hpp" local="no">function.hpp</includes>
    <templateparamlist>
      <param>
        <type><ref refid="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3" kindref="member">Descriptor</ref></type>
        <declname>desc</declname>
        <defname>desc</defname>
      </param>
      <param>
        <type>typename Functor_</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>Args</declname>
        <defname>Args</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classlibrapid_1_1detail_1_1_function_1a69827cb8ddd45ea515c0815191e8db8e" prot="public" static="no">
        <type><ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref>&lt; desc, Functor_, Args... &gt;</type>
        <definition>using librapid::detail::Function&lt; desc, Functor_, Args &gt;::Type =  Function&lt;desc, Functor_, Args...&gt;</definition>
        <argsstring></argsstring>
        <name>Type</name>
        <qualifiedname>librapid::detail::Function::Type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="23" column="1" bodyfile="librapid/include/librapid/array/function.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlibrapid_1_1detail_1_1_function_1aea1f41e23e2e5c459378516c76380488" prot="public" static="no">
        <type>Functor_</type>
        <definition>using librapid::detail::Function&lt; desc, Functor_, Args &gt;::Functor =  Functor_</definition>
        <argsstring></argsstring>
        <name>Functor</name>
        <qualifiedname>librapid::detail::Function::Functor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="24" column="1" bodyfile="librapid/include/librapid/array/function.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlibrapid_1_1detail_1_1_function_1a725266d0f0064f8b4f83ef5f19ef63bb" prot="public" static="no">
        <type>typename <ref refid="structlibrapid_1_1typetraits_1_1_type_info" kindref="compound">typetraits::TypeInfo</ref>&lt; <ref refid="classlibrapid_1_1detail_1_1_function_1a69827cb8ddd45ea515c0815191e8db8e" kindref="member">Type</ref> &gt;::Scalar</type>
        <definition>using librapid::detail::Function&lt; desc, Functor_, Args &gt;::Scalar =  typename typetraits::TypeInfo&lt;Type&gt;::Scalar</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <qualifiedname>librapid::detail::Function::Scalar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="25" column="1" bodyfile="librapid/include/librapid/array/function.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlibrapid_1_1detail_1_1_function_1aceae573d32b25ecbf4f638ddc8101dc8" prot="public" static="no">
        <type>typename <ref refid="structlibrapid_1_1typetraits_1_1_type_info" kindref="compound">typetraits::TypeInfo</ref>&lt; <ref refid="classlibrapid_1_1detail_1_1_function_1a725266d0f0064f8b4f83ef5f19ef63bb" kindref="member">Scalar</ref> &gt;::Packet</type>
        <definition>using librapid::detail::Function&lt; desc, Functor_, Args &gt;::Packet =  typename typetraits::TypeInfo&lt;Scalar&gt;::Packet</definition>
        <argsstring></argsstring>
        <name>Packet</name>
        <qualifiedname>librapid::detail::Function::Packet</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="27" column="1" bodyfile="librapid/include/librapid/array/function.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlibrapid_1_1detail_1_1_function_1aa2abd981f227ee1282990a70801016ed" prot="private" static="no" mutable="no">
        <type><ref refid="classlibrapid_1_1detail_1_1_function_1aea1f41e23e2e5c459378516c76380488" kindref="member">Functor</ref></type>
        <definition>Functor librapid::detail::Function&lt; desc, Functor_, Args &gt;::m_functor</definition>
        <argsstring></argsstring>
        <name>m_functor</name>
        <qualifiedname>librapid::detail::Function::m_functor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="87" column="9" bodyfile="librapid/include/librapid/array/function.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlibrapid_1_1detail_1_1_function_1a8ca0ed89151cb550a62f65a97f4253ff" prot="private" static="no" mutable="no">
        <type>std::tuple&lt; Args... &gt;</type>
        <definition>std::tuple&lt;Args...&gt; librapid::detail::Function&lt; desc, Functor_, Args &gt;::m_args</definition>
        <argsstring></argsstring>
        <name>m_args</name>
        <qualifiedname>librapid::detail::Function::m_args</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="88" column="12" bodyfile="librapid/include/librapid/array/function.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlibrapid_1_1detail_1_1_function_1a8d836a4f0dedc92fb2f24f4da7264945" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>librapid::detail::Function&lt; desc, Functor_, Args &gt;::Function</definition>
        <argsstring>()=default</argsstring>
        <name>Function</name>
        <qualifiedname>librapid::detail::Function::Function</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="29" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1detail_1_1_function_1a927c53fc12c1aa54aeaa94de5495b86f" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref></type>
        <definition>librapid::detail::Function&lt; desc, Functor, Args &gt;::Function</definition>
        <argsstring>(Functor &amp;&amp;functor, Args &amp;&amp;...args)</argsstring>
        <name>Function</name>
        <qualifiedname>librapid::detail::Function::Function</qualifiedname>
        <param>
          <type><ref refid="classlibrapid_1_1detail_1_1_function_1aea1f41e23e2e5c459378516c76380488" kindref="member">Functor</ref> &amp;&amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a function from a functor and arguments. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functor</parametername>
</parameternamelist>
<parameterdescription>
<para>The functor to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="34" column="33" bodyfile="librapid/include/librapid/array/function.hpp" bodystart="92" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1detail_1_1_function_1a57a0edd39c9b2021eaa30e56375777be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref></type>
        <definition>LIBRAPID_ALWAYS_INLINE librapid::detail::Function&lt; desc, Functor_, Args &gt;::Function</definition>
        <argsstring>(const Function &amp;other)=default</argsstring>
        <name>Function</name>
        <qualifiedname>librapid::detail::Function::Function</qualifiedname>
        <param>
          <type>const <ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a function from another function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="38" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1detail_1_1_function_1a4bebb0f281c4d86dbddb1f76bb5089ed" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref></type>
        <definition>LIBRAPID_ALWAYS_INLINE librapid::detail::Function&lt; desc, Functor_, Args &gt;::Function</definition>
        <argsstring>(Function &amp;&amp;other) noexcept=default</argsstring>
        <name>Function</name>
        <qualifiedname>librapid::detail::Function::Function</qualifiedname>
        <param>
          <type><ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a function from a temporary function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to move. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="42" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1detail_1_1_function_1ac0eeb297d4b6eb27c1f402e361ee4737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref> &amp;</type>
        <definition>LIBRAPID_ALWAYS_INLINE Function &amp; librapid::detail::Function&lt; desc, Functor_, Args &gt;::operator=</definition>
        <argsstring>(const Function &amp;other)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>librapid::detail::Function::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assigns a function to this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to this function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="47" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1detail_1_1_function_1a3bea9389a7f62fe20d4c49f295970047" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref> &amp;</type>
        <definition>LIBRAPID_ALWAYS_INLINE Function &amp; librapid::detail::Function&lt; desc, Functor_, Args &gt;::operator=</definition>
        <argsstring>(Function &amp;&amp;other) noexcept=default</argsstring>
        <name>operator=</name>
        <qualifiedname>librapid::detail::Function::operator=</qualifiedname>
        <param>
          <type><ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assigns a temporary function to this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to move. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to this function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="52" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1detail_1_1_function_1abfe8002bf9608317b55db0471059ad41" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> auto</type>
        <definition>LIBRAPID_NODISCARD LIBRAPID_ALWAYS_INLINE auto librapid::detail::Function&lt; desc, Functor_, Args &gt;::shape</definition>
        <argsstring>() const</argsstring>
        <name>shape</name>
        <qualifiedname>librapid::detail::Function::shape</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="54" column="48" bodyfile="librapid/include/librapid/array/function.hpp" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1detail_1_1_function_1a8fb5be37c8760e2461877b5b6e5d5298" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1detail_1_1_function_1aceae573d32b25ecbf4f638ddc8101dc8" kindref="member">Packet</ref></type>
        <definition>Function&lt; desc, Functor, Args... &gt;::Packet librapid::detail::Function&lt; desc, Functor, Args &gt;::packet</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>packet</name>
        <qualifiedname>librapid::detail::Function::packet</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Evaluates the function at the given index, returning a Packet result. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to evaluate at. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the function (vectorized). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="61" column="50" bodyfile="librapid/include/librapid/array/function.hpp" bodystart="97" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1detail_1_1_function_1a3930166f66ecb486a1536cb2f483ea51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1detail_1_1_function_1a725266d0f0064f8b4f83ef5f19ef63bb" kindref="member">Scalar</ref></type>
        <definition>auto librapid::detail::Function&lt; desc, Functor, Args &gt;::scalar</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>scalar</name>
        <qualifiedname>librapid::detail::Function::scalar</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Evaluates the function at the given index, returning a Scalar result. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to evaluate at. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the function (scalar). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="66" column="50" bodyfile="librapid/include/librapid/array/function.hpp" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1detail_1_1_function_1a4acb18e00e835662f0ecf6eb53664c3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref>&lt; desc, <ref refid="classlibrapid_1_1detail_1_1_function_1aea1f41e23e2e5c459378516c76380488" kindref="member">Functor</ref>, Args... &gt;<ref refid="classlibrapid_1_1detail_1_1_function_1aceae573d32b25ecbf4f638ddc8101dc8" kindref="member">::Packet</ref></type>
        <definition>Function&lt; desc, Functor, Args... &gt;::Packet librapid::detail::Function&lt; desc, Functor_, Args &gt;::packetImpl</definition>
        <argsstring>(std::index_sequence&lt; I... &gt;, size_t index) const</argsstring>
        <name>packetImpl</name>
        <qualifiedname>librapid::detail::Function::packetImpl</qualifiedname>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="104" column="10" bodyfile="librapid/include/librapid/array/function.hpp" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1detail_1_1_function_1a4d10cbe8d054e56838d55c3036acf10c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto librapid::detail::Function&lt; desc, Functor_, Args &gt;::scalarImpl</definition>
        <argsstring>(std::index_sequence&lt; I... &gt;, size_t index) const -&gt; Scalar</argsstring>
        <name>scalarImpl</name>
        <qualifiedname>librapid::detail::Function::scalarImpl</qualifiedname>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="116" column="15" bodyfile="librapid/include/librapid/array/function.hpp" bodystart="116" bodyend="119"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classlibrapid_1_1detail_1_1_function_1a1bdf8237ed138dcd75404f8c938f961c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1detail_1_1_function_1aceae573d32b25ecbf4f638ddc8101dc8" kindref="member">Packet</ref></type>
        <definition>LIBRAPID_NODISCARD LIBRAPID_ALWAYS_INLINE Packet librapid::detail::Function&lt; desc, Functor_, Args &gt;::packetImpl</definition>
        <argsstring>(std::index_sequence&lt; I... &gt;, size_t index) const</argsstring>
        <name>packetImpl</name>
        <qualifiedname>librapid::detail::Function::packetImpl</qualifiedname>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implementation detail <ndash/> evaluates the function at the given index, returning a Packet result. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>I</parametername>
</parameternamelist>
<parameterdescription>
<para>The index sequence. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to evaluate at. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the function (vectorized). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="75" column="50"/>
      </memberdef>
      <memberdef kind="function" id="classlibrapid_1_1detail_1_1_function_1a1d35cf48f85da25cffd9eba81b0cb0a7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> <ref refid="classlibrapid_1_1detail_1_1_function_1a725266d0f0064f8b4f83ef5f19ef63bb" kindref="member">Scalar</ref></type>
        <definition>LIBRAPID_NODISCARD LIBRAPID_ALWAYS_INLINE Scalar librapid::detail::Function&lt; desc, Functor_, Args &gt;::scalarImpl</definition>
        <argsstring>(std::index_sequence&lt; I... &gt;, size_t index) const</argsstring>
        <name>scalarImpl</name>
        <qualifiedname>librapid::detail::Function::scalarImpl</qualifiedname>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implementation detail <ndash/> evaluates the function at the given index, returning a Scalar result. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>I</parametername>
</parameternamelist>
<parameterdescription>
<para>The index sequence. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to evaluate at. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the function (scalar). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/function.hpp" line="84" column="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="librapid/include/librapid/array/function.hpp" line="21" column="1" bodyfile="librapid/include/librapid/array/function.hpp" bodystart="21" bodyend="89"/>
    <listofallmembers>
      <member refid="classlibrapid_1_1detail_1_1_function_1a8d836a4f0dedc92fb2f24f4da7264945" prot="public" virt="non-virtual"><scope>librapid::detail::Function</scope><name>Function</name></member>
      <member refid="classlibrapid_1_1detail_1_1_function_1a927c53fc12c1aa54aeaa94de5495b86f" prot="public" virt="non-virtual"><scope>librapid::detail::Function</scope><name>Function</name></member>
      <member refid="classlibrapid_1_1detail_1_1_function_1a57a0edd39c9b2021eaa30e56375777be" prot="public" virt="non-virtual"><scope>librapid::detail::Function</scope><name>Function</name></member>
      <member refid="classlibrapid_1_1detail_1_1_function_1a4bebb0f281c4d86dbddb1f76bb5089ed" prot="public" virt="non-virtual"><scope>librapid::detail::Function</scope><name>Function</name></member>
      <member refid="classlibrapid_1_1detail_1_1_function_1aea1f41e23e2e5c459378516c76380488" prot="public" virt="non-virtual"><scope>librapid::detail::Function</scope><name>Functor</name></member>
      <member refid="classlibrapid_1_1detail_1_1_function_1a8ca0ed89151cb550a62f65a97f4253ff" prot="private" virt="non-virtual"><scope>librapid::detail::Function</scope><name>m_args</name></member>
      <member refid="classlibrapid_1_1detail_1_1_function_1aa2abd981f227ee1282990a70801016ed" prot="private" virt="non-virtual"><scope>librapid::detail::Function</scope><name>m_functor</name></member>
      <member refid="classlibrapid_1_1detail_1_1_function_1ac0eeb297d4b6eb27c1f402e361ee4737" prot="public" virt="non-virtual"><scope>librapid::detail::Function</scope><name>operator=</name></member>
      <member refid="classlibrapid_1_1detail_1_1_function_1a3bea9389a7f62fe20d4c49f295970047" prot="public" virt="non-virtual"><scope>librapid::detail::Function</scope><name>operator=</name></member>
      <member refid="classlibrapid_1_1detail_1_1_function_1aceae573d32b25ecbf4f638ddc8101dc8" prot="public" virt="non-virtual"><scope>librapid::detail::Function</scope><name>Packet</name></member>
      <member refid="classlibrapid_1_1detail_1_1_function_1a8fb5be37c8760e2461877b5b6e5d5298" prot="public" virt="non-virtual"><scope>librapid::detail::Function</scope><name>packet</name></member>
      <member refid="classlibrapid_1_1detail_1_1_function_1a1bdf8237ed138dcd75404f8c938f961c" prot="private" virt="non-virtual"><scope>librapid::detail::Function</scope><name>packetImpl</name></member>
      <member refid="classlibrapid_1_1detail_1_1_function_1a4acb18e00e835662f0ecf6eb53664c3c" prot="public" virt="non-virtual"><scope>librapid::detail::Function</scope><name>packetImpl</name></member>
      <member refid="classlibrapid_1_1detail_1_1_function_1a725266d0f0064f8b4f83ef5f19ef63bb" prot="public" virt="non-virtual"><scope>librapid::detail::Function</scope><name>Scalar</name></member>
      <member refid="classlibrapid_1_1detail_1_1_function_1a3930166f66ecb486a1536cb2f483ea51" prot="public" virt="non-virtual"><scope>librapid::detail::Function</scope><name>scalar</name></member>
      <member refid="classlibrapid_1_1detail_1_1_function_1a1d35cf48f85da25cffd9eba81b0cb0a7" prot="private" virt="non-virtual"><scope>librapid::detail::Function</scope><name>scalarImpl</name></member>
      <member refid="classlibrapid_1_1detail_1_1_function_1a4d10cbe8d054e56838d55c3036acf10c" prot="public" virt="non-virtual"><scope>librapid::detail::Function</scope><name>scalarImpl</name></member>
      <member refid="classlibrapid_1_1detail_1_1_function_1abfe8002bf9608317b55db0471059ad41" prot="public" virt="non-virtual"><scope>librapid::detail::Function</scope><name>shape</name></member>
      <member refid="classlibrapid_1_1detail_1_1_function_1a69827cb8ddd45ea515c0815191e8db8e" prot="public" virt="non-virtual"><scope>librapid::detail::Function</scope><name>Type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
