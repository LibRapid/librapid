<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="helper__multiprocess_8h" kind="file" language="C++">
    <compoundname>helper_multiprocess.h</compoundname>
    <includes local="no">errno.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">memory.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">sys/mman.h</includes>
    <includes local="no">sys/socket.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">sys/un.h</includes>
    <includes local="no">sys/wait.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="1">
        <label>librapid/include/librapid/cuda/helper_multiprocess.h</label>
        <link refid="helper__multiprocess_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>errno.h</label>
      </node>
      <node id="3">
        <label>fcntl.h</label>
      </node>
      <node id="4">
        <label>memory.h</label>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
      <node id="6">
        <label>sys/mman.h</label>
      </node>
      <node id="7">
        <label>sys/socket.h</label>
      </node>
      <node id="8">
        <label>sys/types.h</label>
      </node>
      <node id="9">
        <label>sys/un.h</label>
      </node>
      <node id="10">
        <label>sys/wait.h</label>
      </node>
      <node id="11">
        <label>unistd.h</label>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="structshared_memory_info__st" prot="public">sharedMemoryInfo_st</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="helper__multiprocess_8h_1a963c63f1d4be099ba2afec1e8d4af4b9" prot="public" static="no">
        <name>checkIpcErrors</name>
        <param><defname>ipcFuncResult</defname></param>
        <initializer>	if (ipcFuncResult == -1) {                                                                     \
		fprintf(stderr, &quot;Failure at %u %s\n&quot;, __LINE__, __FILE__);                                 \
		exit(EXIT_FAILURE);                                                                        \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/cuda/helper_multiprocess.h" line="88" column="9" bodyfile="librapid/include/librapid/cuda/helper_multiprocess.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="helper__multiprocess_8h_1add8daa71fee7607cb8c939a2928467db" prot="public" static="no">
        <type>struct <ref refid="structshared_memory_info__st" kindref="compound">sharedMemoryInfo_st</ref></type>
        <definition>typedef struct sharedMemoryInfo_st sharedMemoryInfo</definition>
        <argsstring></argsstring>
        <name>sharedMemoryInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/cuda/helper_multiprocess.h" line="68" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="helper__multiprocess_8h_1a87c9efdf573e374c279d7d3dca3a6c6b" prot="public" static="no">
        <type>pid_t</type>
        <definition>typedef pid_t Process</definition>
        <argsstring></argsstring>
        <name>Process</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/cuda/helper_multiprocess.h" line="81" column="15" bodyfile="librapid/include/librapid/cuda/helper_multiprocess.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="helper__multiprocess_8h_1a8ae553a283c4fd3170de6eebec33dced" prot="public" static="no">
        <type>struct ipcHandle_st</type>
        <definition>typedef struct ipcHandle_st ipcHandle</definition>
        <argsstring></argsstring>
        <name>ipcHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/cuda/helper_multiprocess.h" line="110" column="27" bodyfile="librapid/include/librapid/cuda/helper_multiprocess.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="helper__multiprocess_8h_1a503ee2388b065930081b941be9082916" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sharedMemoryCreate</definition>
        <argsstring>(const char *name, size_t sz, sharedMemoryInfo *info)</argsstring>
        <name>sharedMemoryCreate</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type><ref refid="helper__multiprocess_8h_1add8daa71fee7607cb8c939a2928467db" kindref="member">sharedMemoryInfo</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/cuda/helper_multiprocess.h" line="70" column="5" declfile="librapid/include/librapid/cuda/helper_multiprocess.h" declline="70" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="helper__multiprocess_8h_1aacbe70b5cdfc5bb8a0ab1f1062e83bab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sharedMemoryOpen</definition>
        <argsstring>(const char *name, size_t sz, sharedMemoryInfo *info)</argsstring>
        <name>sharedMemoryOpen</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type><ref refid="helper__multiprocess_8h_1add8daa71fee7607cb8c939a2928467db" kindref="member">sharedMemoryInfo</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/cuda/helper_multiprocess.h" line="72" column="5" declfile="librapid/include/librapid/cuda/helper_multiprocess.h" declline="72" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="helper__multiprocess_8h_1a560676a6060a32d64d2db2e8b5b6559a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sharedMemoryClose</definition>
        <argsstring>(sharedMemoryInfo *info)</argsstring>
        <name>sharedMemoryClose</name>
        <param>
          <type><ref refid="helper__multiprocess_8h_1add8daa71fee7607cb8c939a2928467db" kindref="member">sharedMemoryInfo</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/cuda/helper_multiprocess.h" line="74" column="6" declfile="librapid/include/librapid/cuda/helper_multiprocess.h" declline="74" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="helper__multiprocess_8h_1a594c7d8f3a6d09ddf53617fae9df2c5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int spawnProcess</definition>
        <argsstring>(Process *process, const char *app, char *const *args)</argsstring>
        <name>spawnProcess</name>
        <param>
          <type><ref refid="helper__multiprocess_8h_1a87c9efdf573e374c279d7d3dca3a6c6b" kindref="member">Process</ref> *</type>
          <declname>process</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>app</declname>
        </param>
        <param>
          <type>char *const *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/cuda/helper_multiprocess.h" line="84" column="5" declfile="librapid/include/librapid/cuda/helper_multiprocess.h" declline="84" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="helper__multiprocess_8h_1a75cf5647404c986eaeadf65109fffd33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int waitProcess</definition>
        <argsstring>(Process *process)</argsstring>
        <name>waitProcess</name>
        <param>
          <type><ref refid="helper__multiprocess_8h_1a87c9efdf573e374c279d7d3dca3a6c6b" kindref="member">Process</ref> *</type>
          <declname>process</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/cuda/helper_multiprocess.h" line="86" column="5" declfile="librapid/include/librapid/cuda/helper_multiprocess.h" declline="86" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="helper__multiprocess_8h_1af2042d7235b516ac4ea894d65a6260ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ipcCreateSocket</definition>
        <argsstring>(ipcHandle *&amp;handle, const char *name, const std::vector&lt; Process &gt; &amp;processes)</argsstring>
        <name>ipcCreateSocket</name>
        <param>
          <type><ref refid="helper__multiprocess_8h_1a8ae553a283c4fd3170de6eebec33dced" kindref="member">ipcHandle</ref> *&amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="helper__multiprocess_8h_1a87c9efdf573e374c279d7d3dca3a6c6b" kindref="member">Process</ref> &gt; &amp;</type>
          <declname>processes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/cuda/helper_multiprocess.h" line="112" column="5" declfile="librapid/include/librapid/cuda/helper_multiprocess.h" declline="112" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="helper__multiprocess_8h_1a85f7c32285488f12ca8b1e0faa0527e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ipcOpenSocket</definition>
        <argsstring>(ipcHandle *&amp;handle)</argsstring>
        <name>ipcOpenSocket</name>
        <param>
          <type><ref refid="helper__multiprocess_8h_1a8ae553a283c4fd3170de6eebec33dced" kindref="member">ipcHandle</ref> *&amp;</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/cuda/helper_multiprocess.h" line="114" column="5" declfile="librapid/include/librapid/cuda/helper_multiprocess.h" declline="114" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="helper__multiprocess_8h_1a3afc6ff6d726527d0b88b12766be6c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ipcCloseSocket</definition>
        <argsstring>(ipcHandle *handle)</argsstring>
        <name>ipcCloseSocket</name>
        <param>
          <type><ref refid="helper__multiprocess_8h_1a8ae553a283c4fd3170de6eebec33dced" kindref="member">ipcHandle</ref> *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/cuda/helper_multiprocess.h" line="116" column="5" declfile="librapid/include/librapid/cuda/helper_multiprocess.h" declline="116" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="helper__multiprocess_8h_1a41ef9ea693af23bbcd4b4be37b98e3c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ipcRecvShareableHandles</definition>
        <argsstring>(ipcHandle *handle, std::vector&lt; ShareableHandle &gt; &amp;shareableHandles)</argsstring>
        <name>ipcRecvShareableHandles</name>
        <param>
          <type><ref refid="helper__multiprocess_8h_1a8ae553a283c4fd3170de6eebec33dced" kindref="member">ipcHandle</ref> *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::vector&lt; ShareableHandle &gt; &amp;</type>
          <declname>shareableHandles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/cuda/helper_multiprocess.h" line="118" column="5" declfile="librapid/include/librapid/cuda/helper_multiprocess.h" declline="118" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="helper__multiprocess_8h_1a5db6d3174573b7fe49215c2f419b359b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ipcSendShareableHandles</definition>
        <argsstring>(ipcHandle *handle, const std::vector&lt; ShareableHandle &gt; &amp;shareableHandles, const std::vector&lt; Process &gt; &amp;processes)</argsstring>
        <name>ipcSendShareableHandles</name>
        <param>
          <type><ref refid="helper__multiprocess_8h_1a8ae553a283c4fd3170de6eebec33dced" kindref="member">ipcHandle</ref> *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const std::vector&lt; ShareableHandle &gt; &amp;</type>
          <declname>shareableHandles</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="helper__multiprocess_8h_1a87c9efdf573e374c279d7d3dca3a6c6b" kindref="member">Process</ref> &gt; &amp;</type>
          <declname>processes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/cuda/helper_multiprocess.h" line="120" column="5" declfile="librapid/include/librapid/cuda/helper_multiprocess.h" declline="120" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="helper__multiprocess_8h_1a4df371b40842bf0eb1684c4b0770387b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ipcCloseShareableHandle</definition>
        <argsstring>(ShareableHandle shHandle)</argsstring>
        <name>ipcCloseShareableHandle</name>
        <param>
          <type>ShareableHandle</type>
          <declname>shHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/cuda/helper_multiprocess.h" line="123" column="5" declfile="librapid/include/librapid/cuda/helper_multiprocess.h" declline="123" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Copyright<sp/>(c)<sp/>2019,<sp/>NVIDIA<sp/>CORPORATION.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>NVIDIA<sp/>CORPORATION<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HELPER_MULTIPROCESS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HELPER_MULTIPROCESS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(WIN32)<sp/>||<sp/>defined(_WIN32)<sp/>||<sp/>defined(WIN64)<sp/>||<sp/>defined(_WIN64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifndef<sp/>WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;AclAPI.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;sddl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;strsafe.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;tchar.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;Windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;winternl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;memory.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;sys/mman.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;sys/socket.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;sys/un.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;sys/wait.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="structshared_memory_info__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshared_memory_info__st" kindref="compound">sharedMemoryInfo_st</ref><sp/>{</highlight></codeline>
<codeline lineno="61" refid="structshared_memory_info__st_1ac2cdf8965b877e223302a8c133c98f3d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structshared_memory_info__st_1ac2cdf8965b877e223302a8c133c98f3d" kindref="member">addr</ref>;</highlight></codeline>
<codeline lineno="62" refid="structshared_memory_info__st_1a673f556df69750c8cc4e91daba53392e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structshared_memory_info__st_1a673f556df69750c8cc4e91daba53392e" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(WIN32)<sp/>||<sp/>defined(_WIN32)<sp/>||<sp/>defined(WIN64)<sp/>||<sp/>defined(_WIN64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE<sp/>shmHandle;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="structshared_memory_info__st_1a440522aeb6a5ede20fed1f6b797f9040" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structshared_memory_info__st_1a440522aeb6a5ede20fed1f6b797f9040" kindref="member">shmFd</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="helper__multiprocess_8h_1add8daa71fee7607cb8c939a2928467db" refkind="member"><highlight class="normal">}<sp/><ref refid="helper__multiprocess_8h_1add8daa71fee7607cb8c939a2928467db" kindref="member">sharedMemoryInfo</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="helper__multiprocess_8h_1a503ee2388b065930081b941be9082916" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="helper__multiprocess_8h_1a503ee2388b065930081b941be9082916" kindref="member">sharedMemoryCreate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz,<sp/><ref refid="structshared_memory_info__st" kindref="compound">sharedMemoryInfo</ref><sp/>*info);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="helper__multiprocess_8h_1aacbe70b5cdfc5bb8a0ab1f1062e83bab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="helper__multiprocess_8h_1aacbe70b5cdfc5bb8a0ab1f1062e83bab" kindref="member">sharedMemoryOpen</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz,<sp/><ref refid="structshared_memory_info__st" kindref="compound">sharedMemoryInfo</ref><sp/>*info);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="helper__multiprocess_8h_1a560676a6060a32d64d2db2e8b5b6559a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="helper__multiprocess_8h_1a560676a6060a32d64d2db2e8b5b6559a" kindref="member">sharedMemoryClose</ref>(<ref refid="structshared_memory_info__st" kindref="compound">sharedMemoryInfo</ref><sp/>*info);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(WIN32)<sp/>||<sp/>defined(_WIN32)<sp/>||<sp/>defined(WIN64)<sp/>||<sp/>defined(_WIN64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PROCESS_INFORMATION<sp/><ref refid="helper__multiprocess_8h_1a87c9efdf573e374c279d7d3dca3a6c6b" kindref="member">Process</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="helper__multiprocess_8h_1a87c9efdf573e374c279d7d3dca3a6c6b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>pid_t<sp/><ref refid="helper__multiprocess_8h_1a87c9efdf573e374c279d7d3dca3a6c6b" kindref="member">Process</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="helper__multiprocess_8h_1a594c7d8f3a6d09ddf53617fae9df2c5b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="helper__multiprocess_8h_1a594c7d8f3a6d09ddf53617fae9df2c5b" kindref="member">spawnProcess</ref>(<ref refid="helper__multiprocess_8h_1a87c9efdf573e374c279d7d3dca3a6c6b" kindref="member">Process</ref><sp/>*process,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*app,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*args);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="helper__multiprocess_8h_1a75cf5647404c986eaeadf65109fffd33" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="helper__multiprocess_8h_1a75cf5647404c986eaeadf65109fffd33" kindref="member">waitProcess</ref>(<ref refid="helper__multiprocess_8h_1a87c9efdf573e374c279d7d3dca3a6c6b" kindref="member">Process</ref><sp/>*process);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="helper__multiprocess_8h_1a963c63f1d4be099ba2afec1e8d4af4b9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>checkIpcErrors(ipcFuncResult)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(ipcFuncResult<sp/>==<sp/>-1)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/>&quot;Failure<sp/>at<sp/>%u<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>__LINE__,<sp/>__FILE__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__linux__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ipcHandle_st<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>socket;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*socketName;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ShareableHandle;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(WIN32)<sp/>||<sp/>defined(_WIN32)<sp/>||<sp/>defined(WIN64)<sp/>||<sp/>defined(_WIN64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ipcHandle_st<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;HANDLE&gt;<sp/>hMailslot;<sp/></highlight><highlight class="comment">//<sp/>1<sp/>Handle<sp/>in<sp/>case<sp/>of<sp/>child<sp/>and<sp/>`num</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>children`<sp/>Handles<sp/>for<sp/>parent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>HANDLE<sp/>ShareableHandle;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="helper__multiprocess_8h_1a8ae553a283c4fd3170de6eebec33dced" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ipcHandle_st<sp/><ref refid="helper__multiprocess_8h_1a8ae553a283c4fd3170de6eebec33dced" kindref="member">ipcHandle</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="helper__multiprocess_8h_1af2042d7235b516ac4ea894d65a6260ea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="helper__multiprocess_8h_1af2042d7235b516ac4ea894d65a6260ea" kindref="member">ipcCreateSocket</ref>(<ref refid="helper__multiprocess_8h_1a8ae553a283c4fd3170de6eebec33dced" kindref="member">ipcHandle</ref><sp/>*&amp;handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Process&gt;<sp/>&amp;processes);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="helper__multiprocess_8h_1a85f7c32285488f12ca8b1e0faa0527e8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="helper__multiprocess_8h_1a85f7c32285488f12ca8b1e0faa0527e8" kindref="member">ipcOpenSocket</ref>(<ref refid="helper__multiprocess_8h_1a8ae553a283c4fd3170de6eebec33dced" kindref="member">ipcHandle</ref><sp/>*&amp;handle);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="helper__multiprocess_8h_1a3afc6ff6d726527d0b88b12766be6c2d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="helper__multiprocess_8h_1a3afc6ff6d726527d0b88b12766be6c2d" kindref="member">ipcCloseSocket</ref>(<ref refid="helper__multiprocess_8h_1a8ae553a283c4fd3170de6eebec33dced" kindref="member">ipcHandle</ref><sp/>*handle);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="helper__multiprocess_8h_1a41ef9ea693af23bbcd4b4be37b98e3c4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="helper__multiprocess_8h_1a41ef9ea693af23bbcd4b4be37b98e3c4" kindref="member">ipcRecvShareableHandles</ref>(<ref refid="helper__multiprocess_8h_1a8ae553a283c4fd3170de6eebec33dced" kindref="member">ipcHandle</ref><sp/>*handle,<sp/>std::vector&lt;ShareableHandle&gt;<sp/>&amp;shareableHandles);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="helper__multiprocess_8h_1a5db6d3174573b7fe49215c2f419b359b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="helper__multiprocess_8h_1a5db6d3174573b7fe49215c2f419b359b" kindref="member">ipcSendShareableHandles</ref>(<ref refid="helper__multiprocess_8h_1a8ae553a283c4fd3170de6eebec33dced" kindref="member">ipcHandle</ref><sp/>*handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;ShareableHandle&gt;<sp/>&amp;shareableHandles,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Process&gt;<sp/>&amp;processes);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="helper__multiprocess_8h_1a4df371b40842bf0eb1684c4b0770387b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="helper__multiprocess_8h_1a4df371b40842bf0eb1684c4b0770387b" kindref="member">ipcCloseShareableHandle</ref>(ShareableHandle<sp/>shHandle);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>HELPER_MULTIPROCESS_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="librapid/include/librapid/cuda/helper_multiprocess.h"/>
  </compounddef>
</doxygen>
