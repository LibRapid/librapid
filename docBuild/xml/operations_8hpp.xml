<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="operations_8hpp" kind="file" language="C++">
    <compoundname>operations.hpp</compoundname>
    <includedby refid="array_8hpp" local="yes">librapid/include/librapid/array/array.hpp</includedby>
    <invincdepgraph>
      <node id="2">
        <label>librapid/include/librapid/array/array.hpp</label>
        <link refid="array_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>librapid/include/librapid/array/operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>librapid/include/librapid/librapid.hpp</label>
        <link refid="librapid_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>librapid/src/global.cpp</label>
        <link refid="global_8cpp"/>
      </node>
      <node id="5">
        <label>librapid/src/helper_cuda.cpp</label>
        <link refid="helper__cuda_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structlibrapid_1_1detail_1_1_plus" prot="public">librapid::detail::Plus</innerclass>
    <innerclass refid="structlibrapid_1_1detail_1_1_minus" prot="public">librapid::detail::Minus</innerclass>
    <innerclass refid="structlibrapid_1_1detail_1_1_multiply" prot="public">librapid::detail::Multiply</innerclass>
    <innerclass refid="structlibrapid_1_1detail_1_1_divide" prot="public">librapid::detail::Divide</innerclass>
    <innernamespace refid="namespacelibrapid">librapid</innernamespace>
    <innernamespace refid="namespacelibrapid_1_1detail">librapid::detail</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="operations_8hpp_1a1c6b68febd855088c5830f136343d1d2" prot="public" static="no">
        <name>LIBRAPID_BINARY_FUNCTOR</name>
        <param><defname>NAME_</defname></param>
        <param><defname>OP_</defname></param>
        <initializer>	struct NAME_ {                                                                                 \
		template&lt;typename T, typename V&gt;                                                           \
		<ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> auto operator()(const T &amp;lhs,                    \
																  const V &amp;rhs) const {            \
			return lhs OP_ rhs;                                                                    \
		}                                                                                          \
                                                                                                   \
		template&lt;typename Packet&gt;                                                                  \
		<ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> auto packet(const Packet &amp;lhs,                   \
															  const Packet &amp;rhs) const {           \
			return lhs OP_ rhs;                                                                    \
		}                                                                                          \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/operations.hpp" line="4" column="9" bodyfile="librapid/include/librapid/array/operations.hpp" bodystart="4" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>LIBRAPID_ARRAY_OPERATIONS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBRAPID_ARRAY_OPERATIONS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4" refid="operations_8hpp_1a1c6b68febd855088c5830f136343d1d2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBRAPID_BINARY_FUNCTOR(NAME_,<sp/>OP_)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>NAME_<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>V&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="7"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LIBRAPID_NODISCARD<sp/>LIBRAPID_ALWAYS_INLINE<sp/>auto<sp/>operator()(const<sp/>T<sp/>&amp;lhs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>V<sp/>&amp;rhs)<sp/>const<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>lhs<sp/>OP_<sp/>rhs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>Packet&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LIBRAPID_NODISCARD<sp/>LIBRAPID_ALWAYS_INLINE<sp/>auto<sp/>packet(const<sp/>Packet<sp/>&amp;lhs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Packet<sp/>&amp;rhs)<sp/>const<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>lhs<sp/>OP_<sp/>rhs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelibrapid" kindref="compound">librapid</ref><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<ref refid="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3" kindref="member">Descriptor</ref><sp/>desc,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="22" refid="namespacelibrapid_1_1detail_1ad2e404dc0a775162d44e686c3fad8470" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacelibrapid_1_1detail_1ad2e404dc0a775162d44e686c3fad8470" kindref="member">makeFunction</ref>(Args<sp/>&amp;&amp;...args)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>OperationType<sp/>=<sp/><ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref>&lt;desc,<sp/>Functor,<sp/>Args...&gt;;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OperationType(Functor(),<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="structlibrapid_1_1detail_1_1_plus_1a19996b7efdd8059b23cdb86798233436" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8hpp_1a1c6b68febd855088c5830f136343d1d2" kindref="member">LIBRAPID_BINARY_FUNCTOR</ref>(<ref refid="structlibrapid_1_1detail_1_1_plus" kindref="compound">Plus</ref>,<sp/>+);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>+<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="structlibrapid_1_1detail_1_1_minus_1a82e62479d57f590bbb01ee40538e4d96" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8hpp_1a1c6b68febd855088c5830f136343d1d2" kindref="member">LIBRAPID_BINARY_FUNCTOR</ref>(<ref refid="structlibrapid_1_1detail_1_1_minus" kindref="compound">Minus</ref>,<sp/>-);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>-<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="structlibrapid_1_1detail_1_1_multiply_1a7d67897050473cce6c3fdedbdc6e4dc1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8hpp_1a1c6b68febd855088c5830f136343d1d2" kindref="member">LIBRAPID_BINARY_FUNCTOR</ref>(<ref refid="structlibrapid_1_1detail_1_1_multiply" kindref="compound">Multiply</ref>,<sp/>*);<sp/></highlight><highlight class="comment">//<sp/>a<sp/>*<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="structlibrapid_1_1detail_1_1_divide_1a72f72075f9c0df795ff584efd133d3d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8hpp_1a1c6b68febd855088c5830f136343d1d2" kindref="member">LIBRAPID_BINARY_FUNCTOR</ref>(<ref refid="structlibrapid_1_1detail_1_1_divide" kindref="compound">Divide</ref>,<sp/>/);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>/<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>LHS,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RHS&gt;</highlight></codeline>
<codeline lineno="45" refid="namespacelibrapid_1ace1856766f37ba615f6a0591b11efce0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacelibrapid_1ace1856766f37ba615f6a0591b11efce0" kindref="member">operator+</ref>(LHS<sp/>&amp;&amp;lhs,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RHS<sp/>&amp;&amp;rhs)<sp/><ref refid="config_8hpp_1aaa2763e652006648e9ae602dc1c56414" kindref="member">LIBRAPID_RELEASE_NOEXCEPT</ref></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;detail::Function&lt;<ref refid="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3a6d2adfdfd6f2a24cc46e5fdbb5679135" kindref="member">detail::Descriptor::Trivial</ref>,<sp/><ref refid="structlibrapid_1_1detail_1_1_plus" kindref="compound">detail::Plus</ref>,<sp/>LHS,<sp/>RHS&gt;<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(typetraits::IsSame&lt;typename<sp/>typetraits::TypeInfo&lt;std::decay_t&lt;LHS&gt;&gt;::Scalar,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structlibrapid_1_1typetraits_1_1_type_info" kindref="compound">typetraits::TypeInfo&lt;std::decay_t&lt;RHS&gt;</ref>&gt;::Scalar&gt;,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Operands<sp/>must<sp/>have<sp/>the<sp/>same<sp/>data<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1a69e316f2ab927d2834e632a12968e268" kindref="member">LIBRAPID_ASSERT</ref>(lhs.shape()<sp/>==<sp/>rhs.shape(),<sp/></highlight><highlight class="stringliteral">&quot;Shapes<sp/>must<sp/>be<sp/>equal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::makeFunction&lt;detail::Descriptor::Trivial,<sp/>detail::Plus&gt;(</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;LHS&gt;(lhs),<sp/>std::forward&lt;RHS&gt;(rhs));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>LHS,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RHS&gt;</highlight></codeline>
<codeline lineno="67" refid="namespacelibrapid_1a9276a515a5140503a5db45e01a2f2302" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacelibrapid_1a9276a515a5140503a5db45e01a2f2302" kindref="member">operator-</ref>(LHS<sp/>&amp;&amp;lhs,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RHS<sp/>&amp;&amp;rhs)<sp/><ref refid="config_8hpp_1aaa2763e652006648e9ae602dc1c56414" kindref="member">LIBRAPID_RELEASE_NOEXCEPT</ref></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;detail::Function&lt;<ref refid="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3a6d2adfdfd6f2a24cc46e5fdbb5679135" kindref="member">detail::Descriptor::Trivial</ref>,<sp/><ref refid="structlibrapid_1_1detail_1_1_minus" kindref="compound">detail::Minus</ref>,<sp/>LHS,<sp/>RHS&gt;<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(typetraits::IsSame&lt;typename<sp/>typetraits::TypeInfo&lt;std::decay_t&lt;LHS&gt;&gt;::Scalar,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structlibrapid_1_1typetraits_1_1_type_info" kindref="compound">typetraits::TypeInfo&lt;std::decay_t&lt;RHS&gt;</ref>&gt;::Scalar&gt;,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Operands<sp/>must<sp/>have<sp/>the<sp/>same<sp/>data<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1a69e316f2ab927d2834e632a12968e268" kindref="member">LIBRAPID_ASSERT</ref>(lhs.shape()<sp/>==<sp/>rhs.shape(),<sp/></highlight><highlight class="stringliteral">&quot;Shapes<sp/>must<sp/>be<sp/>equal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::makeFunction&lt;detail::Descriptor::Trivial,<sp/>detail::Minus&gt;(</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;LHS&gt;(lhs),<sp/>std::forward&lt;RHS&gt;(rhs));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>LHS,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RHS&gt;</highlight></codeline>
<codeline lineno="89" refid="namespacelibrapid_1a70f519a4a3c27718d1ec40b98a87c441" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacelibrapid_1a70f519a4a3c27718d1ec40b98a87c441" kindref="member">operator*</ref>(LHS<sp/>&amp;&amp;lhs,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RHS<sp/>&amp;&amp;rhs)<sp/><ref refid="config_8hpp_1aaa2763e652006648e9ae602dc1c56414" kindref="member">LIBRAPID_RELEASE_NOEXCEPT</ref></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;detail::Function&lt;<ref refid="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3a6d2adfdfd6f2a24cc46e5fdbb5679135" kindref="member">detail::Descriptor::Trivial</ref>,<sp/><ref refid="structlibrapid_1_1detail_1_1_multiply" kindref="compound">detail::Multiply</ref>,<sp/>LHS,<sp/>RHS&gt;<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(typetraits::IsSame&lt;typename<sp/>typetraits::TypeInfo&lt;std::decay_t&lt;LHS&gt;&gt;::Scalar,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structlibrapid_1_1typetraits_1_1_type_info" kindref="compound">typetraits::TypeInfo&lt;std::decay_t&lt;RHS&gt;</ref>&gt;::Scalar&gt;,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Operands<sp/>must<sp/>have<sp/>the<sp/>same<sp/>data<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1a69e316f2ab927d2834e632a12968e268" kindref="member">LIBRAPID_ASSERT</ref>(lhs.shape()<sp/>==<sp/>rhs.shape(),<sp/></highlight><highlight class="stringliteral">&quot;Shapes<sp/>must<sp/>be<sp/>equal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::makeFunction&lt;detail::Descriptor::Trivial,<sp/>detail::Multiply&gt;(</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;LHS&gt;(lhs),<sp/>std::forward&lt;RHS&gt;(rhs));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>LHS,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RHS&gt;</highlight></codeline>
<codeline lineno="111" refid="namespacelibrapid_1a5655d3d2d13515f121f88d0a7b5b4b0c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacelibrapid_1a5655d3d2d13515f121f88d0a7b5b4b0c" kindref="member">operator/</ref>(LHS<sp/>&amp;&amp;lhs,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RHS<sp/>&amp;&amp;rhs)<sp/><ref refid="config_8hpp_1aaa2763e652006648e9ae602dc1c56414" kindref="member">LIBRAPID_RELEASE_NOEXCEPT</ref></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;detail::Function&lt;<ref refid="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3a6d2adfdfd6f2a24cc46e5fdbb5679135" kindref="member">detail::Descriptor::Trivial</ref>,<sp/><ref refid="structlibrapid_1_1detail_1_1_divide" kindref="compound">detail::Divide</ref>,<sp/>LHS,<sp/>RHS&gt;<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(typetraits::IsSame&lt;typename<sp/>typetraits::TypeInfo&lt;std::decay_t&lt;LHS&gt;&gt;::Scalar,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structlibrapid_1_1typetraits_1_1_type_info" kindref="compound">typetraits::TypeInfo&lt;std::decay_t&lt;RHS&gt;</ref>&gt;::Scalar&gt;,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Operands<sp/>must<sp/>have<sp/>the<sp/>same<sp/>data<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1a69e316f2ab927d2834e632a12968e268" kindref="member">LIBRAPID_ASSERT</ref>(lhs.shape()<sp/>==<sp/>rhs.shape(),<sp/></highlight><highlight class="stringliteral">&quot;Shapes<sp/>must<sp/>be<sp/>equal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::makeFunction&lt;detail::Descriptor::Trivial,<sp/>detail::Divide&gt;(</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;LHS&gt;(lhs),<sp/>std::forward&lt;RHS&gt;(rhs));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>librapid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>LIBRAPID_ARRAY_OPERATIONS_HPP</highlight></codeline>
    </programlisting>
    <location file="librapid/include/librapid/array/operations.hpp"/>
  </compounddef>
</doxygen>
