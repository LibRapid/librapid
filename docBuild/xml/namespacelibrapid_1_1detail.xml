<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="namespacelibrapid_1_1detail" kind="namespace" language="C++">
    <compoundname>librapid::detail</compoundname>
    <innerclass refid="structlibrapid_1_1detail_1_1_divide" prot="public">librapid::detail::Divide</innerclass>
    <innerclass refid="classlibrapid_1_1detail_1_1_function" prot="public">librapid::detail::Function</innerclass>
    <innerclass refid="structlibrapid_1_1detail_1_1_minus" prot="public">librapid::detail::Minus</innerclass>
    <innerclass refid="structlibrapid_1_1detail_1_1_multiply" prot="public">librapid::detail::Multiply</innerclass>
    <innerclass refid="structlibrapid_1_1detail_1_1_plus" prot="public">librapid::detail::Plus</innerclass>
    <innerclass refid="classlibrapid_1_1detail_1_1_pre_main" prot="public">librapid::detail::PreMain</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3" prot="public" static="no" strong="yes">
        <type></type>
        <name>Descriptor</name>
        <qualifiedname>librapid::detail::Descriptor</qualifiedname>
        <enumvalue id="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3a6d2adfdfd6f2a24cc46e5fdbb5679135" prot="public">
          <name>Trivial</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3aaf70b1ac863830a4e1ce6268c8399f54" prot="public">
          <name>Transpose</name>
          <briefdescription>
<para>Operation is trivial and can be done with a vectorised loop. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3a3543268dcb012cef3d015e2f64983872" prot="public">
          <name>Matmul</name>
          <briefdescription>
<para>Operation is a matrix/array transposition. </para>
          </briefdescription>
          <detaileddescription>
<para>Operation is a matrix/array multiplication </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Identifies which type of function is being used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/forward.hpp" line="13" column="1" bodyfile="librapid/include/librapid/core/forward.hpp" bodystart="13" bodyend="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacelibrapid_1_1detail_1a5b88b14246f359e322c530eaa63f765a" prot="public" static="yes" mutable="no">
        <type><ref refid="classlibrapid_1_1detail_1_1_pre_main" kindref="compound">PreMain</ref></type>
        <definition>PreMain librapid::detail::preMain</definition>
        <argsstring></argsstring>
        <name>preMain</name>
        <qualifiedname>librapid::detail::preMain</qualifiedname>
        <initializer>= <ref refid="classlibrapid_1_1detail_1_1_pre_main" kindref="compound">PreMain</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/preMain.hpp" line="33" column="17" bodyfile="librapid/include/librapid/core/preMain.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacelibrapid_1_1detail_1afe5d9038d0369e6a867d04d8a604162b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ShapeType_</type>
          </param>
          <param>
            <type>typename StorageType_</type>
          </param>
          <param>
            <type>typename Functor_</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> void</type>
        <definition>LIBRAPID_ALWAYS_INLINE void librapid::detail::assign</definition>
        <argsstring>(ArrayContainer&lt; ShapeType_, StorageType_ &gt; &amp;lhs, const detail::Function&lt; Descriptor::Trivial, Functor_, Args... &gt; &amp;function)</argsstring>
        <name>assign</name>
        <qualifiedname>librapid::detail::assign</qualifiedname>
        <param>
          <type><ref refid="classlibrapid_1_1_array_container" kindref="compound">ArrayContainer</ref>&lt; ShapeType_, StorageType_ &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">detail::Function</ref>&lt; <ref refid="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3a6d2adfdfd6f2a24cc46e5fdbb5679135" kindref="member">Descriptor::Trivial</ref>, Functor_, Args... &gt; &amp;</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trivial array assignment operator <ndash/> assignment can be done with a single vectorised loop over contiguous data. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ShapeType_</parametername>
</parameternamelist>
<parameterdescription>
<para>The shape type of the array container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>StorageType_</parametername>
</parameternamelist>
<parameterdescription>
<para>The storage type of the array container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Functor_</parametername>
</parameternamelist>
<parameterdescription>
<para>The function type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument types of the function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The array container to assign to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to assign </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/assignOps.hpp" line="18" column="1" bodyfile="librapid/include/librapid/array/assignOps.hpp" bodystart="18" bodyend="39" declfile="librapid/include/librapid/core/forward.hpp" declline="24" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibrapid_1_1detail_1a9e9fc1b1f91fbf9bd69880cfa3e1086b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ShapeType_</type>
          </param>
          <param>
            <type>typename StorageType_</type>
          </param>
          <param>
            <type>typename Functor_</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> void</type>
        <definition>LIBRAPID_ALWAYS_INLINE void librapid::detail::assignParallel</definition>
        <argsstring>(ArrayContainer&lt; ShapeType_, StorageType_ &gt; &amp;lhs, const detail::Function&lt; Descriptor::Trivial, Functor_, Args... &gt; &amp;function)</argsstring>
        <name>assignParallel</name>
        <qualifiedname>librapid::detail::assignParallel</qualifiedname>
        <param>
          <type><ref refid="classlibrapid_1_1_array_container" kindref="compound">ArrayContainer</ref>&lt; ShapeType_, StorageType_ &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">detail::Function</ref>&lt; <ref refid="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3a6d2adfdfd6f2a24cc46e5fdbb5679135" kindref="member">Descriptor::Trivial</ref>, Functor_, Args... &gt; &amp;</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/assignOps.hpp" line="43" column="1" bodyfile="librapid/include/librapid/array/assignOps.hpp" bodystart="43" bodyend="66" declfile="librapid/include/librapid/core/forward.hpp" declline="29" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibrapid_1_1detail_1ad2e404dc0a775162d44e686c3fad8470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Descriptor</type>
            <declname>desc</declname>
            <defname>desc</defname>
          </param>
          <param>
            <type>typename Functor</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto librapid::detail::makeFunction</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>makeFunction</name>
        <qualifiedname>librapid::detail::makeFunction</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/operations.hpp" line="22" column="6" bodyfile="librapid/include/librapid/array/operations.hpp" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibrapid_1_1detail_1a11e070ff9bff272d31b81e32968eb9bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
        </templateparamlist>
        <type>std::allocator_traits&lt; A &gt;::pointer</type>
        <definition>std::allocator_traits&lt; A &gt;::pointer librapid::detail::safeAllocate</definition>
        <argsstring>(A &amp;alloc, typename std::allocator_traits&lt; A &gt;::size_type size)</argsstring>
        <name>safeAllocate</name>
        <qualifiedname>librapid::detail::safeAllocate</qualifiedname>
        <param>
          <type>A &amp;</type>
          <declname>alloc</declname>
        </param>
        <param>
          <type>typename std::allocator_traits&lt; A &gt;::size_type</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="150" column="1" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="150" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibrapid_1_1detail_1a084f703a1e80b9537324f2db3c713f4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void librapid::detail::safeDeallocate</definition>
        <argsstring>(A &amp;alloc, typename std::allocator_traits&lt; A &gt;::pointer ptr, typename std::allocator_traits&lt; A &gt;::size_type size)</argsstring>
        <name>safeDeallocate</name>
        <qualifiedname>librapid::detail::safeDeallocate</qualifiedname>
        <param>
          <type>A &amp;</type>
          <declname>alloc</declname>
        </param>
        <param>
          <type>typename std::allocator_traits&lt; A &gt;::pointer</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>typename std::allocator_traits&lt; A &gt;::size_type</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/storage.hpp" line="168" column="6" bodyfile="librapid/include/librapid/array/storage.hpp" bodystart="168" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibrapid_1_1detail_1a966dac3ffde86627510d37c264b7b0aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T librapid::detail::internalMax</definition>
        <argsstring>(T val)</argsstring>
        <name>internalMax</name>
        <qualifiedname>librapid::detail::internalMax</qualifiedname>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/preMain.hpp" line="23" column="3" bodyfile="librapid/include/librapid/core/preMain.hpp" bodystart="23" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibrapid_1_1detail_1abfb228b3a6fcbb72fd2e154750ac8f0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Tn</declname>
            <defname>Tn</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T librapid::detail::internalMax</definition>
        <argsstring>(T val, Tn... vals)</argsstring>
        <name>internalMax</name>
        <qualifiedname>librapid::detail::internalMax</qualifiedname>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>Tn...</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/preMain.hpp" line="28" column="3" bodyfile="librapid/include/librapid/core/preMain.hpp" bodystart="28" bodyend="31"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="librapid/include/librapid/array/assignOps.hpp" line="4" column="1"/>
  </compounddef>
</doxygen>
