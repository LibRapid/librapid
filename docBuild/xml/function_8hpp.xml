<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="function_8hpp" kind="file" language="C++">
    <compoundname>function.hpp</compoundname>
    <includedby refid="array_8hpp" local="yes">librapid/include/librapid/array/array.hpp</includedby>
    <invincdepgraph>
      <node id="2">
        <label>librapid/include/librapid/array/array.hpp</label>
        <link refid="array_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>librapid/include/librapid/array/function.hpp</label>
        <link refid="function_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>librapid/include/librapid/librapid.hpp</label>
        <link refid="librapid_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>librapid/src/global.cpp</label>
        <link refid="global_8cpp"/>
      </node>
      <node id="5">
        <label>librapid/src/helper_cuda.cpp</label>
        <link refid="helper__cuda_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_type_info_3_1_1librapid_1_1detail_1_1_function_3_01desc_00_01_f5351981e33274e591559f4e6573bf34c" prot="public">librapid::typetraits::TypeInfo&lt;::librapid::detail::Function&lt; desc, Functor_, Args... &gt; &gt;</innerclass>
    <innerclass refid="classlibrapid_1_1detail_1_1_function" prot="public">librapid::detail::Function</innerclass>
    <innernamespace refid="namespacelibrapid">librapid</innernamespace>
    <innernamespace refid="namespacelibrapid_1_1typetraits">librapid::typetraits</innernamespace>
    <innernamespace refid="namespacelibrapid_1_1detail">librapid::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>LIBRAPID_ARRAY_FUNCTION_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBRAPID_ARRAY_FUNCTION_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelibrapid" kindref="compound">librapid</ref><sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">typetraits<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<ref refid="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3" kindref="member">::librapid::detail::Descriptor</ref><sp/>desc,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Functor_,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="7" refid="structlibrapid_1_1typetraits_1_1_type_info_3_1_1librapid_1_1detail_1_1_function_3_01desc_00_01_f5351981e33274e591559f4e6573bf34c" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlibrapid_1_1typetraits_1_1_type_info" kindref="compound">TypeInfo</ref>&lt;::<ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">librapid::detail::Function</ref>&lt;desc,<sp/>Functor_,<sp/>Args...&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="8" refid="structlibrapid_1_1typetraits_1_1_type_info_3_1_1librapid_1_1detail_1_1_function_3_01desc_00_01_f5351981e33274e591559f4e6573bf34c_1a63d6254cc487d53602b945e5a0ab874e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structlibrapid_1_1typetraits_1_1_type_info_1a93c780cb9fe609cc8d60600ade8be78e" kindref="member">isLibRapidType</ref><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9" refid="structlibrapid_1_1typetraits_1_1_type_info_3_1_1librapid_1_1detail_1_1_function_3_01desc_00_01_f5351981e33274e591559f4e6573bf34c_1ada018c6c2463f8ba7e30e97e9f386b76" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structlibrapid_1_1typetraits_1_1_type_info_3_1_1librapid_1_1detail_1_1_function_3_01desc_00_01_f5351981e33274e591559f4e6573bf34c_1ada018c6c2463f8ba7e30e97e9f386b76" kindref="member">Scalar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::declval&lt;Functor_&gt;()(</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::declval&lt;typename<sp/>TypeInfo&lt;std::decay_t&lt;Args&gt;&gt;<ref refid="structlibrapid_1_1typetraits_1_1_type_info_1a3cd5cd03b89fb1c44c7f67da4345844f" kindref="member">::Scalar</ref>&gt;()...));</highlight></codeline>
<codeline lineno="11" refid="structlibrapid_1_1typetraits_1_1_type_info_3_1_1librapid_1_1detail_1_1_function_3_01desc_00_01_f5351981e33274e591559f4e6573bf34c_1aafcf3a271aa9184e71d812ed3291b2a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structlibrapid_1_1typetraits_1_1_type_info_1a89e7b8c75f13125a03933e69c080bcb1" kindref="member">supportsArithmetic</ref><sp/>=<sp/><ref refid="structlibrapid_1_1typetraits_1_1_type_info" kindref="compound">TypeInfo&lt;Scalar&gt;::supportsArithmetic</ref>;</highlight></codeline>
<codeline lineno="12" refid="structlibrapid_1_1typetraits_1_1_type_info_3_1_1librapid_1_1detail_1_1_function_3_01desc_00_01_f5351981e33274e591559f4e6573bf34c_1a3711e62aea3156d7a5a4d53df6468013" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structlibrapid_1_1typetraits_1_1_type_info_1a97330ae96c648abfa696245de2530bd9" kindref="member">supportsLogical</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="structlibrapid_1_1typetraits_1_1_type_info" kindref="compound">TypeInfo&lt;Scalar&gt;::supportsLogical</ref>;</highlight></codeline>
<codeline lineno="13" refid="structlibrapid_1_1typetraits_1_1_type_info_3_1_1librapid_1_1detail_1_1_function_3_01desc_00_01_f5351981e33274e591559f4e6573bf34c_1a062eede7dc92d278c0b01e96af8a5721" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structlibrapid_1_1typetraits_1_1_type_info_1adda9fc0b73c1c1faa4d0758f022857be" kindref="member">supportsBinary</ref><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="structlibrapid_1_1typetraits_1_1_type_info" kindref="compound">TypeInfo&lt;Scalar&gt;::supportsBinary</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>typetraits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Descriptor<sp/>is<sp/>defined<sp/>in<sp/>&quot;forward.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<ref refid="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3" kindref="member">Descriptor</ref><sp/>desc,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Functor_,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="21" refid="classlibrapid_1_1detail_1_1_function" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="23" refid="classlibrapid_1_1detail_1_1_function_1a69827cb8ddd45ea515c0815191e8db8e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Type</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref>&lt;desc,<sp/>Functor_,<sp/>Args...&gt;;</highlight></codeline>
<codeline lineno="24" refid="classlibrapid_1_1detail_1_1_function_1aea1f41e23e2e5c459378516c76380488" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1aea1f41e23e2e5c459378516c76380488" kindref="member">Functor</ref><sp/>=<sp/>Functor_;</highlight></codeline>
<codeline lineno="25" refid="classlibrapid_1_1detail_1_1_function_1a725266d0f0064f8b4f83ef5f19ef63bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a725266d0f0064f8b4f83ef5f19ef63bb" kindref="member">Scalar</ref><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structlibrapid_1_1typetraits_1_1_type_info_1a3cd5cd03b89fb1c44c7f67da4345844f" kindref="member">typetraits::TypeInfo&lt;Type&gt;::Scalar</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="classlibrapid_1_1detail_1_1_function_1aceae573d32b25ecbf4f638ddc8101dc8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1aceae573d32b25ecbf4f638ddc8101dc8" kindref="member">Packet</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structlibrapid_1_1typetraits_1_1_type_info_1a8d2a41c467170d21c7fe10f8eff48efa" kindref="member">typetraits::TypeInfo&lt;Scalar&gt;::Packet</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="classlibrapid_1_1detail_1_1_function_1a8d836a4f0dedc92fb2f24f4da7264945" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a8d836a4f0dedc92fb2f24f4da7264945" kindref="member">Function</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a8d836a4f0dedc92fb2f24f4da7264945" kindref="member">Function</ref>(<ref refid="classlibrapid_1_1detail_1_1_function_1aea1f41e23e2e5c459378516c76380488" kindref="member">Functor</ref><sp/>&amp;&amp;functor,<sp/>Args<sp/>&amp;&amp;...args);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="classlibrapid_1_1detail_1_1_function_1a57a0edd39c9b2021eaa30e56375777be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a57a0edd39c9b2021eaa30e56375777be" kindref="member">Function</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref><sp/>&amp;other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="classlibrapid_1_1detail_1_1_function_1a4bebb0f281c4d86dbddb1f76bb5089ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a4bebb0f281c4d86dbddb1f76bb5089ed" kindref="member">Function</ref>(<ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref><sp/>&amp;&amp;other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="classlibrapid_1_1detail_1_1_function_1ac0eeb297d4b6eb27c1f402e361ee4737" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref><sp/>&amp;<ref refid="classlibrapid_1_1detail_1_1_function_1ac0eeb297d4b6eb27c1f402e361ee4737" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref><sp/>&amp;other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="classlibrapid_1_1detail_1_1_function_1a3bea9389a7f62fe20d4c49f295970047" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref><sp/>&amp;<ref refid="classlibrapid_1_1detail_1_1_function_1a3bea9389a7f62fe20d4c49f295970047" kindref="member">operator=</ref>(<ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref><sp/>&amp;&amp;other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="classlibrapid_1_1detail_1_1_function_1abfe8002bf9608317b55db0471059ad41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1abfe8002bf9608317b55db0471059ad41" kindref="member">shape</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;0&gt;(<ref refid="classlibrapid_1_1detail_1_1_function_1a8ca0ed89151cb550a62f65a97f4253ff" kindref="member">m_args</ref>).shape();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1aceae573d32b25ecbf4f638ddc8101dc8" kindref="member">Packet</ref><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a8fb5be37c8760e2461877b5b6e5d5298" kindref="member">packet</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a725266d0f0064f8b4f83ef5f19ef63bb" kindref="member">Scalar</ref><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a3930166f66ecb486a1536cb2f483ea51" kindref="member">scalar</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>I&gt;</highlight></codeline>
<codeline lineno="75" refid="classlibrapid_1_1detail_1_1_function_1a1bdf8237ed138dcd75404f8c938f961c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1aceae573d32b25ecbf4f638ddc8101dc8" kindref="member">Packet</ref><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a1bdf8237ed138dcd75404f8c938f961c" kindref="member">packetImpl</ref>(std::index_sequence&lt;I...&gt;,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>I&gt;</highlight></codeline>
<codeline lineno="84" refid="classlibrapid_1_1detail_1_1_function_1a1d35cf48f85da25cffd9eba81b0cb0a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a725266d0f0064f8b4f83ef5f19ef63bb" kindref="member">Scalar</ref><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a1d35cf48f85da25cffd9eba81b0cb0a7" kindref="member">scalarImpl</ref>(std::index_sequence&lt;I...&gt;,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="classlibrapid_1_1detail_1_1_function_1aa2abd981f227ee1282990a70801016ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1aea1f41e23e2e5c459378516c76380488" kindref="member">Functor</ref><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1aa2abd981f227ee1282990a70801016ed" kindref="member">m_functor</ref>;</highlight></codeline>
<codeline lineno="88" refid="classlibrapid_1_1detail_1_1_function_1a8ca0ed89151cb550a62f65a97f4253ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tuple&lt;Args...&gt;<sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a8ca0ed89151cb550a62f65a97f4253ff" kindref="member">m_args</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<ref refid="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3" kindref="member">Descriptor</ref><sp/>desc,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="92" refid="classlibrapid_1_1detail_1_1_function_1a927c53fc12c1aa54aeaa94de5495b86f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a8d836a4f0dedc92fb2f24f4da7264945" kindref="member">Function&lt;desc, Functor, Args...&gt;::Function</ref>(<ref refid="classlibrapid_1_1detail_1_1_function_1aea1f41e23e2e5c459378516c76380488" kindref="member">Functor</ref><sp/>&amp;&amp;functor,<sp/>Args<sp/>&amp;&amp;...args)<sp/>:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_functor(std::forward&lt;<ref refid="classlibrapid_1_1detail_1_1_function_1aea1f41e23e2e5c459378516c76380488" kindref="member">Functor</ref>&gt;(functor)),<sp/>m_args(std::forward&lt;Args&gt;(args)...)<sp/>{}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<ref refid="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3" kindref="member">Descriptor</ref><sp/>desc,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref>&lt;desc,<sp/>Functor,<sp/>Args...&gt;::Packet</highlight></codeline>
<codeline lineno="97" refid="classlibrapid_1_1detail_1_1_function_1a8fb5be37c8760e2461877b5b6e5d5298" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a8fb5be37c8760e2461877b5b6e5d5298" kindref="member">Function&lt;desc, Functor, Args...&gt;::packet</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>packetImpl(std::make_index_sequence&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)&gt;(),<sp/>index);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<ref refid="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3" kindref="member">Descriptor</ref><sp/>desc,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>I&gt;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1detail_1_1_function" kindref="compound">Function</ref>&lt;desc,<sp/>Functor,<sp/>Args...&gt;::Packet</highlight></codeline>
<codeline lineno="104" refid="classlibrapid_1_1detail_1_1_function_1a4acb18e00e835662f0ecf6eb53664c3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a1bdf8237ed138dcd75404f8c938f961c" kindref="member">Function&lt;desc, Functor, Args...&gt;::packetImpl</ref>(std::index_sequence&lt;I...&gt;,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_functor.packet((std::get&lt;I&gt;(m_args).packet(index))...);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<ref refid="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3" kindref="member">Descriptor</ref><sp/>desc,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="110" refid="classlibrapid_1_1detail_1_1_function_1a3930166f66ecb486a1536cb2f483ea51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a3930166f66ecb486a1536cb2f483ea51" kindref="member">Function&lt;desc, Functor, Args...&gt;::scalar</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a725266d0f0064f8b4f83ef5f19ef63bb" kindref="member">Scalar</ref><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scalarImpl(std::make_index_sequence&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)&gt;(),<sp/>index);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<ref refid="namespacelibrapid_1_1detail_1acac64eb9d77033562afff081348c9ad3" kindref="member">Descriptor</ref><sp/>desc,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>I&gt;</highlight></codeline>
<codeline lineno="116" refid="classlibrapid_1_1detail_1_1_function_1a4d10cbe8d054e56838d55c3036acf10c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a1d35cf48f85da25cffd9eba81b0cb0a7" kindref="member">Function&lt;desc, Functor, Args...&gt;::scalarImpl</ref>(std::index_sequence&lt;I...&gt;,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="classlibrapid_1_1detail_1_1_function_1a725266d0f0064f8b4f83ef5f19ef63bb" kindref="member">Scalar</ref><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_functor((std::get&lt;I&gt;(m_args).scalar(index))...);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>librapid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>LIBRAPID_ARRAY_FUNCTION_HPP</highlight></codeline>
    </programlisting>
    <location file="librapid/include/librapid/array/function.hpp"/>
  </compounddef>
</doxygen>
