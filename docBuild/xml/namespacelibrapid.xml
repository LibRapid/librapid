<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="namespacelibrapid" kind="namespace" language="C++">
    <compoundname>librapid</compoundname>
    <innerclass refid="classlibrapid_1_1_array_container" prot="public">librapid::ArrayContainer</innerclass>
    <innerclass refid="classlibrapid_1_1_shape" prot="public">librapid::Shape</innerclass>
    <innerclass refid="classlibrapid_1_1_storage" prot="public">librapid::Storage</innerclass>
    <innernamespace refid="namespacelibrapid_1_1detail">librapid::detail</innernamespace>
    <innernamespace refid="namespacelibrapid_1_1device">librapid::device</innernamespace>
    <innernamespace refid="namespacelibrapid_1_1global">librapid::global</innernamespace>
    <innernamespace refid="namespacelibrapid_1_1typetraits">librapid::typetraits</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacelibrapid_1ace1856766f37ba615f6a0591b11efce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class LHS</type>
          </param>
          <param>
            <type>class RHS</type>
          </param>
        </templateparamlist>
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> auto</type>
        <definition>LIBRAPID_NODISCARD LIBRAPID_ALWAYS_INLINE auto librapid::operator+</definition>
        <argsstring>(LHS &amp;&amp;lhs, RHS &amp;&amp;rhs) LIBRAPID_RELEASE_NOEXCEPT -&gt; detail::Function&lt; detail::Descriptor::Trivial, detail::Plus, LHS, RHS &gt;</argsstring>
        <name>operator+</name>
        <qualifiedname>librapid::operator+</qualifiedname>
        <param>
          <type>LHS &amp;&amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>RHS &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Element-wise array addition. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs element-wise addition on two arrays. They must both be the same size and of the same data type.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>LHS</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the LHS element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RHS</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the RHS element </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The second array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The element-wise sum of the two arrays </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/operations.hpp" line="45" column="48" bodyfile="librapid/include/librapid/array/operations.hpp" bodystart="45" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibrapid_1a9276a515a5140503a5db45e01a2f2302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class LHS</type>
          </param>
          <param>
            <type>class RHS</type>
          </param>
        </templateparamlist>
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> auto</type>
        <definition>LIBRAPID_NODISCARD LIBRAPID_ALWAYS_INLINE auto librapid::operator-</definition>
        <argsstring>(LHS &amp;&amp;lhs, RHS &amp;&amp;rhs) LIBRAPID_RELEASE_NOEXCEPT -&gt; detail::Function&lt; detail::Descriptor::Trivial, detail::Minus, LHS, RHS &gt;</argsstring>
        <name>operator-</name>
        <qualifiedname>librapid::operator-</qualifiedname>
        <param>
          <type>LHS &amp;&amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>RHS &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Element-wise array subtraction. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs element-wise subtraction on two arrays. They must both be the same size and of the same data type.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>LHS</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the LHS element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RHS</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the RHS element </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The second array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The element-wise difference of the two arrays </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/operations.hpp" line="67" column="48" bodyfile="librapid/include/librapid/array/operations.hpp" bodystart="67" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibrapid_1a70f519a4a3c27718d1ec40b98a87c441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class LHS</type>
          </param>
          <param>
            <type>class RHS</type>
          </param>
        </templateparamlist>
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> auto</type>
        <definition>LIBRAPID_NODISCARD LIBRAPID_ALWAYS_INLINE auto librapid::operator*</definition>
        <argsstring>(LHS &amp;&amp;lhs, RHS &amp;&amp;rhs) LIBRAPID_RELEASE_NOEXCEPT -&gt; detail::Function&lt; detail::Descriptor::Trivial, detail::Multiply, LHS, RHS &gt;</argsstring>
        <name>operator*</name>
        <qualifiedname>librapid::operator*</qualifiedname>
        <param>
          <type>LHS &amp;&amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>RHS &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Element-wise array multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs element-wise multiplication on two arrays. They must both be the same size and of the same data type.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>LHS</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the LHS element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RHS</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the RHS element </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The second array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The element-wise product of the two arrays </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/operations.hpp" line="89" column="48" bodyfile="librapid/include/librapid/array/operations.hpp" bodystart="89" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibrapid_1a5655d3d2d13515f121f88d0a7b5b4b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class LHS</type>
          </param>
          <param>
            <type>class RHS</type>
          </param>
        </templateparamlist>
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref> auto</type>
        <definition>LIBRAPID_NODISCARD LIBRAPID_ALWAYS_INLINE auto librapid::operator/</definition>
        <argsstring>(LHS &amp;&amp;lhs, RHS &amp;&amp;rhs) LIBRAPID_RELEASE_NOEXCEPT -&gt; detail::Function&lt; detail::Descriptor::Trivial, detail::Divide, LHS, RHS &gt;</argsstring>
        <name>operator/</name>
        <qualifiedname>librapid::operator/</qualifiedname>
        <param>
          <type>LHS &amp;&amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>RHS &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Element-wise array division. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs element-wise division on two arrays. They must both be the same size and of the same data type.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>LHS</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the LHS element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RHS</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the RHS element </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The second array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The element-wise division of the two arrays </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/operations.hpp" line="111" column="48" bodyfile="librapid/include/librapid/array/operations.hpp" bodystart="111" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibrapid_1abddf27fef3beb213792f9fb0e92e00cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N1</declname>
            <defname>N1</defname>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Tn</declname>
            <defname>Tn</defname>
          </param>
          <param>
            <type>size_t...</type>
            <declname>Nn</declname>
            <defname>Nn</defname>
          </param>
        </templateparamlist>
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1a081e76ebcc44646fdd281550e21b1b03" kindref="member">LIBRAPID_INLINE</ref> bool</type>
        <definition>LIBRAPID_NODISCARD LIBRAPID_INLINE bool librapid::shapesMatch</definition>
        <argsstring>(const Shape&lt; T1, N1 &gt; &amp;first, const Shape&lt; T2, N2 &gt; &amp;second, const Shape&lt; Tn, Nn &gt; &amp;...shapes)</argsstring>
        <name>shapesMatch</name>
        <qualifiedname>librapid::shapesMatch</qualifiedname>
        <param>
          <type>const <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref>&lt; T1, N1 &gt; &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref>&lt; T2, N2 &gt; &amp;</type>
          <declname>second</declname>
        </param>
        <param>
          <type>const <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref>&lt; Tn, Nn &gt; &amp;...</type>
          <declname>shapes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if all inputs have the same shape <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T1</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the first input </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N1</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions of the first input </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T2</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the second input </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N2</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions of the second input </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Tn</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the remaining (optional) inputs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Nn</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions of the remaining (optional) inputs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>First input </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>second</parametername>
</parameternamelist>
<parameterdescription>
<para>Second input </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shapes</parametername>
</parameternamelist>
<parameterdescription>
<para>Remaining (optional) inputs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if all inputs have the same shape, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="264" column="41" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="264" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibrapid_1a76827c461ec514d13594865944a58aae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N1</declname>
            <defname>N1</defname>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Tn</declname>
            <defname>Tn</defname>
          </param>
          <param>
            <type>size_t...</type>
            <declname>Nn</declname>
            <defname>Nn</defname>
          </param>
        </templateparamlist>
        <type><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref> <ref refid="msvc_config_8hpp_1a081e76ebcc44646fdd281550e21b1b03" kindref="member">LIBRAPID_INLINE</ref> bool</type>
        <definition>LIBRAPID_NODISCARD LIBRAPID_INLINE bool librapid::shapesMatch</definition>
        <argsstring>(const std::tuple&lt; Shape&lt; T1, N1 &gt;, Shape&lt; T2, N2 &gt;, Shape&lt; Tn, Nn &gt;... &gt; &amp;shapes)</argsstring>
        <name>shapesMatch</name>
        <qualifiedname>librapid::shapesMatch</qualifiedname>
        <param>
          <type>const std::tuple&lt; <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref>&lt; T1, N1 &gt;, <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref>&lt; T2, N2 &gt;, <ref refid="classlibrapid_1_1_shape" kindref="compound">Shape</ref>&lt; Tn, Nn &gt;... &gt; &amp;</type>
          <declname>shapes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespacelibrapid_1abddf27fef3beb213792f9fb0e92e00cc" kindref="member">shapesMatch</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/array/sizetype.hpp" line="277" column="1" bodyfile="librapid/include/librapid/array/sizetype.hpp" bodystart="277" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibrapid_1afc8b880c6f0e7fb8691a10e45bcf3f8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T librapid::min</definition>
        <argsstring>(const T &amp;val)</argsstring>
        <name>min</name>
        <qualifiedname>librapid::min</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the smallest value of a given set of values <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Input set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Smallest element of the input set </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/math/coreMath.hpp" line="17" column="3" declfile="librapid/include/librapid/math/coreMath.hpp" declline="17" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibrapid_1afde6d24faa9b05f6a02640f9f007e83f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename First</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Rest</declname>
            <defname>Rest</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto librapid::min</definition>
        <argsstring>(const First &amp;first, const Rest &amp;...rest)</argsstring>
        <name>min</name>
        <qualifiedname>librapid::min</qualifiedname>
        <param>
          <type>const First &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const Rest &amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the smallest value of a given set of values <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Types</parametername>
</parameternamelist>
<parameterdescription>
<para>Data types of the input values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vals</parametername>
</parameternamelist>
<parameterdescription>
<para>Input values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The smallest element of the input values </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/math/coreMath.hpp" line="24" column="6" declfile="librapid/include/librapid/math/coreMath.hpp" declline="24" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="librapid/include/librapid/array/arrayContainer.hpp" line="4" column="1"/>
  </compounddef>
</doxygen>
