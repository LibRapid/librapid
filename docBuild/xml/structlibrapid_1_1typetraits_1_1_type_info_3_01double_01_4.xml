<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4" kind="struct" language="C++" prot="public">
    <compoundname>librapid::typetraits::TypeInfo&lt; double &gt;</compoundname>
    <includes refid="traits_8hpp" local="no">traits.hpp</includes>
    <templateparamlist>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1ad5fdb2491aeb8d892a3534d9ed8da2b6" prot="public" static="no">
        <type>double</type>
        <definition>using librapid::typetraits::TypeInfo&lt; double &gt;::Scalar =  double</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <qualifiedname>librapid::typetraits::TypeInfo&lt; double &gt;::Scalar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="302" column="1" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1a3c689b6176299e2b479d73259649646d" prot="public" static="no">
        <type>Vc::Vector&lt; double &gt;</type>
        <definition>using librapid::typetraits::TypeInfo&lt; double &gt;::Packet =  Vc::Vector&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>Packet</name>
        <qualifiedname>librapid::typetraits::TypeInfo&lt; double &gt;::Packet</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="303" column="1" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="303" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1afe1d243222f72a82fb4b6311775c25f8" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool librapid::typetraits::TypeInfo&lt; double &gt;::isLibRapidType</definition>
        <argsstring></argsstring>
        <name>isLibRapidType</name>
        <qualifiedname>librapid::typetraits::TypeInfo&lt; double &gt;::isLibRapidType</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="301" column="23" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1a63bbfaffc458cb12cb0ffd155c69c24d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t librapid::typetraits::TypeInfo&lt; double &gt;::packetWidth</definition>
        <argsstring></argsstring>
        <name>packetWidth</name>
        <qualifiedname>librapid::typetraits::TypeInfo&lt; double &gt;::packetWidth</qualifiedname>
        <initializer>= Packet::size()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="304" column="26" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1acb8ed9837599e57ba96966ec9bf3a71d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char librapid::typetraits::TypeInfo&lt; double &gt;::name[]</definition>
        <argsstring>[]</argsstring>
        <name>name</name>
        <qualifiedname>librapid::typetraits::TypeInfo&lt; double &gt;::name</qualifiedname>
        <initializer>= &quot;double&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="305" column="23" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1ab37c36621f622fd5a70dd6c1ae7a0a83" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool librapid::typetraits::TypeInfo&lt; double &gt;::supportsArithmetic</definition>
        <argsstring></argsstring>
        <name>supportsArithmetic</name>
        <qualifiedname>librapid::typetraits::TypeInfo&lt; double &gt;::supportsArithmetic</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="306" column="23" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1a69d12351e5dc270c6fa11c86d894f045" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool librapid::typetraits::TypeInfo&lt; double &gt;::supportsLogical</definition>
        <argsstring></argsstring>
        <name>supportsLogical</name>
        <qualifiedname>librapid::typetraits::TypeInfo&lt; double &gt;::supportsLogical</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="307" column="23" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1ae1673d3452519558b4016ee0d9debc5c" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool librapid::typetraits::TypeInfo&lt; double &gt;::supportsBinary</definition>
        <argsstring></argsstring>
        <name>supportsBinary</name>
        <qualifiedname>librapid::typetraits::TypeInfo&lt; double &gt;::supportsBinary</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="308" column="23" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1a205eacd99791c736daf440083e27394d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool librapid::typetraits::TypeInfo&lt; double &gt;::canAlign</definition>
        <argsstring></argsstring>
        <name>canAlign</name>
        <qualifiedname>librapid::typetraits::TypeInfo&lt; double &gt;::canAlign</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="314" column="23" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1a9b1dd2176f29e27efca4b36c111850f5" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool librapid::typetraits::TypeInfo&lt; double &gt;::canMemcpy</definition>
        <argsstring></argsstring>
        <name>canMemcpy</name>
        <qualifiedname>librapid::typetraits::TypeInfo&lt; double &gt;::canMemcpy</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="315" column="23" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="315" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="librapid/include/librapid/core/traits.hpp" line="300" column="1" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="300" bodyend="316"/>
    <listofallmembers>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1a205eacd99791c736daf440083e27394d" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo&lt; double &gt;</scope><name>canAlign</name></member>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1a9b1dd2176f29e27efca4b36c111850f5" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo&lt; double &gt;</scope><name>canMemcpy</name></member>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1afe1d243222f72a82fb4b6311775c25f8" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo&lt; double &gt;</scope><name>isLibRapidType</name></member>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1acb8ed9837599e57ba96966ec9bf3a71d" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo&lt; double &gt;</scope><name>name</name></member>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1a3c689b6176299e2b479d73259649646d" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo&lt; double &gt;</scope><name>Packet</name></member>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1a63bbfaffc458cb12cb0ffd155c69c24d" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo&lt; double &gt;</scope><name>packetWidth</name></member>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1ad5fdb2491aeb8d892a3534d9ed8da2b6" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo&lt; double &gt;</scope><name>Scalar</name></member>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1ab37c36621f622fd5a70dd6c1ae7a0a83" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo&lt; double &gt;</scope><name>supportsArithmetic</name></member>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1ae1673d3452519558b4016ee0d9debc5c" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo&lt; double &gt;</scope><name>supportsBinary</name></member>
      <member refid="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4_1a69d12351e5dc270c6fa11c86d894f045" prot="public" virt="non-virtual"><scope>librapid::typetraits::TypeInfo&lt; double &gt;</scope><name>supportsLogical</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
