<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="storage_8hpp" kind="file" language="C++">
    <compoundname>storage.hpp</compoundname>
    <includedby refid="array_8hpp" local="yes">librapid/include/librapid/array/array.hpp</includedby>
    <invincdepgraph>
      <node id="2">
        <label>librapid/include/librapid/array/array.hpp</label>
        <link refid="array_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>librapid/include/librapid/array/storage.hpp</label>
        <link refid="storage_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>librapid/include/librapid/librapid.hpp</label>
        <link refid="librapid_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>librapid/src/global.cpp</label>
        <link refid="global_8cpp"/>
      </node>
      <node id="5">
        <label>librapid/src/helper_cuda.cpp</label>
        <link refid="helper__cuda_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_type_info_3_01_storage_3_01_scalar___00_01_allocator___01_4_01_4" prot="public">librapid::typetraits::TypeInfo&lt; Storage&lt; Scalar_, Allocator_ &gt; &gt;</innerclass>
    <innerclass refid="classlibrapid_1_1_storage" prot="public">librapid::Storage</innerclass>
    <innernamespace refid="namespacelibrapid">librapid</innernamespace>
    <innernamespace refid="namespacelibrapid_1_1typetraits">librapid::typetraits</innernamespace>
    <innernamespace refid="namespacelibrapid_1_1detail">librapid::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>LIBRAPID_ARRAY_DENSE_STORAGE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBRAPID_ARRAY_DENSE_STORAGE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>defines<sp/>the<sp/>DenseStorage<sp/>class,<sp/>which<sp/>contains<sp/>a<sp/>contiguous</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>block<sp/>of<sp/>memory<sp/>of<sp/>a<sp/>single<sp/>data<sp/>type.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelibrapid" kindref="compound">librapid</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">typetraits<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar_,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator_&gt;</highlight></codeline>
<codeline lineno="12" refid="structlibrapid_1_1typetraits_1_1_type_info_3_01_storage_3_01_scalar___00_01_allocator___01_4_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlibrapid_1_1typetraits_1_1_type_info" kindref="compound">TypeInfo</ref>&lt;<ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref>&lt;Scalar_,<sp/>Allocator_&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="13" refid="structlibrapid_1_1typetraits_1_1_type_info_3_01_storage_3_01_scalar___00_01_allocator___01_4_01_4_1a74b040eb86889fa3420e990282a9a466" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structlibrapid_1_1typetraits_1_1_type_info_1a93c780cb9fe609cc8d60600ade8be78e" kindref="member">isLibRapidType</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14" refid="structlibrapid_1_1typetraits_1_1_type_info_3_01_storage_3_01_scalar___00_01_allocator___01_4_01_4_1ae0206bc9f8acf8b55cf485e6a47d7e7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structlibrapid_1_1typetraits_1_1_type_info_3_01_storage_3_01_scalar___00_01_allocator___01_4_01_4_1ae0206bc9f8acf8b55cf485e6a47d7e7a" kindref="member">Scalar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Scalar_;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>typetraits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar_,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator_<sp/>=<sp/>std::allocator&lt;Scalar_&gt;&gt;</highlight></codeline>
<codeline lineno="19" refid="classlibrapid_1_1_storage" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="21" refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Allocator_;</highlight></codeline>
<codeline lineno="22" refid="classlibrapid_1_1_storage_1a9d5007a5ffa2a949fad13b40d854fb05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1a9d5007a5ffa2a949fad13b40d854fb05" kindref="member">Scalar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Scalar_;</highlight></codeline>
<codeline lineno="23" refid="classlibrapid_1_1_storage_1a51802f024ed62b540bdf378451f00345" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1a51802f024ed62b540bdf378451f00345" kindref="member">Pointer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::allocator_traits&lt;Allocator&gt;::pointer;</highlight></codeline>
<codeline lineno="24" refid="classlibrapid_1_1_storage_1aed4d97613bb5fbc0e1c2cecabdbccc45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aed4d97613bb5fbc0e1c2cecabdbccc45" kindref="member">ConstPointer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::allocator_traits&lt;Allocator&gt;::const_pointer;</highlight></codeline>
<codeline lineno="25" refid="classlibrapid_1_1_storage_1aaa1c2d774c3b67e2ad1fbb48c3779fe3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aaa1c2d774c3b67e2ad1fbb48c3779fe3" kindref="member">Reference</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classlibrapid_1_1_storage_1a9d5007a5ffa2a949fad13b40d854fb05" kindref="member">Scalar</ref><sp/>&amp;;</highlight></codeline>
<codeline lineno="26" refid="classlibrapid_1_1_storage_1aa0592fffa9c2941a0ad0271b6ef32dba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aa0592fffa9c2941a0ad0271b6ef32dba" kindref="member">ConstReference</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1a9d5007a5ffa2a949fad13b40d854fb05" kindref="member">Scalar</ref><sp/>&amp;;</highlight></codeline>
<codeline lineno="27" refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::allocator_traits&lt;Allocator&gt;::size_type;</highlight></codeline>
<codeline lineno="28" refid="classlibrapid_1_1_storage_1afa2af71066e7b96ca42b07c3c8c18c3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1afa2af71066e7b96ca42b07c3c8c18c3a" kindref="member">DifferenceType</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::allocator_traits&lt;Allocator&gt;::difference_type;</highlight></codeline>
<codeline lineno="29" refid="classlibrapid_1_1_storage_1ae2054f1605894dd4397dc92ea3bc32d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1ae2054f1605894dd4397dc92ea3bc32d5" kindref="member">Iterator</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classlibrapid_1_1_storage_1a51802f024ed62b540bdf378451f00345" kindref="member">Pointer</ref>;</highlight></codeline>
<codeline lineno="30" refid="classlibrapid_1_1_storage_1aedd5efa91d2b0312ba095a046d4dba08" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aedd5efa91d2b0312ba095a046d4dba08" kindref="member">ConstIterator</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classlibrapid_1_1_storage_1aed4d97613bb5fbc0e1c2cecabdbccc45" kindref="member">ConstPointer</ref>;</highlight></codeline>
<codeline lineno="31" refid="classlibrapid_1_1_storage_1af637e0f4c6a7f298436e9a7aeeac8bf1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1af637e0f4c6a7f298436e9a7aeeac8bf1" kindref="member">ReverseIterator</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::reverse_iterator&lt;Iterator&gt;;</highlight></codeline>
<codeline lineno="32" refid="classlibrapid_1_1_storage_1a1f7674f95d175f258ab8de4bc3773dab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1a1f7674f95d175f258ab8de4bc3773dab" kindref="member">ConstReverseIterator</ref><sp/>=<sp/>std::reverse_iterator&lt;ConstIterator&gt;;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classlibrapid_1_1_storage_1a2236763dda1d80beda26bce3bfbad5c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1a2236763dda1d80beda26bce3bfbad5c7" kindref="member">Storage</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1a2236763dda1d80beda26bce3bfbad5c7" kindref="member">Storage</ref>(<ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/><ref refid="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" kindref="member">size</ref>,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref><sp/>&amp;alloc<sp/>=<sp/><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref>());</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1a2236763dda1d80beda26bce3bfbad5c7" kindref="member">Storage</ref>(<ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/><ref refid="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" kindref="member">size</ref>,<sp/><ref refid="classlibrapid_1_1_storage_1aa0592fffa9c2941a0ad0271b6ef32dba" kindref="member">ConstReference</ref><sp/>value,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref><sp/>&amp;alloc<sp/>=<sp/><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref>());</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1a2236763dda1d80beda26bce3bfbad5c7" kindref="member">Storage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref><sp/>&amp;other,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref><sp/>&amp;alloc<sp/>=<sp/><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref>());</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1a2236763dda1d80beda26bce3bfbad5c7" kindref="member">Storage</ref>(<ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref><sp/>&amp;&amp;other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="67" refid="classlibrapid_1_1_storage_1ad71195bfc1241bd16be6cbf33b7d84bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1ad71195bfc1241bd16be6cbf33b7d84bd" kindref="member">Storage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;V&gt;<sp/>&amp;list,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref><sp/>&amp;alloc<sp/>=<sp/><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref>());</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="75" refid="classlibrapid_1_1_storage_1a1be479e553cd8647347127790c61cb2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1a1be479e553cd8647347127790c61cb2c" kindref="member">Storage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;V&gt;<sp/>&amp;vec,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref><sp/>&amp;alloc<sp/>=<sp/><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref>());</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref><sp/>&amp;<ref refid="classlibrapid_1_1_storage_1a645549771b97c5a5fc50a425d9ca77d1" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref><sp/>&amp;other);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref><sp/>&amp;<ref refid="classlibrapid_1_1_storage_1a645549771b97c5a5fc50a425d9ca77d1" kindref="member">operator=</ref>(<ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref><sp/>&amp;&amp;other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1a72b91a469fd786401a1346b9baefaf55" kindref="member">~Storage</ref>();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1abe34d150799358f4c44af37da3189332" kindref="member">resize</ref>(<ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/>newSize);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1abe34d150799358f4c44af37da3189332" kindref="member">resize</ref>(<ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/>newSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/><ref refid="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" kindref="member">size</ref>()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="classlibrapid_1_1_storage_1a34cdd32ed8b67418b1f5833cdd031d64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1aa0592fffa9c2941a0ad0271b6ef32dba" kindref="member">ConstReference</ref><sp/>operator[](<ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/>index)<sp/>const;</highlight></codeline>
<codeline lineno="104" refid="classlibrapid_1_1_storage_1a526f7807802f8b951855860f06780045" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1aaa1c2d774c3b67e2ad1fbb48c3779fe3" kindref="member">Reference</ref><sp/>operator[](<ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/>index);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1ae2054f1605894dd4397dc92ea3bc32d5" kindref="member">Iterator</ref><sp/><ref refid="classlibrapid_1_1_storage_1aef7691919471d207ef78557d9a37f0c2" kindref="member">begin</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1ae2054f1605894dd4397dc92ea3bc32d5" kindref="member">Iterator</ref><sp/><ref refid="classlibrapid_1_1_storage_1af3a214fecd3ffa5d294b7b9889e9ef41" kindref="member">end</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1aedd5efa91d2b0312ba095a046d4dba08" kindref="member">ConstIterator</ref><sp/><ref refid="classlibrapid_1_1_storage_1aef7691919471d207ef78557d9a37f0c2" kindref="member">begin</ref>()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1aedd5efa91d2b0312ba095a046d4dba08" kindref="member">ConstIterator</ref><sp/><ref refid="classlibrapid_1_1_storage_1af3a214fecd3ffa5d294b7b9889e9ef41" kindref="member">end</ref>()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1aedd5efa91d2b0312ba095a046d4dba08" kindref="member">ConstIterator</ref><sp/><ref refid="classlibrapid_1_1_storage_1a8e2e56b1796868dd5adca39eccac83a6" kindref="member">cbegin</ref>()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1aedd5efa91d2b0312ba095a046d4dba08" kindref="member">ConstIterator</ref><sp/><ref refid="classlibrapid_1_1_storage_1ae980fea60c5e884582605a51ca1badbb" kindref="member">cend</ref>()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1af637e0f4c6a7f298436e9a7aeeac8bf1" kindref="member">ReverseIterator</ref><sp/><ref refid="classlibrapid_1_1_storage_1af0a1839336cfff8a77745f9a7237a7b7" kindref="member">rbegin</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1af637e0f4c6a7f298436e9a7aeeac8bf1" kindref="member">ReverseIterator</ref><sp/><ref refid="classlibrapid_1_1_storage_1aaf2aa5cb83cfd58e10d61ff1c286af51" kindref="member">rend</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1a1f7674f95d175f258ab8de4bc3773dab" kindref="member">ConstReverseIterator</ref><sp/><ref refid="classlibrapid_1_1_storage_1af0a1839336cfff8a77745f9a7237a7b7" kindref="member">rbegin</ref>()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1a1f7674f95d175f258ab8de4bc3773dab" kindref="member">ConstReverseIterator</ref><sp/><ref refid="classlibrapid_1_1_storage_1aaf2aa5cb83cfd58e10d61ff1c286af51" kindref="member">rend</ref>()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1a1f7674f95d175f258ab8de4bc3773dab" kindref="member">ConstReverseIterator</ref><sp/><ref refid="classlibrapid_1_1_storage_1a205da5497efe3755b06e34d362bcbd1f" kindref="member">crbegin</ref>()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_8hpp_1a75d0fe130ecba37781dedf98fb68bc0c" kindref="member">LIBRAPID_NODISCARD</ref><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/><ref refid="classlibrapid_1_1_storage_1a1f7674f95d175f258ab8de4bc3773dab" kindref="member">ConstReverseIterator</ref><sp/><ref refid="classlibrapid_1_1_storage_1a7ec5320264326a2a8086f6a078e18f47" kindref="member">crend</ref>()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>P&gt;</highlight></codeline>
<codeline lineno="130" refid="classlibrapid_1_1_storage_1ab591b416bc976b4967c517bfc20d425c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1ab591b416bc976b4967c517bfc20d425c" kindref="member">initData</ref>(P<sp/><ref refid="classlibrapid_1_1_storage_1aef7691919471d207ef78557d9a37f0c2" kindref="member">begin</ref>,<sp/>P<sp/><ref refid="classlibrapid_1_1_storage_1af3a214fecd3ffa5d294b7b9889e9ef41" kindref="member">end</ref>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1ab567015cb76707399a957d5fde29b679" kindref="member">resizeImpl</ref>(<ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/>newSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1ab567015cb76707399a957d5fde29b679" kindref="member">resizeImpl</ref>(<ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/>newSize);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="classlibrapid_1_1_storage_1a9577b6fb6ec67543dde646af00cdbd65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref><sp/><ref refid="classlibrapid_1_1_storage_1a9577b6fb6ec67543dde646af00cdbd65" kindref="member">m_allocator</ref>;</highlight></codeline>
<codeline lineno="143" refid="classlibrapid_1_1_storage_1aa0f73fc705805e7f1dffcd84e92ed64e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1a51802f024ed62b540bdf378451f00345" kindref="member">Pointer</ref><sp/><ref refid="classlibrapid_1_1_storage_1aa0f73fc705805e7f1dffcd84e92ed64e" kindref="member">m_begin</ref><sp/>=<sp/></highlight><highlight class="keywordtype">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>more<sp/>efficient<sp/>to<sp/>store<sp/>pointers<sp/>to<sp/>the<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="classlibrapid_1_1_storage_1a0b3782373c8380da31ea84e5c808bc93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1a51802f024ed62b540bdf378451f00345" kindref="member">Pointer</ref><sp/><ref refid="classlibrapid_1_1_storage_1a0b3782373c8380da31ea84e5c808bc93" kindref="member">m_end</ref><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordtype">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>and<sp/>end<sp/>of<sp/>the<sp/>data<sp/>block<sp/>than<sp/>to<sp/>store<sp/>the<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>namespace<sp/>detail<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::allocator_traits&lt;A&gt;::pointer</highlight></codeline>
<codeline lineno="150" refid="namespacelibrapid_1_1detail_1a11e070ff9bff272d31b81e32968eb9bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelibrapid_1_1detail_1a11e070ff9bff272d31b81e32968eb9bb" kindref="member">safeAllocate</ref>(A<sp/>&amp;alloc,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::allocator_traits&lt;A&gt;::size_type<sp/><ref refid="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Traits<sp/><sp/><sp/><sp/>=<sp/>std::allocator_traits&lt;A&gt;;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1a51802f024ed62b540bdf378451f00345" kindref="member">Pointer</ref><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::pointer;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ValueType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::value_type;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1a51802f024ed62b540bdf378451f00345" kindref="member">Pointer</ref><sp/>ptr<sp/><sp/><sp/><sp/><sp/>=<sp/>alloc.allocate(<ref refid="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>type<sp/>cannot<sp/>be<sp/>trivially<sp/>constructed,<sp/>we<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>each<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacelibrapid_1_1typetraits_1acde6527a5cda3f0e5879c473e83eb168" kindref="member">typetraits::TriviallyDefaultConstructible&lt;ValueType&gt;::value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classlibrapid_1_1_storage_1a51802f024ed62b540bdf378451f00345" kindref="member">Pointer</ref><sp/>p<sp/>=<sp/>ptr;<sp/>p<sp/>!=<sp/>ptr<sp/>+<sp/><ref refid="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" kindref="member">size</ref>;<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Traits::construct(alloc,<sp/>p,<sp/>ValueType());</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="168" refid="namespacelibrapid_1_1detail_1a084f703a1e80b9537324f2db3c713f4b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelibrapid_1_1detail_1a084f703a1e80b9537324f2db3c713f4b" kindref="member">safeDeallocate</ref>(A<sp/>&amp;alloc,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::allocator_traits&lt;A&gt;::pointer<sp/>ptr,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::allocator_traits&lt;A&gt;::size_type<sp/><ref refid="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Traits<sp/><sp/><sp/><sp/>=<sp/>std::allocator_traits&lt;A&gt;;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1a51802f024ed62b540bdf378451f00345" kindref="member">Pointer</ref><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::pointer;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ValueType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::value_type;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>type<sp/>cannot<sp/>be<sp/>trivially<sp/>destructed,<sp/>we<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>destroy<sp/>each<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacelibrapid_1_1typetraits_1acde6527a5cda3f0e5879c473e83eb168" kindref="member">typetraits::TriviallyDefaultConstructible&lt;ValueType&gt;::value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classlibrapid_1_1_storage_1a51802f024ed62b540bdf378451f00345" kindref="member">Pointer</ref><sp/>p<sp/>=<sp/>ptr;<sp/>p<sp/>!=<sp/>ptr<sp/>+<sp/><ref refid="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" kindref="member">size</ref>;<sp/>++p)<sp/>{<sp/>Traits::destroy(alloc,<sp/>p);<sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Traits::deallocate(alloc,<sp/>ptr,<sp/><ref refid="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="184" refid="classlibrapid_1_1_storage_1aa1dbdc875198f9c8a7f0bb5d3ff30c08" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1a2236763dda1d80beda26bce3bfbad5c7" kindref="member">Storage&lt;T, A&gt;::Storage</ref>(<ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/><ref refid="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref><sp/>&amp;alloc)<sp/>:<sp/><ref refid="classlibrapid_1_1_storage_1a9577b6fb6ec67543dde646af00cdbd65" kindref="member">m_allocator</ref>(alloc)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1aa0f73fc705805e7f1dffcd84e92ed64e" kindref="member">m_begin</ref><sp/>=<sp/><ref refid="namespacelibrapid_1_1detail_1a11e070ff9bff272d31b81e32968eb9bb" kindref="member">detail::safeAllocate</ref>(<ref refid="classlibrapid_1_1_storage_1a9577b6fb6ec67543dde646af00cdbd65" kindref="member">m_allocator</ref>,<sp/><ref refid="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1a0b3782373c8380da31ea84e5c808bc93" kindref="member">m_end</ref><sp/><sp/><sp/>=<sp/><ref refid="classlibrapid_1_1_storage_1aa0f73fc705805e7f1dffcd84e92ed64e" kindref="member">m_begin</ref><sp/>+<sp/><ref refid="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="190" refid="classlibrapid_1_1_storage_1a04a2785390c8a96fd6240bba73b77836" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1a2236763dda1d80beda26bce3bfbad5c7" kindref="member">Storage&lt;T, A&gt;::Storage</ref>(<ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/>size,<sp/><ref refid="classlibrapid_1_1_storage_1aa0592fffa9c2941a0ad0271b6ef32dba" kindref="member">ConstReference</ref><sp/>value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref><sp/>&amp;alloc)<sp/>:</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_allocator(alloc)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1aa0f73fc705805e7f1dffcd84e92ed64e" kindref="member">m_begin</ref><sp/>=<sp/><ref refid="namespacelibrapid_1_1detail_1a11e070ff9bff272d31b81e32968eb9bb" kindref="member">detail::safeAllocate</ref>(<ref refid="classlibrapid_1_1_storage_1a9577b6fb6ec67543dde646af00cdbd65" kindref="member">m_allocator</ref>,<sp/><ref refid="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1a0b3782373c8380da31ea84e5c808bc93" kindref="member">m_end</ref><sp/><sp/><sp/>=<sp/><ref refid="classlibrapid_1_1_storage_1aa0f73fc705805e7f1dffcd84e92ed64e" kindref="member">m_begin</ref><sp/>+<sp/><ref refid="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(<ref refid="classlibrapid_1_1_storage_1aa0f73fc705805e7f1dffcd84e92ed64e" kindref="member">m_begin</ref>,<sp/><ref refid="classlibrapid_1_1_storage_1a0b3782373c8380da31ea84e5c808bc93" kindref="member">m_end</ref>,<sp/>value);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="198" refid="classlibrapid_1_1_storage_1a426199dc669ec91e47acc00e21283915" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1a2236763dda1d80beda26bce3bfbad5c7" kindref="member">Storage&lt;T, A&gt;::Storage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref><sp/>&amp;other,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref><sp/>&amp;alloc)<sp/>:</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_allocator(alloc),<sp/>m_begin(nullptr),<sp/>m_end(nullptr)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1ab591b416bc976b4967c517bfc20d425c" kindref="member">initData</ref>(other.<ref refid="classlibrapid_1_1_storage_1aef7691919471d207ef78557d9a37f0c2" kindref="member">begin</ref>(),<sp/>other.<ref refid="classlibrapid_1_1_storage_1af3a214fecd3ffa5d294b7b9889e9ef41" kindref="member">end</ref>());</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="204" refid="classlibrapid_1_1_storage_1a9c24f4eeb279febb3a8f41a170ce0cb5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1a2236763dda1d80beda26bce3bfbad5c7" kindref="member">Storage&lt;T, A&gt;::Storage</ref>(<ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref><sp/>&amp;&amp;other)<sp/>noexcept<sp/>:</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_allocator(std::move(other.<ref refid="classlibrapid_1_1_storage_1a9577b6fb6ec67543dde646af00cdbd65" kindref="member">m_allocator</ref>)),<sp/>m_begin(other.<ref refid="classlibrapid_1_1_storage_1aa0f73fc705805e7f1dffcd84e92ed64e" kindref="member">m_begin</ref>),<sp/>m_end(other.<ref refid="classlibrapid_1_1_storage_1a0b3782373c8380da31ea84e5c808bc93" kindref="member">m_end</ref>)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.<ref refid="classlibrapid_1_1_storage_1aa0f73fc705805e7f1dffcd84e92ed64e" kindref="member">m_begin</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.<ref refid="classlibrapid_1_1_storage_1a0b3782373c8380da31ea84e5c808bc93" kindref="member">m_end</ref><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="212" refid="classlibrapid_1_1_storage_1a018cd63a7e0789ce40e8cb144a49d98b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1a2236763dda1d80beda26bce3bfbad5c7" kindref="member">Storage&lt;T, A&gt;::Storage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;V&gt;<sp/>&amp;list,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref><sp/>&amp;alloc)<sp/>:</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_allocator(alloc),<sp/>m_begin(nullptr),<sp/>m_end(nullptr)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1ab591b416bc976b4967c517bfc20d425c" kindref="member">initData</ref>(list.begin(),<sp/>list.end());</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="219" refid="classlibrapid_1_1_storage_1a8bec87e9cb26ae0c06d827fcb932bdfe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1a2236763dda1d80beda26bce3bfbad5c7" kindref="member">Storage&lt;T, A&gt;::Storage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;V&gt;<sp/>&amp;vector,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aec163f63def86c31242f97923dc18d88" kindref="member">Allocator</ref><sp/>&amp;alloc)<sp/>:</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_allocator(alloc),<sp/>m_begin(nullptr),<sp/>m_end(nullptr)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1ab591b416bc976b4967c517bfc20d425c" kindref="member">initData</ref>(vector.begin(),<sp/>vector.end());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="225" refid="classlibrapid_1_1_storage_1a645549771b97c5a5fc50a425d9ca77d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage" kindref="compound">Storage&lt;T, A&gt;</ref><sp/>&amp;<ref refid="classlibrapid_1_1_storage_1a645549771b97c5a5fc50a425d9ca77d1" kindref="member">Storage&lt;T, A&gt;::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref><sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_allocator<sp/>=</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::allocator_traits&lt;A&gt;::select_on_container_copy_construction(other.<ref refid="classlibrapid_1_1_storage_1a9577b6fb6ec67543dde646af00cdbd65" kindref="member">m_allocator</ref>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resizeImpl(other.<ref refid="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacelibrapid_1_1typetraits_1acde6527a5cda3f0e5879c473e83eb168" kindref="member">typetraits::TriviallyDefaultConstructible&lt;T&gt;::value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>slightly<sp/>faster<sp/>memcpy<sp/>if<sp/>the<sp/>type<sp/>is<sp/>trivially<sp/>default<sp/>constructible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_copy(other.<ref refid="classlibrapid_1_1_storage_1aef7691919471d207ef78557d9a37f0c2" kindref="member">begin</ref>(),<sp/>other.<ref refid="classlibrapid_1_1_storage_1af3a214fecd3ffa5d294b7b9889e9ef41" kindref="member">end</ref>(),<sp/>m_begin);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>use<sp/>the<sp/>standard<sp/>copy<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecxxblas_1a5301c325a16dd6cba3e48ac337ebb995" kindref="member">std::copy</ref>(other.<ref refid="classlibrapid_1_1_storage_1aef7691919471d207ef78557d9a37f0c2" kindref="member">begin</ref>(),<sp/>other.<ref refid="classlibrapid_1_1_storage_1af3a214fecd3ffa5d294b7b9889e9ef41" kindref="member">end</ref>(),<sp/>m_begin);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="242" refid="classlibrapid_1_1_storage_1ab59bc5d7b4eea3bb9aaa4ded12ee80e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage" kindref="compound">Storage&lt;T, A&gt;</ref><sp/>&amp;<ref refid="classlibrapid_1_1_storage_1a645549771b97c5a5fc50a425d9ca77d1" kindref="member">Storage&lt;T, A&gt;::operator=</ref>(<ref refid="classlibrapid_1_1_storage" kindref="compound">Storage</ref><sp/>&amp;&amp;other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_allocator<sp/>=<sp/>std::move(other.<ref refid="classlibrapid_1_1_storage_1a9577b6fb6ec67543dde646af00cdbd65" kindref="member">m_allocator</ref>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecxxblas_1a0d5308e62de64b9d010a29edfcea24be" kindref="member">std::swap</ref>(m_begin,<sp/>other.<ref refid="classlibrapid_1_1_storage_1aa0f73fc705805e7f1dffcd84e92ed64e" kindref="member">m_begin</ref>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecxxblas_1a0d5308e62de64b9d010a29edfcea24be" kindref="member">std::swap</ref>(m_end,<sp/>other.<ref refid="classlibrapid_1_1_storage_1a0b3782373c8380da31ea84e5c808bc93" kindref="member">m_end</ref>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="252" refid="classlibrapid_1_1_storage_1a72b91a469fd786401a1346b9baefaf55" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1a72b91a469fd786401a1346b9baefaf55" kindref="member">Storage&lt;T, A&gt;::~Storage</ref>()<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelibrapid_1_1detail_1a084f703a1e80b9537324f2db3c713f4b" kindref="member">detail::safeDeallocate</ref>(m_allocator,<sp/>m_begin,<sp/>size());</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_begin<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_end<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P&gt;</highlight></codeline>
<codeline lineno="260" refid="classlibrapid_1_1_storage_1af61284cfa7fa3349b55acd94df9d9029" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1ab591b416bc976b4967c517bfc20d425c" kindref="member">Storage&lt;T, A&gt;::initData</ref>(P<sp/>begin,<sp/>P<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::distance(begin,<sp/>end));</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_begin<sp/><sp/><sp/>=<sp/><ref refid="namespacelibrapid_1_1detail_1a11e070ff9bff272d31b81e32968eb9bb" kindref="member">detail::safeAllocate</ref>(m_allocator,<sp/>size);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_end<sp/><sp/><sp/><sp/><sp/>=<sp/>m_begin<sp/>+<sp/>size;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_copy(begin,<sp/>end,<sp/>m_begin);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="268" refid="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aadb39794ce4c7bba15a6cfe00cac2b41" kindref="member">Storage&lt;T, A&gt;::size</ref>()<sp/>const<sp/>noexcept<sp/>-&gt;<sp/><ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::distance(m_begin,<sp/>m_end));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="273" refid="classlibrapid_1_1_storage_1abe34d150799358f4c44af37da3189332" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1abe34d150799358f4c44af37da3189332" kindref="member">Storage&lt;T, A&gt;::resize</ref>(<ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/>newSize)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resizeImpl(newSize);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="278" refid="classlibrapid_1_1_storage_1ae846419d12d88d87a23f57e8349e8013" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1abe34d150799358f4c44af37da3189332" kindref="member">Storage&lt;T, A&gt;::resize</ref>(<ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/>newSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resizeImpl(newSize);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="283" refid="classlibrapid_1_1_storage_1a1964f9775fc9c02a73cefa66cfb009a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1ab567015cb76707399a957d5fde29b679" kindref="member">Storage&lt;T, A&gt;::resizeImpl</ref>(<ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/>newSize)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/>oldSize<sp/>=<sp/>size();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1a51802f024ed62b540bdf378451f00345" kindref="member">Pointer</ref><sp/>oldBegin<sp/>=<sp/>m_begin;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldSize<sp/>!=<sp/>newSize)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reallocate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_begin<sp/>=<sp/><ref refid="namespacelibrapid_1_1detail_1a11e070ff9bff272d31b81e32968eb9bb" kindref="member">detail::safeAllocate</ref>(m_allocator,<sp/>newSize);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_end<sp/><sp/><sp/>=<sp/>m_begin<sp/>+<sp/>newSize;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="namespacelibrapid_1_1typetraits_1acde6527a5cda3f0e5879c473e83eb168" kindref="member">typetraits::TriviallyDefaultConstructible&lt;T&gt;::value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>slightly<sp/>faster<sp/>memcpy<sp/>if<sp/>the<sp/>type<sp/>is<sp/>trivially<sp/>default<sp/>constructible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_copy(oldBegin,<sp/>oldBegin<sp/>+<sp/><ref refid="helper__math_8h_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(oldSize,<sp/>newSize),<sp/>m_begin);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>use<sp/>the<sp/>standard<sp/>copy<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecxxblas_1a5301c325a16dd6cba3e48ac337ebb995" kindref="member">std::copy</ref>(oldBegin,<sp/>oldBegin<sp/>+<sp/><ref refid="helper__math_8h_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(oldSize,<sp/>newSize),<sp/>m_begin);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelibrapid_1_1detail_1a084f703a1e80b9537324f2db3c713f4b" kindref="member">detail::safeDeallocate</ref>(m_allocator,<sp/>oldBegin,<sp/>oldSize);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="304" refid="classlibrapid_1_1_storage_1ab567015cb76707399a957d5fde29b679" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1acd79ad2b933a0d50ede7ea0f03486aef" kindref="member">LIBRAPID_ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1ab567015cb76707399a957d5fde29b679" kindref="member">Storage&lt;T, A&gt;::resizeImpl</ref>(<ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/>newSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">SizeType</ref><sp/>oldSize<sp/>=<sp/>size();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlibrapid_1_1_storage_1a51802f024ed62b540bdf378451f00345" kindref="member">Pointer</ref><sp/>oldBegin<sp/>=<sp/>m_begin;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldSize<sp/>!=<sp/>newSize)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reallocate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_begin<sp/>=<sp/><ref refid="namespacelibrapid_1_1detail_1a11e070ff9bff272d31b81e32968eb9bb" kindref="member">detail::safeAllocate</ref>(m_allocator,<sp/>newSize);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_end<sp/><sp/><sp/>=<sp/>m_begin<sp/>+<sp/>newSize;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelibrapid_1_1detail_1a084f703a1e80b9537324f2db3c713f4b" kindref="member">detail::safeDeallocate</ref>(m_allocator,<sp/>oldBegin,<sp/>oldSize);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1a34cdd32ed8b67418b1f5833cdd031d64" kindref="member">Storage&lt;T, A&gt;::operator[]</ref>(<ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">Storage&lt;T, A&gt;::SizeType</ref><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>ConstReference<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1a69e316f2ab927d2834e632a12968e268" kindref="member">LIBRAPID_ASSERT</ref>(index<sp/>&lt;<sp/>size(),<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_begin[index];</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1a34cdd32ed8b67418b1f5833cdd031d64" kindref="member">Storage&lt;T, A&gt;::operator[]</ref>(<ref refid="classlibrapid_1_1_storage_1a8ac1c579565b256766f32bc4b0ed1405" kindref="member">Storage&lt;T, A&gt;::SizeType</ref><sp/>index)<sp/>-&gt;<sp/>Reference<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="generic_config_8hpp_1a69e316f2ab927d2834e632a12968e268" kindref="member">LIBRAPID_ASSERT</ref>(index<sp/>&lt;<sp/>size(),<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_begin[index];</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="328" refid="classlibrapid_1_1_storage_1aef7691919471d207ef78557d9a37f0c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aef7691919471d207ef78557d9a37f0c2" kindref="member">Storage&lt;T, A&gt;::begin</ref>()<sp/>noexcept<sp/>-&gt;<sp/><ref refid="classlibrapid_1_1_storage_1ae2054f1605894dd4397dc92ea3bc32d5" kindref="member">Iterator</ref><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_begin;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="333" refid="classlibrapid_1_1_storage_1af3a214fecd3ffa5d294b7b9889e9ef41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1af3a214fecd3ffa5d294b7b9889e9ef41" kindref="member">Storage&lt;T, A&gt;::end</ref>()<sp/>noexcept<sp/>-&gt;<sp/><ref refid="classlibrapid_1_1_storage_1ae2054f1605894dd4397dc92ea3bc32d5" kindref="member">Iterator</ref><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_end;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="338" refid="classlibrapid_1_1_storage_1a8e455e95349f32acf46b942148fd80c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aef7691919471d207ef78557d9a37f0c2" kindref="member">Storage&lt;T, A&gt;::begin</ref>()<sp/>const<sp/>noexcept<sp/>-&gt;<sp/><ref refid="classlibrapid_1_1_storage_1aedd5efa91d2b0312ba095a046d4dba08" kindref="member">ConstIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_begin;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="343" refid="classlibrapid_1_1_storage_1adcfb992de759904c2584d84ed7355bb6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1af3a214fecd3ffa5d294b7b9889e9ef41" kindref="member">Storage&lt;T, A&gt;::end</ref>()<sp/>const<sp/>noexcept<sp/>-&gt;<sp/><ref refid="classlibrapid_1_1_storage_1aedd5efa91d2b0312ba095a046d4dba08" kindref="member">ConstIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_end;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="348" refid="classlibrapid_1_1_storage_1a8e2e56b1796868dd5adca39eccac83a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1a8e2e56b1796868dd5adca39eccac83a6" kindref="member">Storage&lt;T, A&gt;::cbegin</ref>()<sp/>const<sp/>noexcept<sp/>-&gt;<sp/><ref refid="classlibrapid_1_1_storage_1aedd5efa91d2b0312ba095a046d4dba08" kindref="member">ConstIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="353" refid="classlibrapid_1_1_storage_1ae980fea60c5e884582605a51ca1badbb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1ae980fea60c5e884582605a51ca1badbb" kindref="member">Storage&lt;T, A&gt;::cend</ref>()<sp/>const<sp/>noexcept<sp/>-&gt;<sp/><ref refid="classlibrapid_1_1_storage_1aedd5efa91d2b0312ba095a046d4dba08" kindref="member">ConstIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>end();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="358" refid="classlibrapid_1_1_storage_1af0a1839336cfff8a77745f9a7237a7b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1af0a1839336cfff8a77745f9a7237a7b7" kindref="member">Storage&lt;T, A&gt;::rbegin</ref>()<sp/>noexcept<sp/>-&gt;<sp/><ref refid="classlibrapid_1_1_storage_1af637e0f4c6a7f298436e9a7aeeac8bf1" kindref="member">ReverseIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1af637e0f4c6a7f298436e9a7aeeac8bf1" kindref="member">ReverseIterator</ref>(m_end);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="363" refid="classlibrapid_1_1_storage_1aaf2aa5cb83cfd58e10d61ff1c286af51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aaf2aa5cb83cfd58e10d61ff1c286af51" kindref="member">Storage&lt;T, A&gt;::rend</ref>()<sp/>noexcept<sp/>-&gt;<sp/><ref refid="classlibrapid_1_1_storage_1af637e0f4c6a7f298436e9a7aeeac8bf1" kindref="member">ReverseIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1af637e0f4c6a7f298436e9a7aeeac8bf1" kindref="member">ReverseIterator</ref>(m_begin);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="368" refid="classlibrapid_1_1_storage_1a62ea09193d0d0999cef59c0a078ae670" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1af0a1839336cfff8a77745f9a7237a7b7" kindref="member">Storage&lt;T, A&gt;::rbegin</ref>()<sp/>const<sp/>noexcept<sp/>-&gt;<sp/><ref refid="classlibrapid_1_1_storage_1a1f7674f95d175f258ab8de4bc3773dab" kindref="member">ConstReverseIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1a1f7674f95d175f258ab8de4bc3773dab" kindref="member">ConstReverseIterator</ref>(m_end);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="373" refid="classlibrapid_1_1_storage_1a33f9b69a2bd93a5e07de59891fabf084" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1aaf2aa5cb83cfd58e10d61ff1c286af51" kindref="member">Storage&lt;T, A&gt;::rend</ref>()<sp/>const<sp/>noexcept<sp/>-&gt;<sp/><ref refid="classlibrapid_1_1_storage_1a1f7674f95d175f258ab8de4bc3773dab" kindref="member">ConstReverseIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1a1f7674f95d175f258ab8de4bc3773dab" kindref="member">ConstReverseIterator</ref>(m_begin);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="378" refid="classlibrapid_1_1_storage_1a205da5497efe3755b06e34d362bcbd1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1a205da5497efe3755b06e34d362bcbd1f" kindref="member">Storage&lt;T, A&gt;::crbegin</ref>()<sp/>const<sp/>noexcept<sp/>-&gt;<sp/><ref refid="classlibrapid_1_1_storage_1a1f7674f95d175f258ab8de4bc3773dab" kindref="member">ConstReverseIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rbegin();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="383" refid="classlibrapid_1_1_storage_1a7ec5320264326a2a8086f6a078e18f47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classlibrapid_1_1_storage_1a7ec5320264326a2a8086f6a078e18f47" kindref="member">Storage&lt;T, A&gt;::crend</ref>()<sp/>const<sp/>noexcept<sp/>-&gt;<sp/><ref refid="classlibrapid_1_1_storage_1a1f7674f95d175f258ab8de4bc3773dab" kindref="member">ConstReverseIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rend();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>librapid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>LIBRAPID_ARRAY_DENSE_STORAGE_HPP</highlight></codeline>
    </programlisting>
    <location file="librapid/include/librapid/array/storage.hpp"/>
  </compounddef>
</doxygen>
