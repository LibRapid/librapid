<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="namespacelibrapid_1_1typetraits" kind="namespace" language="C++">
    <compoundname>librapid::typetraits</compoundname>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_can_cast" prot="public">librapid::typetraits::CanCast</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_has_addition" prot="public">librapid::typetraits::HasAddition</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_has_multiplication" prot="public">librapid::typetraits::HasMultiplication</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_has_subscript" prot="public">librapid::typetraits::HasSubscript</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_type_info" prot="public">librapid::typetraits::TypeInfo</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_type_info_3_01_array_container_3_01_shape_type___00_01_storage_type___01_4_01_4" prot="public">librapid::typetraits::TypeInfo&lt; ArrayContainer&lt; ShapeType_, StorageType_ &gt; &gt;</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_type_info_3_01bool_01_4" prot="public">librapid::typetraits::TypeInfo&lt; bool &gt;</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_type_info_3_01char_01_4" prot="public">librapid::typetraits::TypeInfo&lt; char &gt;</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_type_info_3_01double_01_4" prot="public">librapid::typetraits::TypeInfo&lt; double &gt;</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_type_info_3_01float_01_4" prot="public">librapid::typetraits::TypeInfo&lt; float &gt;</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_type_info_3_01int16__t_01_4" prot="public">librapid::typetraits::TypeInfo&lt; int16_t &gt;</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_type_info_3_01int32__t_01_4" prot="public">librapid::typetraits::TypeInfo&lt; int32_t &gt;</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_type_info_3_01int64__t_01_4" prot="public">librapid::typetraits::TypeInfo&lt; int64_t &gt;</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_type_info_3_01int8__t_01_4" prot="public">librapid::typetraits::TypeInfo&lt; int8_t &gt;</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_type_info_3_01_storage_3_01_scalar___00_01_allocator___01_4_01_4" prot="public">librapid::typetraits::TypeInfo&lt; Storage&lt; Scalar_, Allocator_ &gt; &gt;</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_type_info_3_01uint16__t_01_4" prot="public">librapid::typetraits::TypeInfo&lt; uint16_t &gt;</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_type_info_3_01uint32__t_01_4" prot="public">librapid::typetraits::TypeInfo&lt; uint32_t &gt;</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_type_info_3_01uint64__t_01_4" prot="public">librapid::typetraits::TypeInfo&lt; uint64_t &gt;</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_type_info_3_01uint8__t_01_4" prot="public">librapid::typetraits::TypeInfo&lt; uint8_t &gt;</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_type_info_3_1_1librapid_1_1detail_1_1_function_3_01desc_00_01_f5351981e33274e591559f4e6573bf34c" prot="public">librapid::typetraits::TypeInfo&lt;::librapid::detail::Function&lt; desc, Functor_, Args... &gt; &gt;</innerclass>
    <innernamespace refid="namespacelibrapid_1_1typetraits_1_1detail">librapid::typetraits::detail</innernamespace>
    <innernamespace refid="namespacelibrapid_1_1typetraits_1_1impl">librapid::typetraits::impl</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacelibrapid_1_1typetraits_1ab40d2f867f8f2c70d62af985f0c002d9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>Cond</declname>
            <defname>Cond</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>int</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; Cond, T &gt;</type>
        <definition>using librapid::typetraits::EnableIf = typedef std::enable_if_t&lt;Cond, T&gt;</definition>
        <argsstring></argsstring>
        <name>EnableIf</name>
        <qualifiedname>librapid::typetraits::EnableIf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/typetraits.hpp" line="11" column="1" bodyfile="librapid/include/librapid/core/typetraits.hpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacelibrapid_1_1typetraits_1acde6527a5cda3f0e5879c473e83eb168" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::is_trivially_default_constructible&lt; T &gt;</type>
        <definition>using librapid::typetraits::TriviallyDefaultConstructible = typedef std::is_trivially_default_constructible&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>TriviallyDefaultConstructible</name>
        <qualifiedname>librapid::typetraits::TriviallyDefaultConstructible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/typetraits.hpp" line="65" column="1" bodyfile="librapid/include/librapid/core/typetraits.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacelibrapid_1_1typetraits_1a6fc44dd4d430e7dc87b0a604ac6f5b27" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool librapid::typetraits::IsSame</definition>
        <argsstring></argsstring>
        <name>IsSame</name>
        <qualifiedname>librapid::typetraits::IsSame</qualifiedname>
        <initializer>= std::is_same&lt;A, B&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/typetraits.hpp" line="14" column="16" bodyfile="librapid/include/librapid/core/typetraits.hpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacelibrapid_1_1typetraits_1a1154585d4ba78602d51ea6b5d2b256a8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto librapid::typetraits::typeName</definition>
        <argsstring>() -&gt; std::string_view</argsstring>
        <name>typeName</name>
        <qualifiedname>librapid::typetraits::typeName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/include/librapid/core/traits.hpp" line="64" column="16" bodyfile="librapid/include/librapid/core/traits.hpp" bodystart="64" bodyend="67"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="librapid/include/librapid/array/arrayContainer.hpp" line="5" column="1"/>
  </compounddef>
</doxygen>
