<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="typetraits_8hpp" kind="file" language="C++">
    <compoundname>typetraits.hpp</compoundname>
    <includedby refid="core_8hpp" local="yes">librapid/include/librapid/core/core.hpp</includedby>
    <invincdepgraph>
      <node id="4">
        <label>librapid/cxxblas/cxxblas.cxx</label>
        <link refid="cxxblas_8cxx"/>
      </node>
      <node id="3">
        <label>librapid/cxxblas/cxxblas.h</label>
        <link refid="cxxblas_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>librapid/cxxblas/level1/dot.h</label>
        <link refid="level1_2dot_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>librapid/cxxblas/level1/level1.h</label>
        <link refid="level1_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>librapid/include/librapid/core/core.hpp</label>
        <link refid="core_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>librapid/include/librapid/core/typetraits.hpp</label>
        <link refid="typetraits_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>librapid/include/librapid/librapid.hpp</label>
        <link refid="librapid_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>librapid/src/global.cpp</label>
        <link refid="global_8cpp"/>
      </node>
      <node id="9">
        <label>librapid/src/helper_cuda.cpp</label>
        <link refid="helper__cuda_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_has_subscript" prot="public">librapid::typetraits::HasSubscript</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_has_addition" prot="public">librapid::typetraits::HasAddition</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_has_multiplication" prot="public">librapid::typetraits::HasMultiplication</innerclass>
    <innerclass refid="structlibrapid_1_1typetraits_1_1_can_cast" prot="public">librapid::typetraits::CanCast</innerclass>
    <innernamespace refid="namespacelibrapid">librapid</innernamespace>
    <innernamespace refid="namespacelibrapid_1_1typetraits">librapid::typetraits</innernamespace>
    <innernamespace refid="namespacelibrapid_1_1typetraits_1_1impl">librapid::typetraits::impl</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>LIBRAPID_CORE_TYPETRAITS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBRAPID_CORE_TYPETRAITS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Defines<sp/>a<sp/>range<sp/>of<sp/>helper<sp/>template<sp/>types<sp/>to<sp/>increase<sp/>code<sp/>clarity</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>while<sp/>simultaneously<sp/>reducing<sp/>code<sp/>verbosity.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelibrapid_1_1typetraits" kindref="compound">librapid::typetraits</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Cond,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="11" refid="namespacelibrapid_1_1typetraits_1ab40d2f867f8f2c70d62af985f0c002d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacelibrapid_1_1typetraits_1ab40d2f867f8f2c70d62af985f0c002d9" kindref="member">EnableIf</ref><sp/>=<sp/>std::enable_if_t&lt;Cond,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B&gt;</highlight></codeline>
<codeline lineno="14" refid="namespacelibrapid_1_1typetraits_1a6fc44dd4d430e7dc87b0a604ac6f5b27" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelibrapid_1_1typetraits_1a6fc44dd4d430e7dc87b0a604ac6f5b27" kindref="member">IsSame</ref><sp/>=<sp/>std::is_same&lt;A,<sp/>B&gt;::value;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="namespacelibrapid_1_1typetraits_1_1impl" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">impl<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>These<sp/>functions<sp/>test<sp/>for<sp/>the<sp/>presence<sp/>of<sp/>certain<sp/>features<sp/>of<sp/>a<sp/>type</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>by<sp/>providing<sp/>two<sp/>valid<sp/>function<sp/>overloads,<sp/>but<sp/>the<sp/>preferred<sp/>one</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(the<sp/>one<sp/>taking<sp/>an<sp/>integer)<sp/>is<sp/>only<sp/>valid<sp/>if<sp/>the<sp/>requested<sp/>feature</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>exists.<sp/>The<sp/>return<sp/>type<sp/>of<sp/>both<sp/>functions<sp/>differ,<sp/>and<sp/>can<sp/>be<sp/>evaluated</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>as<sp/>&quot;true&quot;<sp/>and<sp/>&quot;false&quot;<sp/>depending<sp/>on<sp/>the<sp/>presence<sp/>of<sp/>the<sp/>feature.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>is<sp/>really<sp/>cool<sp/>:)</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::declval&lt;T<sp/>&amp;&gt;()[std::declval&lt;Index&gt;()])&gt;</highlight></codeline>
<codeline lineno="29" refid="namespacelibrapid_1_1typetraits_1_1impl_1a10fe8ed5bc301fec64946591cdcd3398" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type<sp/><ref refid="namespacelibrapid_1_1typetraits_1_1impl_1a10fe8ed5bc301fec64946591cdcd3398" kindref="member">testSubscript</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index&gt;</highlight></codeline>
<codeline lineno="31" refid="namespacelibrapid_1_1typetraits_1_1impl_1a7005145040e6223139c5fadc51c68f7d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::false_type<sp/><ref refid="namespacelibrapid_1_1typetraits_1_1impl_1a10fe8ed5bc301fec64946591cdcd3398" kindref="member">testSubscript</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::declval&lt;T<sp/>&amp;&gt;()<sp/>+<sp/>std::declval&lt;V<sp/>&amp;&gt;())&gt;</highlight></codeline>
<codeline lineno="35" refid="namespacelibrapid_1_1typetraits_1_1impl_1a8979c0d42f06120b023f6f908fa4ce0e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type<sp/><ref refid="namespacelibrapid_1_1typetraits_1_1impl_1a8979c0d42f06120b023f6f908fa4ce0e" kindref="member">testAddition</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="37" refid="namespacelibrapid_1_1typetraits_1_1impl_1adfcb2dc45fd94c735592700e40897fde" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::false_type<sp/><ref refid="namespacelibrapid_1_1typetraits_1_1impl_1a8979c0d42f06120b023f6f908fa4ce0e" kindref="member">testAddition</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::declval&lt;T<sp/>&amp;&gt;()<sp/>*<sp/>std::declval&lt;V<sp/>&amp;&gt;())&gt;</highlight></codeline>
<codeline lineno="41" refid="namespacelibrapid_1_1typetraits_1_1impl_1a010526521848e8fce0c283d6d6da1a12" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type<sp/><ref refid="namespacelibrapid_1_1typetraits_1_1impl_1a010526521848e8fce0c283d6d6da1a12" kindref="member">testMultiplication</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="43" refid="namespacelibrapid_1_1typetraits_1_1impl_1a38ab6e28df13c02db6d0dfdd5da550fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::false_type<sp/><ref refid="namespacelibrapid_1_1typetraits_1_1impl_1a010526521848e8fce0c283d6d6da1a12" kindref="member">testMultiplication</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>From,<sp/>typename<sp/>To,<sp/>typename<sp/>=<sp/>decltype((From)std::declval&lt;From<sp/>&amp;&gt;())&gt;</highlight></codeline>
<codeline lineno="46" refid="namespacelibrapid_1_1typetraits_1_1impl_1a69e381454bd5edfca9462f5c88376c0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type<sp/><ref refid="namespacelibrapid_1_1typetraits_1_1impl_1a69e381454bd5edfca9462f5c88376c0a" kindref="member">testCast</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>From,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="48" refid="namespacelibrapid_1_1typetraits_1_1impl_1a2354c060489f0084633d106f44c54f5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::false_type<sp/><ref refid="namespacelibrapid_1_1typetraits_1_1impl_1a69e381454bd5edfca9462f5c88376c0a" kindref="member">testCast</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">64_t&gt;</highlight></codeline>
<codeline lineno="52" refid="structlibrapid_1_1typetraits_1_1_has_subscript" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlibrapid_1_1typetraits_1_1_has_subscript" kindref="compound">HasSubscript</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(impl::testSubscript&lt;T,<sp/>Index&gt;(1))<sp/>{};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V<sp/>=<sp/>T&gt;</highlight></codeline>
<codeline lineno="55" refid="structlibrapid_1_1typetraits_1_1_has_addition" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlibrapid_1_1typetraits_1_1_has_addition" kindref="compound">HasAddition</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(impl::testAddition&lt;T,<sp/>V&gt;(1))<sp/>{};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V<sp/>=<sp/>T&gt;</highlight></codeline>
<codeline lineno="58" refid="structlibrapid_1_1typetraits_1_1_has_multiplication" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlibrapid_1_1typetraits_1_1_has_multiplication" kindref="compound">HasMultiplication</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(impl::testMultiplication&lt;T,<sp/>V&gt;(1))<sp/>{};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>From,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="61" refid="structlibrapid_1_1typetraits_1_1_can_cast" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlibrapid_1_1typetraits_1_1_can_cast" kindref="compound">CanCast</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(impl::testCast&lt;From,<sp/>To&gt;(1))<sp/>{};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Detect<sp/>whether<sp/>a<sp/>class<sp/>can<sp/>be<sp/>default<sp/>constructed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="65" refid="namespacelibrapid_1_1typetraits_1acde6527a5cda3f0e5879c473e83eb168" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacelibrapid_1_1typetraits_1acde6527a5cda3f0e5879c473e83eb168" kindref="member">TriviallyDefaultConstructible</ref><sp/>=<sp/>std::is_trivially_default_constructible&lt;T&gt;;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>librapid::typetraits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>LIBRAPID_CORE_TYPETRAITS_HPP</highlight></codeline>
    </programlisting>
    <location file="librapid/include/librapid/core/typetraits.hpp"/>
  </compounddef>
</doxygen>
