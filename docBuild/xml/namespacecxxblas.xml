<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="namespacecxxblas" kind="namespace" language="C++">
    <compoundname>cxxblas</compoundname>
    <innerclass refid="structcxxblas_1_1_complex_trait" prot="public">cxxblas::ComplexTrait</innerclass>
    <innerclass refid="structcxxblas_1_1_complex_trait_3_01std_1_1complex_3_01_t_01_4_01_4" prot="public">cxxblas::ComplexTrait&lt; std::complex&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structcxxblas_1_1_if" prot="public">cxxblas::If</innerclass>
    <innerclass refid="structcxxblas_1_1_if_3_01int_01_4" prot="public">cxxblas::If&lt; int &gt;</innerclass>
    <innerclass refid="structcxxblas_1_1_if_3_01long_01_4" prot="public">cxxblas::If&lt; long &gt;</innerclass>
    <innerclass refid="structcxxblas_1_1_is_complex" prot="public">cxxblas::IsComplex</innerclass>
    <innerclass refid="structcxxblas_1_1_is_not_complex" prot="public">cxxblas::IsNotComplex</innerclass>
    <innerclass refid="structcxxblas_1_1_is_not_complex_3_01std_1_1complex_3_01_t_01_4_01_4" prot="public">cxxblas::IsNotComplex&lt; std::complex&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structcxxblas_1_1_is_same" prot="public">cxxblas::IsSame</innerclass>
    <innerclass refid="structcxxblas_1_1_is_same_3_01_t_01_4" prot="public">cxxblas::IsSame&lt; T &gt;</innerclass>
    <innerclass refid="structcxxblas_1_1_is_same_3_01_t_00_01_t_01_4" prot="public">cxxblas::IsSame&lt; T, T &gt;</innerclass>
    <innerclass refid="structcxxblas_1_1_is_same_3_01_t_00_01_t_00_01_args_8_8_8_01_4" prot="public">cxxblas::IsSame&lt; T, T, Args... &gt;</innerclass>
    <innerclass refid="structcxxblas_1_1_restrict_to" prot="public">cxxblas::RestrictTo</innerclass>
    <innerclass refid="structcxxblas_1_1_restrict_to_3_01true_00_01_t_01_4" prot="public">cxxblas::RestrictTo&lt; true, T &gt;</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" prot="public" static="no" strong="no">
        <type></type>
        <name>StorageOrder</name>
        <qualifiedname>cxxblas::StorageOrder</qualifiedname>
        <enumvalue id="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68a746c8afda1b7bb0f80c4853fde1edd05" prot="public">
          <name>RowMajor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68aad9cd0535867752083896cd2861cd907" prot="public">
          <name>ColMajor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/typedefs.h" line="46" column="1" bodyfile="librapid/cxxblas/typedefs.h" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" prot="public" static="no" strong="no">
        <type></type>
        <name>StorageUpLo</name>
        <qualifiedname>cxxblas::StorageUpLo</qualifiedname>
        <enumvalue id="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7a37aa39af32043a5cc803b7f391035393" prot="public">
          <name>Upper</name>
          <initializer>= &apos;U&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7a5d4f0e9e2ade8265626081ff772f3cd1" prot="public">
          <name>Lower</name>
          <initializer>= &apos;L&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/typedefs.h" line="48" column="1" bodyfile="librapid/cxxblas/typedefs.h" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" prot="public" static="no" strong="no">
        <type></type>
        <name>Diag</name>
        <qualifiedname>cxxblas::Diag</qualifiedname>
        <enumvalue id="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6aea4d8eafe201686e94642101b3be8163" prot="public">
          <name>Unit</name>
          <initializer>= &apos;U&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6a82be9b897400986d48ea221e4a837b2d" prot="public">
          <name>NonUnit</name>
          <initializer>= &apos;N&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/typedefs.h" line="50" column="1" bodyfile="librapid/cxxblas/typedefs.h" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecxxblas_1a3321b2c6f9fc9d90f6c3d502a999d947" prot="public" static="no" strong="no">
        <type></type>
        <name>Side</name>
        <qualifiedname>cxxblas::Side</qualifiedname>
        <enumvalue id="namespacecxxblas_1a3321b2c6f9fc9d90f6c3d502a999d947ab2dc76441030cc13b9fbb2b65fd953fc" prot="public">
          <name>Left</name>
          <initializer>= &apos;L&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecxxblas_1a3321b2c6f9fc9d90f6c3d502a999d947a49f14d940c2e0e526a3a53a739dffe7e" prot="public">
          <name>Right</name>
          <initializer>= &apos;R&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/typedefs.h" line="52" column="1" bodyfile="librapid/cxxblas/typedefs.h" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecxxblas_1a710044b98080b10301734289c63b1e30" prot="public" static="no" strong="no">
        <type></type>
        <name>Transpose</name>
        <qualifiedname>cxxblas::Transpose</qualifiedname>
        <enumvalue id="namespacecxxblas_1a710044b98080b10301734289c63b1e30a6ff86ac122ab2d5a805c768d29a15809" prot="public">
          <name>NoTrans</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecxxblas_1a710044b98080b10301734289c63b1e30aaadde075a6e8b482fa14d032cd54f64b" prot="public">
          <name>Conj</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecxxblas_1a710044b98080b10301734289c63b1e30a0f956f88c118f2f3b478474693315722" prot="public">
          <name>Trans</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecxxblas_1a710044b98080b10301734289c63b1e30a1c689914790d2fe73f783b40657eaec0" prot="public">
          <name>ConjTrans</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/typedefs.h" line="54" column="1" bodyfile="librapid/cxxblas/typedefs.h" bodystart="54" bodyend="54"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacecxxblas_1a0aa58e56aafd7cc3e106560ba53a7d68" prot="public" static="no">
        <type>std::complex&lt; float &gt;</type>
        <definition>typedef std::complex&lt;float&gt; cxxblas::ComplexFloat</definition>
        <argsstring></argsstring>
        <name>ComplexFloat</name>
        <qualifiedname>cxxblas::ComplexFloat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/typedefs.h" line="42" column="22" bodyfile="librapid/cxxblas/typedefs.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecxxblas_1a3745a448677a66aa383ccc8bf3d09716" prot="public" static="no">
        <type>std::complex&lt; double &gt;</type>
        <definition>typedef std::complex&lt;double&gt; cxxblas::ComplexDouble</definition>
        <argsstring></argsstring>
        <name>ComplexDouble</name>
        <qualifiedname>cxxblas::ComplexDouble</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/typedefs.h" line="43" column="22" bodyfile="librapid/cxxblas/typedefs.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacecxxblas_1a474f34e884dba1e0cf4add8f152262e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structcxxblas_1_1_restrict_to" kindref="compound">cxxblas::RestrictTo</ref>&lt; std::is_arithmetic&lt; T &gt;::value, constT &amp; &gt;::Type</type>
        <definition>cxxblas::RestrictTo&lt; std::is_arithmetic&lt; T &gt;::value, constT &amp; &gt;::Type cxxblas::conjugate</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>conjugate</name>
        <qualifiedname>cxxblas::conjugate</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/auxiliary/complex.h" line="43" column="1" declfile="librapid/cxxblas/auxiliary/complex.h" declline="43" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a00ad52895d2c9e7bdf1a45da3544555d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structcxxblas_1_1_restrict_to" kindref="compound">cxxblas::RestrictTo</ref>&lt; std::is_arithmetic&lt; T &gt;::value, std::complex&lt; T &gt; &gt;::Type</type>
        <definition>cxxblas::RestrictTo&lt; std::is_arithmetic&lt; T &gt;::value, std::complex&lt; T &gt; &gt;::Type cxxblas::conjugate</definition>
        <argsstring>(const std::complex&lt; T &gt; &amp;x)</argsstring>
        <name>conjugate</name>
        <qualifiedname>cxxblas::conjugate</qualifiedname>
        <param>
          <type>const std::complex&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/auxiliary/complex.h" line="47" column="1" declfile="librapid/cxxblas/auxiliary/complex.h" declline="47" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a3d275b0495109a8b14abd9033f12be4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structcxxblas_1_1_restrict_to" kindref="compound">cxxblas::RestrictTo</ref>&lt; std::is_arithmetic&lt; T &gt;::value, constT &amp; &gt;::Type</type>
        <definition>cxxblas::RestrictTo&lt; std::is_arithmetic&lt; T &gt;::value, constT &amp; &gt;::Type cxxblas::real</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>real</name>
        <qualifiedname>cxxblas::real</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/auxiliary/complex.h" line="50" column="38" declfile="librapid/cxxblas/auxiliary/complex.h" declline="50" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a220d587643d2b96498ef5bb68abffa96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structcxxblas_1_1_restrict_to" kindref="compound">cxxblas::RestrictTo</ref>&lt; std::is_arithmetic&lt; T &gt;::value, constT &gt;::Type</type>
        <definition>cxxblas::RestrictTo&lt; std::is_arithmetic&lt; T &gt;::value, constT &gt;::Type cxxblas::real</definition>
        <argsstring>(const std::complex&lt; T &gt; &amp;x)</argsstring>
        <name>real</name>
        <qualifiedname>cxxblas::real</qualifiedname>
        <param>
          <type>const std::complex&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/auxiliary/complex.h" line="54" column="1" declfile="librapid/cxxblas/auxiliary/complex.h" declline="54" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ae82659a87bf6e9fe546012726a9621bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structcxxblas_1_1_restrict_to" kindref="compound">cxxblas::RestrictTo</ref>&lt; std::is_arithmetic&lt; T &gt;::value, constT &gt;::Type</type>
        <definition>cxxblas::RestrictTo&lt; std::is_arithmetic&lt; T &gt;::value, constT &gt;::Type cxxblas::imag</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>imag</name>
        <qualifiedname>cxxblas::imag</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/auxiliary/complex.h" line="57" column="38" declfile="librapid/cxxblas/auxiliary/complex.h" declline="57" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1abc878e93f25954e71c1d7d311e5c1d7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structcxxblas_1_1_restrict_to" kindref="compound">cxxblas::RestrictTo</ref>&lt; std::is_arithmetic&lt; T &gt;::value, constT &gt;::Type</type>
        <definition>cxxblas::RestrictTo&lt; std::is_arithmetic&lt; T &gt;::value, constT &gt;::Type cxxblas::imag</definition>
        <argsstring>(const std::complex&lt; T &gt; &amp;x)</argsstring>
        <name>imag</name>
        <qualifiedname>cxxblas::imag</qualifiedname>
        <param>
          <type>const std::complex&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/auxiliary/complex.h" line="61" column="1" declfile="librapid/cxxblas/auxiliary/complex.h" declline="61" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a57cfcc008948e3c8df22f86cb6e671d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T cxxblas::abs1</definition>
        <argsstring>(const std::complex&lt; T &gt; &amp;x)</argsstring>
        <name>abs1</name>
        <qualifiedname>cxxblas::abs1</qualifiedname>
        <param>
          <type>const std::complex&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/auxiliary/complex.h" line="64" column="3" declfile="librapid/cxxblas/auxiliary/complex.h" declline="64" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a8961e0a9acd6aa1dae9dd36c04ec8649" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structcxxblas_1_1_restrict_to" kindref="compound">RestrictTo</ref>&lt; <ref refid="structcxxblas_1_1_is_same" kindref="compound">IsSame</ref>&lt; T, int &gt;::value, T &gt;::Type</type>
        <definition>RestrictTo&lt; IsSame&lt; T, int &gt;::value, T &gt;::Type cxxblas::pow</definition>
        <argsstring>(const T &amp;base, const T &amp;exponent)</argsstring>
        <name>pow</name>
        <qualifiedname>cxxblas::pow</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/auxiliary/pow.h" line="48" column="29" declfile="librapid/cxxblas/auxiliary/pow.h" declline="48" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1afb01362b28c7c964b8b34b8d29f5abde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structcxxblas_1_1_restrict_to" kindref="compound">RestrictTo</ref>&lt;!<ref refid="structcxxblas_1_1_is_same" kindref="compound">IsSame</ref>&lt; T, int &gt;::value &amp;&amp;!<ref refid="structcxxblas_1_1_is_complex" kindref="compound">IsComplex</ref>&lt; T &gt;::value, T &gt;::Type</type>
        <definition>RestrictTo&lt;!IsSame&lt; T, int &gt;::value &amp;&amp;!IsComplex&lt; T &gt;::value, T &gt;::Type cxxblas::pow</definition>
        <argsstring>(const T &amp;base, int exponent)</argsstring>
        <name>pow</name>
        <qualifiedname>cxxblas::pow</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/auxiliary/pow.h" line="57" column="30" declfile="librapid/cxxblas/auxiliary/pow.h" declline="57" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ae42b0b500646d70657827ef160849448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::complex&lt; T &gt;</type>
        <definition>std::complex&lt; T &gt; cxxblas::pow</definition>
        <argsstring>(const std::complex&lt; T &gt; &amp;base, int exponent)</argsstring>
        <name>pow</name>
        <qualifiedname>cxxblas::pow</qualifiedname>
        <param>
          <type>const std::complex&lt; T &gt; &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/auxiliary/pow.h" line="62" column="14" declfile="librapid/cxxblas/auxiliary/pow.h" declline="62" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1af90758661694282ee9516470d96c0887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CHAR</type>
          </param>
        </templateparamlist>
        <type>const CHAR *</type>
        <definition>const CHAR * cxxblas::blasImpl</definition>
        <argsstring>()</argsstring>
        <name>blasImpl</name>
        <qualifiedname>cxxblas::blasImpl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/drivers/drivers.h" line="67" column="12" declfile="librapid/cxxblas/drivers/drivers.h" declline="67" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1abb65f6752487d758ce2be8e30e10202a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ENUM</type>
          </param>
        </templateparamlist>
        <type><ref refid="structcxxblas_1_1_restrict_to" kindref="compound">RestrictTo</ref>&lt; <ref refid="structcxxblas_1_1_is_same" kindref="compound">IsSame</ref>&lt; ENUM, <ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref> &gt;::value, char &gt;::Type</type>
        <definition>RestrictTo&lt; IsSame&lt; ENUM, Transpose &gt;::value, char &gt;::Type cxxblas::getF77BlasChar</definition>
        <argsstring>(ENUM trans)</argsstring>
        <name>getF77BlasChar</name>
        <qualifiedname>cxxblas::getF77BlasChar</qualifiedname>
        <param>
          <type>ENUM</type>
          <declname>trans</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/drivers/drivers.h" line="86" column="29" declfile="librapid/cxxblas/drivers/drivers.h" declline="86" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a2e912f6be2475ad21be3f52ec9b5fc20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ENUM</type>
          </param>
        </templateparamlist>
        <type><ref refid="structcxxblas_1_1_restrict_to" kindref="compound">RestrictTo</ref>&lt; <ref refid="structcxxblas_1_1_is_same" kindref="compound">IsSame</ref>&lt; ENUM, <ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref> &gt;::value, char &gt;::Type</type>
        <definition>RestrictTo&lt; IsSame&lt; ENUM, Diag &gt;::value, char &gt;::Type cxxblas::getF77BlasChar</definition>
        <argsstring>(ENUM diag)</argsstring>
        <name>getF77BlasChar</name>
        <qualifiedname>cxxblas::getF77BlasChar</qualifiedname>
        <param>
          <type>ENUM</type>
          <declname>diag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/drivers/drivers.h" line="89" column="29" declfile="librapid/cxxblas/drivers/drivers.h" declline="89" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a6fa84144e95aeddbc38c7718b8123499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ENUM</type>
          </param>
        </templateparamlist>
        <type><ref refid="structcxxblas_1_1_restrict_to" kindref="compound">RestrictTo</ref>&lt; <ref refid="structcxxblas_1_1_is_same" kindref="compound">IsSame</ref>&lt; ENUM, <ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref> &gt;::value, char &gt;::Type</type>
        <definition>RestrictTo&lt; IsSame&lt; ENUM, StorageUpLo &gt;::value, char &gt;::Type cxxblas::getF77BlasChar</definition>
        <argsstring>(ENUM upLo)</argsstring>
        <name>getF77BlasChar</name>
        <qualifiedname>cxxblas::getF77BlasChar</qualifiedname>
        <param>
          <type>ENUM</type>
          <declname>upLo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/drivers/drivers.h" line="92" column="29" declfile="librapid/cxxblas/drivers/drivers.h" declline="92" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1aa5cec6414633269a7d1de92637bee039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ENUM</type>
          </param>
        </templateparamlist>
        <type><ref refid="structcxxblas_1_1_restrict_to" kindref="compound">RestrictTo</ref>&lt; <ref refid="structcxxblas_1_1_is_same" kindref="compound">IsSame</ref>&lt; ENUM, <ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref> &gt;::value, <ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref> &gt;::Type</type>
        <definition>RestrictTo&lt; IsSame&lt; ENUM, Transpose &gt;::value, Transpose &gt;::Type cxxblas::getCxxBlasEnum</definition>
        <argsstring>(char trans)</argsstring>
        <name>getCxxBlasEnum</name>
        <qualifiedname>cxxblas::getCxxBlasEnum</qualifiedname>
        <param>
          <type>char</type>
          <declname>trans</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/drivers/drivers.h" line="96" column="29" declfile="librapid/cxxblas/drivers/drivers.h" declline="96" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1abd2de56f837a3338235ec32c5fd64f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ENUM</type>
          </param>
        </templateparamlist>
        <type><ref refid="structcxxblas_1_1_restrict_to" kindref="compound">RestrictTo</ref>&lt; <ref refid="structcxxblas_1_1_is_same" kindref="compound">IsSame</ref>&lt; ENUM, <ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref> &gt;::value, <ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref> &gt;::Type</type>
        <definition>RestrictTo&lt; IsSame&lt; ENUM, Diag &gt;::value, Diag &gt;::Type cxxblas::getCxxBlasEnum</definition>
        <argsstring>(char diag)</argsstring>
        <name>getCxxBlasEnum</name>
        <qualifiedname>cxxblas::getCxxBlasEnum</qualifiedname>
        <param>
          <type>char</type>
          <declname>diag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/drivers/drivers.h" line="99" column="29" declfile="librapid/cxxblas/drivers/drivers.h" declline="99" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a9d2990c6095e23948174dece35a3e17c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ENUM</type>
          </param>
        </templateparamlist>
        <type><ref refid="structcxxblas_1_1_restrict_to" kindref="compound">RestrictTo</ref>&lt; <ref refid="structcxxblas_1_1_is_same" kindref="compound">IsSame</ref>&lt; ENUM, <ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref> &gt;::value, <ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref> &gt;::Type</type>
        <definition>RestrictTo&lt; IsSame&lt; ENUM, StorageUpLo &gt;::value, StorageUpLo &gt;::Type cxxblas::getCxxBlasEnum</definition>
        <argsstring>(char upLo)</argsstring>
        <name>getCxxBlasEnum</name>
        <qualifiedname>cxxblas::getCxxBlasEnum</qualifiedname>
        <param>
          <type>char</type>
          <declname>upLo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/drivers/drivers.h" line="103" column="1" declfile="librapid/cxxblas/drivers/drivers.h" declline="103" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a40137bd5541db32eee00eae763621783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::asum</definition>
        <argsstring>(IndexType n, const X *x, IndexType incX, T &amp;absSum)</argsstring>
        <name>asum</name>
        <qualifiedname>cxxblas::asum</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>absSum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1/asum.h" line="44" column="6" declfile="librapid/cxxblas/level1/asum.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a628ad662f9e86b8b12b207f5f5e4a2fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::axpy</definition>
        <argsstring>(IndexType n, const ALPHA &amp;alpha, const X *x, IndexType incX, Y *y, IndexType incY)</argsstring>
        <name>axpy</name>
        <qualifiedname>cxxblas::axpy</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1/axpy.h" line="44" column="6" declfile="librapid/cxxblas/level1/axpy.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a5301c325a16dd6cba3e48ac337ebb995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::copy</definition>
        <argsstring>(IndexType n, const X *x, IndexType incX, Y *y, IndexType incY)</argsstring>
        <name>copy</name>
        <qualifiedname>cxxblas::copy</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1/copy.h" line="44" column="6" declfile="librapid/cxxblas/level1/copy.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a1b0a1e1b75a6be2dd7236387039700b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
          <param>
            <type>typename Result</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::dotu</definition>
        <argsstring>(IndexType n, const X *x, IndexType incX, const Y *y, IndexType incY, Result &amp;result)</argsstring>
        <name>dotu</name>
        <qualifiedname>cxxblas::dotu</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const Y *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <param>
          <type>Result &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1/dot.h" line="44" column="6" declfile="librapid/cxxblas/level1/dot.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a88b5b182d09d1becc3d58554fe918f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
          <param>
            <type>typename Result</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::dot</definition>
        <argsstring>(IndexType n, const X *x, IndexType incX, const Y *y, IndexType incY, Result &amp;result)</argsstring>
        <name>dot</name>
        <qualifiedname>cxxblas::dot</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const Y *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <param>
          <type>Result &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1/dot.h" line="47" column="6" declfile="librapid/cxxblas/level1/dot.h" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1adf3885c29ce43bdcacf248d15b29a0cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::iamax</definition>
        <argsstring>(IndexType n, const X *x, IndexType incX, IndexType &amp;i)</argsstring>
        <name>iamax</name>
        <qualifiedname>cxxblas::iamax</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>IndexType &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1/iamax.h" line="44" column="6" declfile="librapid/cxxblas/level1/iamax.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ae2f286b82beddcdc1fb9180a613cc680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
        </templateparamlist>
        <type>IndexType</type>
        <definition>IndexType cxxblas::iamax</definition>
        <argsstring>(IndexType n, const X *x, IndexType incX)</argsstring>
        <name>iamax</name>
        <qualifiedname>cxxblas::iamax</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1/iamax.h" line="47" column="11" declfile="librapid/cxxblas/level1/iamax.h" declline="47" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a21204d60dceff90aba9425722a67286c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::nrm2</definition>
        <argsstring>(IndexType n, const X *x, IndexType incX, T &amp;norm)</argsstring>
        <name>nrm2</name>
        <qualifiedname>cxxblas::nrm2</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>norm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1/nrm2.h" line="44" column="6" declfile="librapid/cxxblas/level1/nrm2.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a349fce9d9f91633c51797ef6a3370d6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::rot</definition>
        <argsstring>(IndexType n, X *x, IndexType incX, Y *y, IndexType incY, T c, T s)</argsstring>
        <name>rot</name>
        <qualifiedname>cxxblas::rot</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <param>
          <type>T</type>
          <declname>c</declname>
        </param>
        <param>
          <type>T</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1/rot.h" line="45" column="6" declfile="librapid/cxxblas/level1/rot.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a7e48adce6802e678f44175d5be21104d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::rotg</definition>
        <argsstring>(A &amp;a, B &amp;b, T &amp;c, T &amp;s)</argsstring>
        <name>rotg</name>
        <qualifiedname>cxxblas::rotg</qualifiedname>
        <param>
          <type>A &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>B &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1/rot.h" line="48" column="6" declfile="librapid/cxxblas/level1/rot.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a8c7482ae68541492e49757eef148b9b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TA</type>
          </param>
          <param>
            <type>typename TB</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::rotg</definition>
        <argsstring>(std::complex&lt; TA &gt; &amp;a, std::complex&lt; TB &gt; &amp;b, T &amp;c, std::complex&lt; T &gt; &amp;s)</argsstring>
        <name>rotg</name>
        <qualifiedname>cxxblas::rotg</qualifiedname>
        <param>
          <type>std::complex&lt; TA &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::complex&lt; TB &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>std::complex&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1/rot.h" line="51" column="6" declfile="librapid/cxxblas/level1/rot.h" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a467b9552266ca0125a739e16a6e3623d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::rot</definition>
        <argsstring>(IndexType n, std::complex&lt; X &gt; *x, IndexType incX, std::complex&lt; Y &gt; *y, IndexType incY, T c, const std::complex&lt; T &gt; &amp;s)</argsstring>
        <name>rot</name>
        <qualifiedname>cxxblas::rot</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::complex&lt; X &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>std::complex&lt; Y &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <param>
          <type>T</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const std::complex&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1/rot.h" line="64" column="6" declfile="librapid/cxxblas/level1/rot.h" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a08ccdb209146b5674a899ac8b66476d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::scal</definition>
        <argsstring>(IndexType n, const ALPHA &amp;alpha, Y *y, IndexType incY)</argsstring>
        <name>scal</name>
        <qualifiedname>cxxblas::scal</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1/scal.h" line="44" column="6" declfile="librapid/cxxblas/level1/scal.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a0d5308e62de64b9d010a29edfcea24be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::swap</definition>
        <argsstring>(IndexType n, X *x, IndexType incX, Y *y, IndexType incY)</argsstring>
        <name>swap</name>
        <qualifiedname>cxxblas::swap</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1/swap.h" line="44" column="6" declfile="librapid/cxxblas/level1/swap.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a1f144db6f67dd9e5552f5cee6f659255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::acxpby</definition>
        <argsstring>(IndexType n, const ALPHA &amp;alpha, const X *x, IndexType incX, const BETA &amp;beta, Y *y, IndexType incY)</argsstring>
        <name>acxpby</name>
        <qualifiedname>cxxblas::acxpby</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/acxpby.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/acxpby.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ab02d8b28c53d1cdff0a8373f935fc903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::acxpy</definition>
        <argsstring>(IndexType n, const ALPHA &amp;alpha, const X *x, IndexType incX, Y *y, IndexType incY)</argsstring>
        <name>acxpy</name>
        <qualifiedname>cxxblas::acxpy</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/acxpy.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/acxpy.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a7b2e8839404740632544c93463f02b6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::asum1</definition>
        <argsstring>(IndexType n, const X *x, IndexType incX, T &amp;absSum)</argsstring>
        <name>asum1</name>
        <qualifiedname>cxxblas::asum1</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>absSum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/asum1.h" line="44" column="6" declfile="librapid/cxxblas/level1extensions/asum1.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a72a7cfa4dffc0eea0ee2c4a78077472b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::axpby</definition>
        <argsstring>(IndexType n, const ALPHA &amp;alpha, const X *x, IndexType incX, const BETA &amp;beta, Y *y, IndexType incY)</argsstring>
        <name>axpby</name>
        <qualifiedname>cxxblas::axpby</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/axpby.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/axpby.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1aeb9b5ab9972d9023dda5ee4114e1cf1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::ccopy</definition>
        <argsstring>(IndexType n, const X *x, IndexType incX, Y *y, IndexType incY)</argsstring>
        <name>ccopy</name>
        <qualifiedname>cxxblas::ccopy</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/ccopy.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/ccopy.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a540f1b6734e3b9a6dd90f525788abc12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gbaxpby</definition>
        <argsstring>(StorageOrder order, Transpose trans, IndexType m, IndexType n, IndexType kl, IndexType ku, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const BETA &amp;beta, MB *B, IndexType ldB)</argsstring>
        <name>gbaxpby</name>
        <qualifiedname>cxxblas::gbaxpby</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>kl</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ku</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/gbaxpby.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/gbaxpby.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a5272f959d6eb0c316a1f24959268b52b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gbaxpy</definition>
        <argsstring>(StorageOrder order, Transpose trans, IndexType m, IndexType n, IndexType kl, IndexType ku, const ALPHA &amp;alpha, const MA *A, IndexType ldA, MB *B, IndexType ldB)</argsstring>
        <name>gbaxpy</name>
        <qualifiedname>cxxblas::gbaxpy</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>kl</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ku</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/gbaxpy.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/gbaxpy.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1aeef3e395d7f9ce3bc0ed508110559076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gbcopy</definition>
        <argsstring>(StorageOrder order, Transpose trans, IndexType m, IndexType n, IndexType kl, IndexType ku, const MA *A, IndexType ldA, MB *B, IndexType ldB)</argsstring>
        <name>gbcopy</name>
        <qualifiedname>cxxblas::gbcopy</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>kl</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ku</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/gbcopy.h" line="46" column="6" declfile="librapid/cxxblas/level1extensions/gbcopy.h" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1aec0690f72678e152ad743eee7672ea73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gbcotr</definition>
        <argsstring>(StorageOrder order, Transpose trans, IndexType m, IndexType n, IndexType kl, IndexType ku, MA *A, IndexType ldA)</argsstring>
        <name>gbcotr</name>
        <qualifiedname>cxxblas::gbcotr</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>kl</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ku</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/gbcotr.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/gbcotr.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a46aa895292ca51f850f3ae4ab3a70f1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gbscal</definition>
        <argsstring>(StorageOrder order, IndexType m, IndexType n, IndexType kl, IndexType ku, const ALPHA &amp;alpha, MA *A, IndexType ldA)</argsstring>
        <name>gbscal</name>
        <qualifiedname>cxxblas::gbscal</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>kl</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ku</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/gbscal.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/gbscal.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a76e4fb4d468857bae0a94a42ba17f6aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::geaxpby</definition>
        <argsstring>(StorageOrder order, Transpose trans, IndexType m, IndexType n, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const BETA &amp;beta, MB *B, IndexType ldB)</argsstring>
        <name>geaxpby</name>
        <qualifiedname>cxxblas::geaxpby</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/geaxpby.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/geaxpby.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a1a39f3a5d911fd8499a708b12636fd99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::geaxpy</definition>
        <argsstring>(StorageOrder order, Transpose trans, IndexType m, IndexType n, const ALPHA &amp;alpha, const MA *A, IndexType ldA, MB *B, IndexType ldB)</argsstring>
        <name>geaxpy</name>
        <qualifiedname>cxxblas::geaxpy</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/geaxpy.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/geaxpy.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1aecc761d3935cacb8462c7e56d43e48a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gecopy</definition>
        <argsstring>(StorageOrder order, Transpose trans, IndexType m, IndexType n, const MA *A, IndexType ldA, MB *B, IndexType ldB)</argsstring>
        <name>gecopy</name>
        <qualifiedname>cxxblas::gecopy</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/gecopy.h" line="46" column="6" declfile="librapid/cxxblas/level1extensions/gecopy.h" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a472d33d8aea25abf081525e1825b5df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gecotr</definition>
        <argsstring>(StorageOrder order, Transpose trans, IndexType m, IndexType n, MA *A, IndexType ldA)</argsstring>
        <name>gecotr</name>
        <qualifiedname>cxxblas::gecotr</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/gecotr.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/gecotr.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a94ccc5a31f2234ae8f04892afdb0bfeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::geraxpy</definition>
        <argsstring>(StorageOrder order, Transpose trans, IndexType m, IndexType n, const ALPHA &amp;alpha, const MA *A, IndexType ldA, MB *B, IndexType ldB)</argsstring>
        <name>geraxpy</name>
        <qualifiedname>cxxblas::geraxpy</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/geraxpy.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/geraxpy.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a62fb647f2421f14b5cf565c424a1dcda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gerscal</definition>
        <argsstring>(StorageOrder order, IndexType m, IndexType n, const ALPHA &amp;alpha, MA *A, IndexType ldA)</argsstring>
        <name>gerscal</name>
        <qualifiedname>cxxblas::gerscal</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/gerscal.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/gerscal.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ad3fe690cd28fe6122bd8bfd0c2f174ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gescal_init</definition>
        <argsstring>(StorageOrder order, IndexType m, IndexType n, const ALPHA &amp;alpha, MA *A, IndexType ldA)</argsstring>
        <name>gescal_init</name>
        <qualifiedname>cxxblas::gescal_init</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/gescal.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/gescal.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1adbcf8aadb803d38fd8cc2965b3a41347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gescal</definition>
        <argsstring>(StorageOrder order, IndexType m, IndexType n, const ALPHA &amp;alpha, MA *A, IndexType ldA)</argsstring>
        <name>gescal</name>
        <qualifiedname>cxxblas::gescal</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/gescal.h" line="47" column="6" declfile="librapid/cxxblas/level1extensions/gescal.h" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a4045c3c917e36826284e797cd4255eca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::geswap</definition>
        <argsstring>(StorageOrder orderA, StorageOrder orderB, IndexType m, IndexType n, MA *A, IndexType ldA, MB *B, IndexType ldB)</argsstring>
        <name>geswap</name>
        <qualifiedname>cxxblas::geswap</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>orderA</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>orderB</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/geswap.h" line="46" column="6" declfile="librapid/cxxblas/level1extensions/geswap.h" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1acbf59c568b533e47c98cff4af397cf18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::hescal</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLoA, IndexType n, const ALPHA &amp;alpha, MA *A, IndexType ldA)</argsstring>
        <name>hescal</name>
        <qualifiedname>cxxblas::hescal</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLoA</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/hescal.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/hescal.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ad80e389058c9817a0b6926038d2675fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::imax1</definition>
        <argsstring>(IndexType n, const X *x, IndexType incX, IndexType &amp;i)</argsstring>
        <name>imax1</name>
        <qualifiedname>cxxblas::imax1</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>IndexType &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/imax1.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/imax1.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a1af0c3d7ddd053d26987d2cfa0e64601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
        </templateparamlist>
        <type>IndexType</type>
        <definition>IndexType cxxblas::imax1</definition>
        <argsstring>(IndexType n, const X *x, IndexType incX)</argsstring>
        <name>imax1</name>
        <qualifiedname>cxxblas::imax1</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/imax1.h" line="46" column="11" declfile="librapid/cxxblas/level1extensions/imax1.h" declline="46" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ae08a309fa649181eeb0e5cdbf27ad4e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::racxpy</definition>
        <argsstring>(IndexType n, const ALPHA &amp;alpha, const X *x, IndexType incX, Y *y, IndexType incY)</argsstring>
        <name>racxpy</name>
        <qualifiedname>cxxblas::racxpy</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/racxpy.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/racxpy.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a304af4f47d6988ce035e71969accda7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::raxpy</definition>
        <argsstring>(IndexType n, const ALPHA &amp;alpha, const X *x, IndexType incX, Y *y, IndexType incY)</argsstring>
        <name>raxpy</name>
        <qualifiedname>cxxblas::raxpy</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/raxpy.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/raxpy.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ac8343a406f58d2ad9196cedd4c8919d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::rscal</definition>
        <argsstring>(IndexType n, const ALPHA &amp;alpha, Y *y, IndexType incY)</argsstring>
        <name>rscal</name>
        <qualifiedname>cxxblas::rscal</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/rscal.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/rscal.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a35721a100d8e23644df11d1111421520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::syscal</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLoA, IndexType n, const ALPHA &amp;alpha, MA *A, IndexType ldA)</argsstring>
        <name>syscal</name>
        <qualifiedname>cxxblas::syscal</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLoA</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/syscal.h" line="43" column="6" declfile="librapid/cxxblas/level1extensions/syscal.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a995d9f87d93d7b8a0a61971dc02801bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::tpaxpby</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Transpose trans, Diag diag, IndexType n, const ALPHA &amp;alpha, const MA *A, const BETA &amp;beta, MB *B)</argsstring>
        <name>tpaxpby</name>
        <qualifiedname>cxxblas::tpaxpby</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref></type>
          <declname>diag</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/tpaxpby.h" line="48" column="6" declfile="librapid/cxxblas/level1extensions/tpaxpby.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a066d91f21146a70cd1947f1322de7a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::tpaxpy</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Transpose trans, Diag diag, IndexType n, const ALPHA &amp;alpha, const MA *A, MB *B)</argsstring>
        <name>tpaxpy</name>
        <qualifiedname>cxxblas::tpaxpy</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref></type>
          <declname>diag</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/tpaxpy.h" line="48" column="6" declfile="librapid/cxxblas/level1extensions/tpaxpy.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1af4f8d6eaca3a270d3aa6096a59287d96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::tpcopy</definition>
        <argsstring>(StorageUpLo upLo, Transpose trans, Diag diag, IndexType n, const MA *A, MB *B)</argsstring>
        <name>tpcopy</name>
        <qualifiedname>cxxblas::tpcopy</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref></type>
          <declname>diag</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/tpcopy.h" line="48" column="6" declfile="librapid/cxxblas/level1extensions/tpcopy.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a81720f4c6003c3c7ea8a6db329be1098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::tpscal</definition>
        <argsstring>(Diag diag, IndexType n, const ALPHA &amp;alpha, MA *A)</argsstring>
        <name>tpscal</name>
        <qualifiedname>cxxblas::tpscal</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref></type>
          <declname>diag</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/tpscal.h" line="46" column="6" declfile="librapid/cxxblas/level1extensions/tpscal.h" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a562d50662cfa7554a8365132b349ab9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::traxpby</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Transpose trans, Diag diag, IndexType m, IndexType n, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const BETA &amp;beta, MB *B, IndexType ldB)</argsstring>
        <name>traxpby</name>
        <qualifiedname>cxxblas::traxpby</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref></type>
          <declname>diag</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/traxpby.h" line="48" column="6" declfile="librapid/cxxblas/level1extensions/traxpby.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a713fafcdcddcf8a446af19dc158d8ac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::traxpy</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Transpose trans, Diag diag, IndexType m, IndexType n, const ALPHA &amp;alpha, const MA *A, IndexType ldA, MB *B, IndexType ldB)</argsstring>
        <name>traxpy</name>
        <qualifiedname>cxxblas::traxpy</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref></type>
          <declname>diag</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/traxpy.h" line="48" column="6" declfile="librapid/cxxblas/level1extensions/traxpy.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a54687e9f6ae6e83bfc606e5644d380dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::trcopy</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Transpose trans, Diag diag, IndexType m, IndexType n, const MA *A, IndexType ldA, MB *B, IndexType ldB)</argsstring>
        <name>trcopy</name>
        <qualifiedname>cxxblas::trcopy</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref></type>
          <declname>diag</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/trcopy.h" line="48" column="6" declfile="librapid/cxxblas/level1extensions/trcopy.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a3669cd7dade784c2d170a341999e626e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::trscal</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Diag diag, IndexType m, IndexType n, const ALPHA &amp;alpha, MA *A, IndexType ldA)</argsstring>
        <name>trscal</name>
        <qualifiedname>cxxblas::trscal</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref></type>
          <declname>diag</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level1extensions/trscal.h" line="46" column="6" declfile="librapid/cxxblas/level1extensions/trscal.h" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1af96f3660ebb7d246c04e1271497486a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gbmv</definition>
        <argsstring>(StorageOrder order, Transpose trans, IndexType m, IndexType n, IndexType kl, IndexType ku, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const VX *x, IndexType incX, const BETA &amp;beta, VY *y, IndexType incY)</argsstring>
        <name>gbmv</name>
        <qualifiedname>cxxblas::gbmv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>kl</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ku</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/gbmv.h" line="45" column="6" declfile="librapid/cxxblas/level2/gbmv.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1af157e00f82332329ffb6bb2b39b51b8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gemv</definition>
        <argsstring>(StorageOrder order, Transpose trans, IndexType m, IndexType n, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const VX *x, IndexType incX, const BETA &amp;beta, VY *y, IndexType incY)</argsstring>
        <name>gemv</name>
        <qualifiedname>cxxblas::gemv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/gemv.h" line="45" column="6" declfile="librapid/cxxblas/level2/gemv.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a74e0faabc444361effb892b464c36518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::ger</definition>
        <argsstring>(StorageOrder order, IndexType m, IndexType n, const ALPHA &amp;alpha, const VX *x, IndexType incX, const VY *y, IndexType incY, MA *A, IndexType ldA)</argsstring>
        <name>ger</name>
        <qualifiedname>cxxblas::ger</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/ger.h" line="44" column="6" declfile="librapid/cxxblas/level2/ger.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ae4a46596dae3e8043d5cdef6d824c7d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::geru</definition>
        <argsstring>(StorageOrder order, IndexType m, IndexType n, const ALPHA &amp;alpha, const VX *x, IndexType incX, const VY *y, IndexType incY, MA *A, IndexType ldA)</argsstring>
        <name>geru</name>
        <qualifiedname>cxxblas::geru</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/ger.h" line="48" column="6" declfile="librapid/cxxblas/level2/ger.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1aeba174efe04c349b03431748a58fbeb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gerc</definition>
        <argsstring>(StorageOrder order, IndexType m, IndexType n, const ALPHA &amp;alpha, const VX *x, IndexType incX, const VY *y, IndexType incY, MA *A, IndexType ldA)</argsstring>
        <name>gerc</name>
        <qualifiedname>cxxblas::gerc</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/ger.h" line="52" column="6" declfile="librapid/cxxblas/level2/ger.h" declline="52" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a63f999a0acd2debfac8535a8b5ba751d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::hbmv</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, IndexType n, IndexType k, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const VX *x, IndexType incX, const BETA &amp;beta, VY *y, IndexType incY)</argsstring>
        <name>hbmv</name>
        <qualifiedname>cxxblas::hbmv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/hbmv.h" line="45" column="6" declfile="librapid/cxxblas/level2/hbmv.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a4db803d445c2f618f74c5d29ab55290f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::hemv</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, IndexType n, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const VX *x, IndexType incX, const BETA &amp;beta, VY *y, IndexType incY)</argsstring>
        <name>hemv</name>
        <qualifiedname>cxxblas::hemv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/hemv.h" line="45" column="6" declfile="librapid/cxxblas/level2/hemv.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1adf0095a209e21f33f12c8f7147e2a2b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::her</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, IndexType n, const ALPHA &amp;alpha, const VX *x, IndexType incX, MA *A, IndexType ldA)</argsstring>
        <name>her</name>
        <qualifiedname>cxxblas::her</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/her.h" line="44" column="6" declfile="librapid/cxxblas/level2/her.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a5e2297713ac844c98863abc3fe1400b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::her2</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, IndexType n, const ALPHA &amp;alpha, const VX *x, IndexType incX, const VY *y, IndexType incY, MA *A, IndexType ldA)</argsstring>
        <name>her2</name>
        <qualifiedname>cxxblas::her2</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/her2.h" line="44" column="6" declfile="librapid/cxxblas/level2/her2.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a379201fb1f6f882ed012646b9fc4ed43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::hpmv</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, IndexType n, const ALPHA &amp;alpha, const MA *A, const VX *x, IndexType incX, const BETA &amp;beta, VY *y, IndexType incY)</argsstring>
        <name>hpmv</name>
        <qualifiedname>cxxblas::hpmv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/hpmv.h" line="45" column="6" declfile="librapid/cxxblas/level2/hpmv.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1af12f2cc3b5d36e037cc98218dfd46192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::hpr</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, IndexType n, const ALPHA &amp;alpha, const VX *x, IndexType incX, MA *A)</argsstring>
        <name>hpr</name>
        <qualifiedname>cxxblas::hpr</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/hpr.h" line="44" column="6" declfile="librapid/cxxblas/level2/hpr.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a09b7ba4abfda4c6e420cbc64705251a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::hpr2</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, IndexType n, const ALPHA &amp;alpha, const VX *x, IndexType incX, const VY *y, IndexType incY, MA *A)</argsstring>
        <name>hpr2</name>
        <qualifiedname>cxxblas::hpr2</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/hpr2.h" line="42" column="6" declfile="librapid/cxxblas/level2/hpr2.h" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1adbcfa2ce382211f52e6bdb9295b8080d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::sbmv</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, IndexType n, IndexType k, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const VX *x, IndexType incX, const BETA &amp;beta, VY *y, IndexType incY)</argsstring>
        <name>sbmv</name>
        <qualifiedname>cxxblas::sbmv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/sbmv.h" line="45" column="6" declfile="librapid/cxxblas/level2/sbmv.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1aa77d8da7d659a64de6fd13a8ae362167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::spmv</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, IndexType n, const ALPHA &amp;alpha, const MA *A, const VX *x, IndexType incX, const BETA &amp;beta, VY *y, IndexType incY)</argsstring>
        <name>spmv</name>
        <qualifiedname>cxxblas::spmv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/spmv.h" line="45" column="6" declfile="librapid/cxxblas/level2/spmv.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a317cc1159290f2d31a38e68d7c30d71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::spr</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, IndexType n, const ALPHA &amp;alpha, const VX *x, IndexType incX, MA *A)</argsstring>
        <name>spr</name>
        <qualifiedname>cxxblas::spr</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/spr.h" line="44" column="6" declfile="librapid/cxxblas/level2/spr.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a3762f47ac4be918f23339fa1db139813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::spr2</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, IndexType n, const ALPHA &amp;alpha, const VX *x, IndexType incX, const VY *y, IndexType incY, MA *A)</argsstring>
        <name>spr2</name>
        <qualifiedname>cxxblas::spr2</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/spr2.h" line="42" column="6" declfile="librapid/cxxblas/level2/spr2.h" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a327a3a7be630a57e7db0095585b1664d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::symv</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, IndexType n, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const VX *x, IndexType incX, const BETA &amp;beta, VY *y, IndexType incY)</argsstring>
        <name>symv</name>
        <qualifiedname>cxxblas::symv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/symv.h" line="45" column="6" declfile="librapid/cxxblas/level2/symv.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1aab487999ce165cdce24733bdf98355d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::syr</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, IndexType n, const ALPHA &amp;alpha, const VX *x, IndexType incX, MA *A, IndexType ldA)</argsstring>
        <name>syr</name>
        <qualifiedname>cxxblas::syr</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/syr.h" line="44" column="6" declfile="librapid/cxxblas/level2/syr.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a7534c1282c3a7862cc929a91bcb67ae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::syr2</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, IndexType n, const ALPHA &amp;alpha, const VX *x, IndexType incX, const VY *y, IndexType incY, MA *A, IndexType ldA)</argsstring>
        <name>syr2</name>
        <qualifiedname>cxxblas::syr2</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/syr2.h" line="44" column="6" declfile="librapid/cxxblas/level2/syr2.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ae10c353061383965c18d7993ee4f1ea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::tbmv</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Transpose transA, Diag diag, IndexType n, IndexType k, const MA *A, IndexType ldA, VX *x, IndexType incX)</argsstring>
        <name>tbmv</name>
        <qualifiedname>cxxblas::tbmv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>transA</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref></type>
          <declname>diag</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/tbmv.h" line="44" column="6" declfile="librapid/cxxblas/level2/tbmv.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a006d9f8ebd218e3d1b3fc7a559bdefd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::tbsv</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Transpose transA, Diag diag, IndexType n, IndexType k, const MA *A, IndexType ldA, VX *x, IndexType incX)</argsstring>
        <name>tbsv</name>
        <qualifiedname>cxxblas::tbsv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>transA</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref></type>
          <declname>diag</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/tbsv.h" line="44" column="6" declfile="librapid/cxxblas/level2/tbsv.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a9aab852dd286992ae532223788b1278a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::tpmv</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Transpose transA, Diag diag, IndexType n, const MA *A, VX *x, IndexType incX)</argsstring>
        <name>tpmv</name>
        <qualifiedname>cxxblas::tpmv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>transA</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref></type>
          <declname>diag</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/tpmv.h" line="44" column="6" declfile="librapid/cxxblas/level2/tpmv.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a10adf6b143d483feb106f96525f02267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::tpsv</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Transpose transA, Diag diag, IndexType n, const MA *A, VX *x, IndexType incX)</argsstring>
        <name>tpsv</name>
        <qualifiedname>cxxblas::tpsv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>transA</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref></type>
          <declname>diag</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/tpsv.h" line="44" column="6" declfile="librapid/cxxblas/level2/tpsv.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a509587086c2f5ea1a623bb9468f9618d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::trmv</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Transpose transA, Diag diag, IndexType n, const MA *A, IndexType ldA, VX *x, IndexType incX)</argsstring>
        <name>trmv</name>
        <qualifiedname>cxxblas::trmv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>transA</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref></type>
          <declname>diag</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/trmv.h" line="44" column="6" declfile="librapid/cxxblas/level2/trmv.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a679afb6df98e4dac29936d0c5e4803bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::trsv</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Transpose transA, Diag diag, IndexType n, const MA *A, IndexType ldA, VX *x, IndexType incX)</argsstring>
        <name>trsv</name>
        <qualifiedname>cxxblas::trsv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>transA</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref></type>
          <declname>diag</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2/trsv.h" line="44" column="6" declfile="librapid/cxxblas/level2/trsv.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ad0298236719344fede510d61585dfaf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gbmv</definition>
        <argsstring>(StorageOrder order, Transpose trans, Transpose conjX, IndexType m, IndexType n, IndexType ku, IndexType kl, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const VX *x, IndexType incX, const BETA &amp;beta, VY *y, IndexType incY)</argsstring>
        <name>gbmv</name>
        <qualifiedname>cxxblas::gbmv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>conjX</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ku</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>kl</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2extensions/gbmv.h" line="44" column="6" declfile="librapid/cxxblas/level2extensions/gbmv.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ae34d05c217bfca2fdcd68c77845a2ba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gemv</definition>
        <argsstring>(StorageOrder order, Transpose transA, Transpose conjX, IndexType m, IndexType n, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const VX *x, IndexType incX, const BETA &amp;beta, VY *y, IndexType incY)</argsstring>
        <name>gemv</name>
        <qualifiedname>cxxblas::gemv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>transA</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>conjX</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2extensions/gemv.h" line="44" column="6" declfile="librapid/cxxblas/level2extensions/gemv.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ab6ac5d1fe50822a2476217b760698c4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::hemv</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Transpose conjugateA, IndexType n, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const VX *x, IndexType incX, const BETA &amp;beta, VY *y, IndexType incY)</argsstring>
        <name>hemv</name>
        <qualifiedname>cxxblas::hemv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>conjugateA</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2extensions/hemv.h" line="42" column="6" declfile="librapid/cxxblas/level2extensions/hemv.h" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1adee7ee56710863f6a02fd986f7c0086f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::her</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Transpose conjugateA, IndexType n, const ALPHA &amp;alpha, const VX *x, IndexType incX, MA *A, IndexType ldA)</argsstring>
        <name>her</name>
        <qualifiedname>cxxblas::her</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>conjugateA</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2extensions/her.h" line="41" column="6" declfile="librapid/cxxblas/level2extensions/her.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ac6832e892e6fb0d5872770cbec6277f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::her2</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Transpose conjugateA, IndexType n, const ALPHA &amp;alpha, const VX *x, IndexType incX, const VY *y, IndexType incY, MA *A, IndexType ldA)</argsstring>
        <name>her2</name>
        <qualifiedname>cxxblas::her2</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>conjugateA</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incX</declname>
        </param>
        <param>
          <type>const VY *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>incY</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level2extensions/her2.h" line="43" column="6" declfile="librapid/cxxblas/level2extensions/her2.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a317cdbf872a1d7431ae0356a15d871fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename MC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gemm</definition>
        <argsstring>(StorageOrder order, Transpose transA, Transpose transB, IndexType m, IndexType n, IndexType k, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const MB *B, IndexType ldB, const BETA &amp;beta, MC *C, IndexType ldC)</argsstring>
        <name>gemm</name>
        <qualifiedname>cxxblas::gemm</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>transA</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>transB</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>MC *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level3/gemm.h" line="45" column="6" declfile="librapid/cxxblas/level3/gemm.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1aac3afe9c1a8ba01259b978a6645de818" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename MC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::hemm</definition>
        <argsstring>(StorageOrder order, Side side, StorageUpLo upLo, IndexType m, IndexType n, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const MB *B, IndexType ldB, const BETA &amp;beta, MC *C, IndexType ldC)</argsstring>
        <name>hemm</name>
        <qualifiedname>cxxblas::hemm</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3321b2c6f9fc9d90f6c3d502a999d947" kindref="member">Side</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>MC *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level3/hemm.h" line="45" column="6" declfile="librapid/cxxblas/level3/hemm.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1aeaf8c7939ca633d2ef130ff5dfc6af44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename MC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::her2k</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Transpose trans, IndexType n, IndexType k, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const MB *B, IndexType ldB, const BETA &amp;beta, MC *C, IndexType ldC)</argsstring>
        <name>her2k</name>
        <qualifiedname>cxxblas::her2k</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>MC *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level3/her2k.h" line="45" column="6" declfile="librapid/cxxblas/level3/her2k.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a713aa0c5248df3900ecf49da8f66b1a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename MC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::herk</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Transpose trans, IndexType n, IndexType k, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const BETA &amp;beta, MC *C, IndexType ldC)</argsstring>
        <name>herk</name>
        <qualifiedname>cxxblas::herk</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>MC *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level3/herk.h" line="44" column="6" declfile="librapid/cxxblas/level3/herk.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a171dd32f962d97065f32a4f46c506c0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename MC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::symm</definition>
        <argsstring>(StorageOrder order, Side side, StorageUpLo upLo, IndexType m, IndexType n, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const MB *B, IndexType ldB, const BETA &amp;beta, MC *C, IndexType ldC)</argsstring>
        <name>symm</name>
        <qualifiedname>cxxblas::symm</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3321b2c6f9fc9d90f6c3d502a999d947" kindref="member">Side</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>MC *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level3/symm.h" line="45" column="6" declfile="librapid/cxxblas/level3/symm.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a7021af75c1f70121e72acc56f3125b0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename MC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::syr2k</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Transpose trans, IndexType n, IndexType k, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const MB *B, IndexType ldB, const BETA &amp;beta, MC *C, IndexType ldC)</argsstring>
        <name>syr2k</name>
        <qualifiedname>cxxblas::syr2k</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>MC *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level3/syr2k.h" line="45" column="6" declfile="librapid/cxxblas/level3/syr2k.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1adfe19b49568f9f80a00c3e4cffe3f76c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename MC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::syrk</definition>
        <argsstring>(StorageOrder order, StorageUpLo upLo, Transpose trans, IndexType n, IndexType k, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const BETA &amp;beta, MC *C, IndexType ldC)</argsstring>
        <name>syrk</name>
        <qualifiedname>cxxblas::syrk</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>MC *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level3/syrk.h" line="44" column="6" declfile="librapid/cxxblas/level3/syrk.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a520fcdf8969f11bebc8d765cebf89db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::trmm</definition>
        <argsstring>(StorageOrder order, Side side, StorageUpLo upLo, Transpose transA, Diag diag, IndexType m, IndexType n, const ALPHA &amp;alpha, const MA *A, IndexType ldA, MB *B, IndexType ldB)</argsstring>
        <name>trmm</name>
        <qualifiedname>cxxblas::trmm</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3321b2c6f9fc9d90f6c3d502a999d947" kindref="member">Side</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>transA</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref></type>
          <declname>diag</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level3/trmm.h" line="44" column="6" declfile="librapid/cxxblas/level3/trmm.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1af75fa55610eb9f88787fc76a1eb60e6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::trsm</definition>
        <argsstring>(StorageOrder order, Side side, StorageUpLo upLo, Transpose transA, Diag diag, IndexType m, IndexType n, const ALPHA &amp;alpha, const MA *A, IndexType ldA, MB *B, IndexType ldB)</argsstring>
        <name>trsm</name>
        <qualifiedname>cxxblas::trsm</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3321b2c6f9fc9d90f6c3d502a999d947" kindref="member">Side</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>transA</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref></type>
          <declname>diag</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level3/trsm.h" line="44" column="6" declfile="librapid/cxxblas/level3/trsm.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ab07e0ca3444f8278865d15a296089713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gbmm</definition>
        <argsstring>(StorageOrder order, Side side, Transpose transA, Transpose transB, IndexType m, IndexType n, IndexType kl, IndexType ku, IndexType l, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const MB *B, IndexType ldB, const BETA &amp;beta, VC *C, IndexType ldC)</argsstring>
        <name>gbmm</name>
        <qualifiedname>cxxblas::gbmm</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3321b2c6f9fc9d90f6c3d502a999d947" kindref="member">Side</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>transA</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>transB</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>kl</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ku</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VC *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level3extensions/gbmm.h" line="45" column="6" declfile="librapid/cxxblas/level3extensions/gbmm.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a244944a48e5299b4c19e6276a8e5af0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::hbmm</definition>
        <argsstring>(StorageOrder order, Side side, StorageUpLo upLo, IndexType m, IndexType k, IndexType l, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const MB *B, IndexType ldB, const BETA &amp;beta, VC *C, IndexType ldC)</argsstring>
        <name>hbmm</name>
        <qualifiedname>cxxblas::hbmm</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3321b2c6f9fc9d90f6c3d502a999d947" kindref="member">Side</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>k</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VC *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level3extensions/hbmm.h" line="45" column="6" declfile="librapid/cxxblas/level3extensions/hbmm.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a6ade7fb0e9b1867073f26946621e466b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::sbmm</definition>
        <argsstring>(StorageOrder order, Side side, StorageUpLo upLo, IndexType m, IndexType k, IndexType l, const ALPHA &amp;alpha, const MA *A, IndexType ldA, const MB *B, IndexType ldB, const BETA &amp;beta, VC *C, IndexType ldC)</argsstring>
        <name>sbmm</name>
        <qualifiedname>cxxblas::sbmm</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3321b2c6f9fc9d90f6c3d502a999d947" kindref="member">Side</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>k</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>const MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VC *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level3extensions/sbmm.h" line="45" column="6" declfile="librapid/cxxblas/level3extensions/sbmm.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a50a0c6340cb829a4333fe8f45c17cf94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::tbmm</definition>
        <argsstring>(StorageOrder order, Side side, StorageUpLo upLo, Transpose transA, Diag diag, IndexType m, IndexType n, IndexType k, const ALPHA &amp;alpha, const MA *A, IndexType ldA, MB *B, IndexType ldB)</argsstring>
        <name>tbmm</name>
        <qualifiedname>cxxblas::tbmm</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a918cd7933fff546379a8b1a0ab283f68" kindref="member">StorageOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3321b2c6f9fc9d90f6c3d502a999d947" kindref="member">Side</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>transA</declname>
        </param>
        <param>
          <type><ref refid="namespacecxxblas_1a3e3f7c313cf3b7c24d37c13aac2ae4a6" kindref="member">Diag</ref></type>
          <declname>diag</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldA</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/level3extensions/tbmm.h" line="44" column="6" declfile="librapid/cxxblas/level3extensions/tbmm.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a6ec933681140acbddbd145f3ea6f5f23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gecrsmv</definition>
        <argsstring>(Transpose trans, IndexType m, IndexType n, const ALPHA &amp;alpha, const MA *A, const IndexType *ia, const IndexType *ja, const VX *x, const BETA &amp;beta, VY *y)</argsstring>
        <name>gecrsmv</name>
        <qualifiedname>cxxblas::gecrsmv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ia</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ja</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VY *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/sparselevel2/gecrsmv.h" line="44" column="6" declfile="librapid/cxxblas/sparselevel2/gecrsmv.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a899793e0132ff4083fe1e1c7136af178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::heccsmv</definition>
        <argsstring>(StorageUpLo upLo, IndexType n, const ALPHA &amp;alpha, const MA *A, const IndexType *ia, const IndexType *ja, const VX *x, const BETA &amp;beta, VY *y)</argsstring>
        <name>heccsmv</name>
        <qualifiedname>cxxblas::heccsmv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ia</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ja</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VY *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/sparselevel2/heccsmv.h" line="44" column="6" declfile="librapid/cxxblas/sparselevel2/heccsmv.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a1ce109c6f3179f533a373db492829de7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::hecrsmv</definition>
        <argsstring>(StorageUpLo upLo, IndexType n, const ALPHA &amp;alpha, const MA *A, const IndexType *ia, const IndexType *ja, const VX *x, const BETA &amp;beta, VY *y)</argsstring>
        <name>hecrsmv</name>
        <qualifiedname>cxxblas::hecrsmv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ia</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ja</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VY *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/sparselevel2/hecrsmv.h" line="44" column="6" declfile="librapid/cxxblas/sparselevel2/hecrsmv.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a91d3ee2957cdb5d9555c4a46f2570a0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
        </templateparamlist>
        <type>char</type>
        <definition>char cxxblas::getIndexBaseChar</definition>
        <argsstring>(IndexType x)</argsstring>
        <name>getIndexBaseChar</name>
        <qualifiedname>cxxblas::getIndexBaseChar</qualifiedname>
        <param>
          <type>IndexType</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/sparselevel2/sparselevel2.h" line="39" column="6" declfile="librapid/cxxblas/sparselevel2/sparselevel2.h" declline="39" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a1eef9de05868831254b01429f6a98332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::syccsmv</definition>
        <argsstring>(StorageUpLo upLo, IndexType n, const ALPHA &amp;alpha, const MA *A, const IndexType *ia, const IndexType *ja, const VX *x, const BETA &amp;beta, VY *y)</argsstring>
        <name>syccsmv</name>
        <qualifiedname>cxxblas::syccsmv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ia</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ja</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VY *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/sparselevel2/syccsmv.h" line="44" column="6" declfile="librapid/cxxblas/sparselevel2/syccsmv.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1acd8c09c48224851868995c6ef7291b5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename VY</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::sycrsmv</definition>
        <argsstring>(StorageUpLo upLo, IndexType n, const ALPHA &amp;alpha, const MA *A, const IndexType *ia, const IndexType *ja, const VX *x, const BETA &amp;beta, VY *y)</argsstring>
        <name>sycrsmv</name>
        <qualifiedname>cxxblas::sycrsmv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ia</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ja</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VY *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/sparselevel2/sycrsmv.h" line="44" column="6" declfile="librapid/cxxblas/sparselevel2/sycrsmv.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ae33661d0514c35ad476a303c743e445b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename MC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gecrsmm</definition>
        <argsstring>(Transpose transA, IndexType m, IndexType n, IndexType k, const ALPHA &amp;alpha, const MA *A, const IndexType *ia, const IndexType *ja, const MB *B, IndexType ldB, const BETA &amp;beta, MC *C, IndexType ldC)</argsstring>
        <name>gecrsmm</name>
        <qualifiedname>cxxblas::gecrsmm</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>transA</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ia</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ja</declname>
        </param>
        <param>
          <type>const MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>MC *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/sparselevel3/gecrsmm.h" line="44" column="6" declfile="librapid/cxxblas/sparselevel3/gecrsmm.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ab5ab5724368af5cc84c96de0dcc74f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename MC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::heccsmm</definition>
        <argsstring>(StorageUpLo upLo, IndexType m, IndexType n, const ALPHA &amp;alpha, const MA *A, const IndexType *ia, const IndexType *ja, const MB *B, IndexType ldB, const BETA &amp;beta, MC *C, IndexType ldC)</argsstring>
        <name>heccsmm</name>
        <qualifiedname>cxxblas::heccsmm</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ia</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ja</declname>
        </param>
        <param>
          <type>const MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>MC *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/sparselevel3/heccsmm.h" line="44" column="6" declfile="librapid/cxxblas/sparselevel3/heccsmm.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a7f814b6fd18aeab77c561f384e218ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename MC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::hecrsmm</definition>
        <argsstring>(StorageUpLo upLo, IndexType m, IndexType n, const ALPHA &amp;alpha, const MA *A, const IndexType *ia, const IndexType *ja, const MB *B, IndexType ldB, const BETA &amp;beta, MC *C, IndexType ldC)</argsstring>
        <name>hecrsmm</name>
        <qualifiedname>cxxblas::hecrsmm</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ia</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ja</declname>
        </param>
        <param>
          <type>const MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>MC *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/sparselevel3/hecrsmm.h" line="44" column="6" declfile="librapid/cxxblas/sparselevel3/hecrsmm.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a8780438cf0f2099cf973ebf1e97f4423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename MC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::syccsmm</definition>
        <argsstring>(StorageUpLo upLo, IndexType m, IndexType n, const ALPHA &amp;alpha, const MA *A, const IndexType *ia, const IndexType *ja, const MB *B, IndexType ldB, const BETA &amp;beta, MC *C, IndexType ldC)</argsstring>
        <name>syccsmm</name>
        <qualifiedname>cxxblas::syccsmm</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ia</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ja</declname>
        </param>
        <param>
          <type>const MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>MC *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/sparselevel3/syccsmm.h" line="44" column="6" declfile="librapid/cxxblas/sparselevel3/syccsmm.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a6bb4f8ff1fe4463f216b2b9e82cca334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>typename MB</type>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename MC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::sycrsmm</definition>
        <argsstring>(StorageUpLo upLo, IndexType m, IndexType n, const ALPHA &amp;alpha, const MA *A, const IndexType *ia, const IndexType *ja, const MB *B, IndexType ldB, const BETA &amp;beta, MC *C, IndexType ldC)</argsstring>
        <name>sycrsmm</name>
        <qualifiedname>cxxblas::sycrsmm</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1ad69d92c1688aa626f694b26a1da27df7" kindref="member">StorageUpLo</ref></type>
          <declname>upLo</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>m</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ia</declname>
        </param>
        <param>
          <type>const IndexType *</type>
          <declname>ja</declname>
        </param>
        <param>
          <type>const MB *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldB</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>MC *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>ldC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/sparselevel3/sycrsmm.h" line="44" column="6" declfile="librapid/cxxblas/sparselevel3/sycrsmm.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1abf38ef890ae7a5594fd3eb4dd960fc26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>int</type>
            <declname>incX</declname>
            <defname>incX</defname>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
          <param>
            <type>int</type>
            <declname>incY</declname>
            <defname>incY</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::acxpby</definition>
        <argsstring>(const ALPHA &amp;alpha, const X *x, const BETA &amp;beta, Y *y)</argsstring>
        <name>acxpby</name>
        <qualifiedname>cxxblas::acxpby</qualifiedname>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/tinylevel1/acxpby.h" line="41" column="6" declfile="librapid/cxxblas/tinylevel1/acxpby.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a3747c4bd123a69a4b45e28d1925e859c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>int</type>
            <declname>incX</declname>
            <defname>incX</defname>
          </param>
          <param>
            <type>typename Y</type>
          </param>
          <param>
            <type>int</type>
            <declname>incY</declname>
            <defname>incY</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::acxpy</definition>
        <argsstring>(const ALPHA &amp;alpha, const X *x, Y *y)</argsstring>
        <name>acxpy</name>
        <qualifiedname>cxxblas::acxpy</qualifiedname>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/tinylevel1/acxpy.h" line="41" column="6" declfile="librapid/cxxblas/tinylevel1/acxpy.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a3be880728d1aa838bac884a9e5a98787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>int</type>
            <declname>incX</declname>
            <defname>incX</defname>
          </param>
          <param>
            <type>typename BETA</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
          <param>
            <type>int</type>
            <declname>incY</declname>
            <defname>incY</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::axpby</definition>
        <argsstring>(const ALPHA &amp;alpha, const X *x, const BETA &amp;beta, Y *y)</argsstring>
        <name>axpby</name>
        <qualifiedname>cxxblas::axpby</qualifiedname>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const BETA &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/tinylevel1/axpby.h" line="41" column="6" declfile="librapid/cxxblas/tinylevel1/axpby.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a2f92bf5aae26b5f931d5af232c5461eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>int</type>
            <declname>incX</declname>
            <defname>incX</defname>
          </param>
          <param>
            <type>typename Y</type>
          </param>
          <param>
            <type>int</type>
            <declname>incY</declname>
            <defname>incY</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::axpy</definition>
        <argsstring>(const ALPHA &amp;alpha, const X *x, Y *y)</argsstring>
        <name>axpy</name>
        <qualifiedname>cxxblas::axpy</qualifiedname>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/tinylevel1/axpy.h" line="41" column="6" declfile="librapid/cxxblas/tinylevel1/axpy.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a4b1b57e7597a556ef49270f9efac8d51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>int</type>
            <declname>incX</declname>
            <defname>incX</defname>
          </param>
          <param>
            <type>typename Y</type>
          </param>
          <param>
            <type>int</type>
            <declname>incY</declname>
            <defname>incY</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::ccopy</definition>
        <argsstring>(const X *x, Y *y)</argsstring>
        <name>ccopy</name>
        <qualifiedname>cxxblas::ccopy</qualifiedname>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/tinylevel1/ccopy.h" line="41" column="6" declfile="librapid/cxxblas/tinylevel1/ccopy.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1af9104779674deb0065e4b7a5e08b3dd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>int</type>
            <declname>incX</declname>
            <defname>incX</defname>
          </param>
          <param>
            <type>typename Y</type>
          </param>
          <param>
            <type>int</type>
            <declname>incY</declname>
            <defname>incY</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::copy</definition>
        <argsstring>(const X *x, Y *y)</argsstring>
        <name>copy</name>
        <qualifiedname>cxxblas::copy</qualifiedname>
        <param>
          <type>const X *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/tinylevel1/copy.h" line="41" column="6" declfile="librapid/cxxblas/tinylevel1/copy.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a77247fb8edce11274b57ba1096cace52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>m</declname>
            <defname>m</defname>
          </param>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>int</type>
            <declname>ldA</declname>
            <defname>ldA</defname>
          </param>
          <param>
            <type>typename MB</type>
          </param>
          <param>
            <type>int</type>
            <declname>ldB</declname>
            <defname>ldB</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::geaxpy</definition>
        <argsstring>(Transpose trans, const ALPHA &amp;alpha, const MA *A, MB *B)</argsstring>
        <name>geaxpy</name>
        <qualifiedname>cxxblas::geaxpy</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/tinylevel1/geaxpy.h" line="43" column="6" declfile="librapid/cxxblas/tinylevel1/geaxpy.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1afbfec068f4d86e88ffb00b4e5cc1d2cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>m</declname>
            <defname>m</defname>
          </param>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>int</type>
            <declname>ldA</declname>
            <defname>ldA</defname>
          </param>
          <param>
            <type>typename MB</type>
          </param>
          <param>
            <type>int</type>
            <declname>ldB</declname>
            <defname>ldB</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gecopy</definition>
        <argsstring>(Transpose trans, const MA *A, MB *B)</argsstring>
        <name>gecopy</name>
        <qualifiedname>cxxblas::gecopy</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>MB *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/tinylevel1/gecopy.h" line="44" column="6" declfile="librapid/cxxblas/tinylevel1/gecopy.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1af2f0872d93bd5149d88153debcbf8966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>m</declname>
            <defname>m</defname>
          </param>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>int</type>
            <declname>ldA</declname>
            <defname>ldA</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gerscal</definition>
        <argsstring>(const ALPHA &amp;alpha, MA *A)</argsstring>
        <name>gerscal</name>
        <qualifiedname>cxxblas::gerscal</qualifiedname>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/tinylevel1/gerscal.h" line="41" column="6" declfile="librapid/cxxblas/tinylevel1/gerscal.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ac2d47ed57f85d21b7a04ba4d20721458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>m</declname>
            <defname>m</defname>
          </param>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>int</type>
            <declname>ldA</declname>
            <defname>ldA</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gescal</definition>
        <argsstring>(const ALPHA &amp;alpha, MA *A)</argsstring>
        <name>gescal</name>
        <qualifiedname>cxxblas::gescal</qualifiedname>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>MA *</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/tinylevel1/gescal.h" line="41" column="6" declfile="librapid/cxxblas/tinylevel1/gescal.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1aa44fc271dab7baf15da866f6d60c618c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
          <param>
            <type>int</type>
            <declname>incY</declname>
            <defname>incY</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::rscal</definition>
        <argsstring>(const ALPHA &amp;alpha, Y *y)</argsstring>
        <name>rscal</name>
        <qualifiedname>cxxblas::rscal</qualifiedname>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/tinylevel1/rscal.h" line="41" column="6" declfile="librapid/cxxblas/tinylevel1/rscal.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1ad98068e958511bc9d3392d93d5bd97b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
          <param>
            <type>typename ALPHA</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
          <param>
            <type>int</type>
            <declname>incY</declname>
            <defname>incY</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::scal</definition>
        <argsstring>(const ALPHA &amp;alpha, Y *y)</argsstring>
        <name>scal</name>
        <qualifiedname>cxxblas::scal</qualifiedname>
        <param>
          <type>const ALPHA &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/tinylevel1/scal.h" line="41" column="6" declfile="librapid/cxxblas/tinylevel1/scal.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxblas_1a57b616943a5d6c153fa6a34166c125f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>m</declname>
            <defname>m</defname>
          </param>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
          <param>
            <type>typename MA</type>
          </param>
          <param>
            <type>int</type>
            <declname>ldA</declname>
            <defname>ldA</defname>
          </param>
          <param>
            <type>typename VX</type>
          </param>
          <param>
            <type>int</type>
            <declname>incX</declname>
            <defname>incX</defname>
          </param>
          <param>
            <type>typename VY</type>
          </param>
          <param>
            <type>int</type>
            <declname>incY</declname>
            <defname>incY</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxblas::gemv</definition>
        <argsstring>(Transpose trans, MA alpha, const MA *A, const VX *x, VY beta, VY *y)</argsstring>
        <name>gemv</name>
        <qualifiedname>cxxblas::gemv</qualifiedname>
        <param>
          <type><ref refid="namespacecxxblas_1a710044b98080b10301734289c63b1e30" kindref="member">Transpose</ref></type>
          <declname>trans</declname>
        </param>
        <param>
          <type>MA</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const MA *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const VX *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>VY</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>VY *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="librapid/cxxblas/tinylevel2/gemv.h" line="44" column="6" declfile="librapid/cxxblas/tinylevel2/gemv.h" declline="44" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="librapid/cxxblas/auxiliary/complex.h" line="39" column="1"/>
  </compounddef>
</doxygen>
