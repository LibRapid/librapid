<?xml version="1.0" encoding="UTF-8"?>
<doctest binary="all_features">
  <Options order_by="file" rand_seed="324" first="0" last="4294967295" abort_after="0" subcase_filter_levels="2147483647" case_sensitive="false" no_throw="false" no_skip="false"/>
  <TestSuite>
    <TestCase name="exercising tricky code paths of doctest" filename="coverage_maxout.cpp" line="0">
      <Expression success="false" type="CHECK" filename="coverage_maxout.cpp" line="0">
        <Original>
          str.compare(const_str, true) != 0
        </Original>
        <Expanded>
          0 != 0
        </Expanded>
        <Info>
          should fail
        </Info>
      </Expression>
      <Expression success="false" type="CHECK" filename="coverage_maxout.cpp" line="0">
        <Original>
          str.compare("omgomgomg", false) != 0
        </Original>
        <Expanded>
          0 != 0
        </Expanded>
        <Info>
          should fail
        </Info>
      </Expression>
      <Expression success="false" type="CHECK" filename="coverage_maxout.cpp" line="0">
        <Original>
          len_is_zero
        </Original>
        <Expanded>
          false
        </Expanded>
        <Info>
          should fail
        </Info>
      </Expression>
      <Expression success="false" type="CHECK" filename="coverage_maxout.cpp" line="0">
        <Original>
          b == 5
        </Original>
        <Expanded>
          Approx( 7.0 ) == 5
        </Expanded>
      </Expression>
      <Expression success="false" type="CHECK" filename="coverage_maxout.cpp" line="0">
        <Original>
          b &lt; 5
        </Original>
        <Expanded>
          Approx( 7.0 ) &lt;  5
        </Expanded>
      </Expression>
      <Expression success="false" type="CHECK" filename="coverage_maxout.cpp" line="0">
        <Original>
          b &lt;= 5
        </Original>
        <Expanded>
          Approx( 7.0 ) &lt;= 5
        </Expanded>
      </Expression>
      <Expression success="false" type="CHECK" filename="coverage_maxout.cpp" line="0">
        <Original>
          6 == a
        </Original>
        <Expanded>
          6 == Approx( 5.0 )
        </Expanded>
      </Expression>
      <Expression success="false" type="CHECK" filename="coverage_maxout.cpp" line="0">
        <Original>
          6 &lt; a
        </Original>
        <Expanded>
          6 &lt;  Approx( 5.0 )
        </Expanded>
      </Expression>
      <Expression success="false" type="CHECK" filename="coverage_maxout.cpp" line="0">
        <Original>
          6 &lt;= a
        </Original>
        <Expanded>
          6 &lt;= Approx( 5.0 )
        </Expanded>
      </Expression>
      <OverallResultsAsserts successes="22" failures="9" test_case_success="false"/>
    </TestCase>
  </TestSuite>
  <TestSuite name="exception related">
    <TestCase name="will end from a std::string exception" filename="coverage_maxout.cpp" line="0">
      <Exception crash="false">
        std::string!
      </Exception>
      <OverallResultsAsserts successes="0" failures="0" test_case_success="false"/>
    </TestCase>
    <TestCase name="will end from a const char* exception" filename="coverage_maxout.cpp" line="0">
      <Exception crash="false">
        const char*!
      </Exception>
      <OverallResultsAsserts successes="0" failures="0" test_case_success="false"/>
    </TestCase>
    <TestCase name="will end from an unknown exception" filename="coverage_maxout.cpp" line="0">
      <Exception crash="false">
        unknown exception
      </Exception>
      <OverallResultsAsserts successes="0" failures="0" test_case_success="false"/>
    </TestCase>
  </TestSuite>
  <OverallResultsAsserts successes="22" failures="9"/>
  <OverallResultsTestCases successes="0" failures="4"/>
</doctest>
Program code.
